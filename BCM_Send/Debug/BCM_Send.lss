
BCM_Send.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001570  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00001570  00001604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000134  0080007a  0080007a  0000161e  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00001620  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  000031ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00003770  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000214a  00000000  00000000  000038d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000937  00000000  00000000  00005a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000823  00000000  00000000  00006351  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c88  00000000  00000000  00006b74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001030  00000000  00000000  000077fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001eb3  00000000  00000000  0000882c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 34 02 	jmp	0x468	; 0x468 <__vector_1>
       8:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_2>
       c:	0c 94 82 02 	jmp	0x504	; 0x504 <__vector_3>
      10:	0c 94 a9 02 	jmp	0x552	; 0x552 <__vector_4>
      14:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__vector_5>
      18:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_6>
      1c:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__vector_7>
      20:	0c 94 45 03 	jmp	0x68a	; 0x68a <__vector_8>
      24:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__vector_9>
      28:	0c 94 93 03 	jmp	0x726	; 0x726 <__vector_10>
      2c:	0c 94 ba 03 	jmp	0x774	; 0x774 <__vector_11>
      30:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__vector_12>
      34:	0c 94 08 04 	jmp	0x810	; 0x810 <__vector_13>
      38:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__vector_14>
      3c:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__vector_15>
      40:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__vector_16>
      44:	0c 94 a4 04 	jmp	0x948	; 0x948 <__vector_17>
      48:	0c 94 cb 04 	jmp	0x996	; 0x996 <__vector_18>
      4c:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__vector_19>
      50:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3a       	cpi	r26, 0xAE	; 174
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 19 01 	call	0x232	; 0x232 <main>
      8a:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BCM_Init>:
extern uint8_t Buffer_Array[];
uint8_t u8Index=0;
extern uint8_t u8_DATA;
extern uint8_t size;
ERROR_STATUS BCM_Init (const BCM_ConfigType * ConfigPtr )
{
      92:	0f 93       	push	r16
      94:	cf 93       	push	r28
      96:	df 93       	push	r29
      98:	ec 01       	movw	r28, r24
  uint8_t ret=E_OK;
if(ConfigPtr == NULL){ret=NULL_PTR+BCM_MODULE;}
      9a:	00 97       	sbiw	r24, 0x00	; 0
      9c:	a9 f1       	breq	.+106    	; 0x108 <BCM_Init+0x76>
else{
/*Intialize SPI..*/
switch (ConfigPtr->u8_channel_Protcol) {
      9e:	88 81       	ld	r24, Y
      a0:	82 30       	cpi	r24, 0x02	; 2
      a2:	29 f0       	breq	.+10     	; 0xae <BCM_Init+0x1c>
      a4:	83 30       	cpi	r24, 0x03	; 3
      a6:	f1 f0       	breq	.+60     	; 0xe4 <BCM_Init+0x52>
      a8:	81 30       	cpi	r24, 0x01	; 1
      aa:	81 f5       	brne	.+96     	; 0x10c <BCM_Init+0x7a>
      ac:	0b c0       	rjmp	.+22     	; 0xc4 <BCM_Init+0x32>
  case SPI:
  u8_Is_Intialized++;
      ae:	80 91 7b 00 	lds	r24, 0x007B
      b2:	8f 5f       	subi	r24, 0xFF	; 255
      b4:	80 93 7b 00 	sts	0x007B, r24
	SPI_Init();
      b8:	0e 94 c0 05 	call	0xb80	; 0xb80 <SPI_Init>
  Enable_communication_interrupt();
      bc:	0e 94 19 09 	call	0x1232	; 0x1232 <Enable_communication_interrupt>
uint8_t u8Index=0;
extern uint8_t u8_DATA;
extern uint8_t size;
ERROR_STATUS BCM_Init (const BCM_ConfigType * ConfigPtr )
{
  uint8_t ret=E_OK;
      c0:	80 e0       	ldi	r24, 0x00	; 0
switch (ConfigPtr->u8_channel_Protcol) {
  case SPI:
  u8_Is_Intialized++;
	SPI_Init();
  Enable_communication_interrupt();
  break;
      c2:	25 c0       	rjmp	.+74     	; 0x10e <BCM_Init+0x7c>
  case UART:
u8_Is_Intialized++;
      c4:	80 91 7b 00 	lds	r24, 0x007B
      c8:	8f 5f       	subi	r24, 0xFF	; 255
      ca:	80 93 7b 00 	sts	0x007B, r24
  Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
      ce:	87 e6       	ldi	r24, 0x67	; 103
      d0:	60 e0       	ldi	r22, 0x00	; 0
      d2:	40 e0       	ldi	r20, 0x00	; 0
      d4:	23 e0       	ldi	r18, 0x03	; 3
      d6:	00 e0       	ldi	r16, 0x00	; 0
      d8:	0e 94 b7 08 	call	0x116e	; 0x116e <Uart_Init>
	Enable_communication_interrupt();
      dc:	0e 94 19 09 	call	0x1232	; 0x1232 <Enable_communication_interrupt>
uint8_t u8Index=0;
extern uint8_t u8_DATA;
extern uint8_t size;
ERROR_STATUS BCM_Init (const BCM_ConfigType * ConfigPtr )
{
  uint8_t ret=E_OK;
      e0:	80 e0       	ldi	r24, 0x00	; 0
  break;
  case UART:
u8_Is_Intialized++;
  Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
	Enable_communication_interrupt();
  break;
      e2:	15 c0       	rjmp	.+42     	; 0x10e <BCM_Init+0x7c>
  case UARTANDSPI:
  u8_Is_Intialized++;
      e4:	80 91 7b 00 	lds	r24, 0x007B
      e8:	8f 5f       	subi	r24, 0xFF	; 255
      ea:	80 93 7b 00 	sts	0x007B, r24
  SPI_Init();
      ee:	0e 94 c0 05 	call	0xb80	; 0xb80 <SPI_Init>
  Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
      f2:	87 e6       	ldi	r24, 0x67	; 103
      f4:	60 e0       	ldi	r22, 0x00	; 0
      f6:	40 e0       	ldi	r20, 0x00	; 0
      f8:	23 e0       	ldi	r18, 0x03	; 3
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	0e 94 b7 08 	call	0x116e	; 0x116e <Uart_Init>
	Enable_communication_interrupt();
     100:	0e 94 19 09 	call	0x1232	; 0x1232 <Enable_communication_interrupt>
uint8_t u8Index=0;
extern uint8_t u8_DATA;
extern uint8_t size;
ERROR_STATUS BCM_Init (const BCM_ConfigType * ConfigPtr )
{
  uint8_t ret=E_OK;
     104:	80 e0       	ldi	r24, 0x00	; 0
  case UARTANDSPI:
  u8_Is_Intialized++;
  SPI_Init();
  Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
	Enable_communication_interrupt();
  break;
     106:	03 c0       	rjmp	.+6      	; 0x10e <BCM_Init+0x7c>
extern uint8_t u8_DATA;
extern uint8_t size;
ERROR_STATUS BCM_Init (const BCM_ConfigType * ConfigPtr )
{
  uint8_t ret=E_OK;
if(ConfigPtr == NULL){ret=NULL_PTR+BCM_MODULE;}
     108:	84 e3       	ldi	r24, 0x34	; 52
     10a:	01 c0       	rjmp	.+2      	; 0x10e <BCM_Init+0x7c>
  SPI_Init();
  Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
	Enable_communication_interrupt();
  break;
  case I2C:
  ret=INVALID_PARM+BCM_MODULE;
     10c:	8a e3       	ldi	r24, 0x3A	; 58
  ret=INVALID_PARM+BCM_MODULE;
  break;

}
}
u8_frameID=ConfigPtr -> u8_BCM_ID;
     10e:	99 81       	ldd	r25, Y+1	; 0x01
     110:	90 93 7c 00 	sts	0x007C, r25
return ret;
}
     114:	df 91       	pop	r29
     116:	cf 91       	pop	r28
     118:	0f 91       	pop	r16
     11a:	08 95       	ret

0000011c <BCM_DeInit>:
ERROR_STATUS BCM_DeInit (const BCM_ConfigType * ConfigPtr)
{
uint8_t ret=E_OK;
    if(u8_Is_Intialized==1)
     11c:	20 91 7b 00 	lds	r18, 0x007B
     120:	21 30       	cpi	r18, 0x01	; 1
     122:	19 f5       	brne	.+70     	; 0x16a <BCM_DeInit+0x4e>
      {
      switch (ConfigPtr->u8_channel_Protcol)
     124:	fc 01       	movw	r30, r24
     126:	80 81       	ld	r24, Z
     128:	82 30       	cpi	r24, 0x02	; 2
     12a:	59 f0       	breq	.+22     	; 0x142 <BCM_DeInit+0x26>
     12c:	83 30       	cpi	r24, 0x03	; 3
     12e:	18 f4       	brcc	.+6      	; 0x136 <BCM_DeInit+0x1a>
     130:	81 30       	cpi	r24, 0x01	; 1
     132:	29 f4       	brne	.+10     	; 0x13e <BCM_DeInit+0x22>
     134:	0c c0       	rjmp	.+24     	; 0x14e <BCM_DeInit+0x32>
     136:	83 30       	cpi	r24, 0x03	; 3
     138:	81 f0       	breq	.+32     	; 0x15a <BCM_DeInit+0x3e>
     13a:	84 30       	cpi	r24, 0x04	; 4
     13c:	d1 f0       	breq	.+52     	; 0x172 <BCM_DeInit+0x56>
u8_frameID=ConfigPtr -> u8_BCM_ID;
return ret;
}
ERROR_STATUS BCM_DeInit (const BCM_ConfigType * ConfigPtr)
{
uint8_t ret=E_OK;
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	08 95       	ret
    if(u8_Is_Intialized==1)
      {
      switch (ConfigPtr->u8_channel_Protcol)
        {
          case SPI:
            u8_Is_Intialized--;
     142:	10 92 7b 00 	sts	0x007B, r1
	           SPI_De_Init();
     146:	0e 94 ff 05 	call	0xbfe	; 0xbfe <SPI_De_Init>
u8_frameID=ConfigPtr -> u8_BCM_ID;
return ret;
}
ERROR_STATUS BCM_DeInit (const BCM_ConfigType * ConfigPtr)
{
uint8_t ret=E_OK;
     14a:	80 e0       	ldi	r24, 0x00	; 0
      switch (ConfigPtr->u8_channel_Protcol)
        {
          case SPI:
            u8_Is_Intialized--;
	           SPI_De_Init();
          break;
     14c:	08 95       	ret
          case UART:
            u8_Is_Intialized--;
     14e:	10 92 7b 00 	sts	0x007B, r1
             Uart_De_Init();
     152:	0e 94 2e 09 	call	0x125c	; 0x125c <Uart_De_Init>
u8_frameID=ConfigPtr -> u8_BCM_ID;
return ret;
}
ERROR_STATUS BCM_DeInit (const BCM_ConfigType * ConfigPtr)
{
uint8_t ret=E_OK;
     156:	80 e0       	ldi	r24, 0x00	; 0
	           SPI_De_Init();
          break;
          case UART:
            u8_Is_Intialized--;
             Uart_De_Init();
          break;
     158:	08 95       	ret
          case UARTANDSPI:
            u8_Is_Intialized--;
     15a:	10 92 7b 00 	sts	0x007B, r1
            SPI_De_Init();
     15e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <SPI_De_Init>
            Uart_De_Init();
     162:	0e 94 2e 09 	call	0x125c	; 0x125c <Uart_De_Init>
u8_frameID=ConfigPtr -> u8_BCM_ID;
return ret;
}
ERROR_STATUS BCM_DeInit (const BCM_ConfigType * ConfigPtr)
{
uint8_t ret=E_OK;
     166:	80 e0       	ldi	r24, 0x00	; 0
          break;
          case UARTANDSPI:
            u8_Is_Intialized--;
            SPI_De_Init();
            Uart_De_Init();
          break;
     168:	08 95       	ret
          case I2C:
            ret=INVALID_PARM+BCM_MODULE;
          break;
        }
    }else if(u8_Is_Intialized > 1)
     16a:	22 30       	cpi	r18, 0x02	; 2
     16c:	20 f0       	brcs	.+8      	; 0x176 <BCM_DeInit+0x5a>
      {
        ret=MULTIPLE_INIT+BCM_MODULE;
     16e:	88 e3       	ldi	r24, 0x38	; 56
     170:	08 95       	ret
            u8_Is_Intialized--;
            SPI_De_Init();
            Uart_De_Init();
          break;
          case I2C:
            ret=INVALID_PARM+BCM_MODULE;
     172:	8a e3       	ldi	r24, 0x3A	; 58
     174:	08 95       	ret
    }else if(u8_Is_Intialized > 1)
      {
        ret=MULTIPLE_INIT+BCM_MODULE;
      }else
      {
        ret = NOT_INIT+BCM_MODULE;
     176:	86 e3       	ldi	r24, 0x36	; 54
      }
return ret;
}
     178:	08 95       	ret

0000017a <BCM_TxDispatcher>:
/*calculate check sum*/
/*Enable Spi int and disable uart int when buffer is full*/
/*When spi emptys buffer enable uart interrupt*/

return ret;
}
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	08 95       	ret

0000017e <BCM_Send>:
ERROR_STATUS BCM_Send(
  uint8_t u8_channel_Protcol ,
  uint8_t u8_BCM_ID,
  uint8_t u8_data_Lenght,
  uint8_t Num_of_Frames )
{
     17e:	cf 93       	push	r28
     180:	c4 2f       	mov	r28, r20
  uint8_t ret=E_OK;

/*BCMID  & data length*/
Buffer_Array[0]=u8_BCM_ID;
     182:	60 93 87 00 	sts	0x0087, r22
Buffer_Array[1]=u8_data_Lenght;
     186:	40 93 88 00 	sts	0x0088, r20
u8Index=2;
     18a:	92 e0       	ldi	r25, 0x02	; 2
     18c:	90 93 7a 00 	sts	0x007A, r25
/*************************************************************/
            /*                                */
/*************************************************************/

switch (u8_channel_Protcol)
     190:	82 30       	cpi	r24, 0x02	; 2
     192:	59 f0       	breq	.+22     	; 0x1aa <BCM_Send+0x2c>
     194:	83 30       	cpi	r24, 0x03	; 3
     196:	18 f4       	brcc	.+6      	; 0x19e <BCM_Send+0x20>
     198:	81 30       	cpi	r24, 0x01	; 1
     19a:	d1 f4       	brne	.+52     	; 0x1d0 <BCM_Send+0x52>
     19c:	0e c0       	rjmp	.+28     	; 0x1ba <BCM_Send+0x3c>
     19e:	83 30       	cpi	r24, 0x03	; 3
     1a0:	91 f0       	breq	.+36     	; 0x1c6 <BCM_Send+0x48>
     1a2:	84 30       	cpi	r24, 0x04	; 4
     1a4:	a9 f4       	brne	.+42     	; 0x1d0 <BCM_Send+0x52>
    break;
    case UARTANDSPI:
       spi_send_first(u8_BCM_ID);
    break;
    case I2C:
      ret=INVALID_PARM+BCM_MODULE;
     1a6:	8a e3       	ldi	r24, 0x3A	; 58
     1a8:	14 c0       	rjmp	.+40     	; 0x1d2 <BCM_Send+0x54>
/*************************************************************/

switch (u8_channel_Protcol)
  {
    case SPI:
      spi_send_first(u8_BCM_ID);
     1aa:	86 2f       	mov	r24, r22
     1ac:	0e 94 01 06 	call	0xc02	; 0xc02 <spi_send_first>
      spi_send_first(u8_data_Lenght);
     1b0:	8c 2f       	mov	r24, r28
     1b2:	0e 94 01 06 	call	0xc02	; 0xc02 <spi_send_first>
  uint8_t u8_channel_Protcol ,
  uint8_t u8_BCM_ID,
  uint8_t u8_data_Lenght,
  uint8_t Num_of_Frames )
{
  uint8_t ret=E_OK;
     1b6:	80 e0       	ldi	r24, 0x00	; 0
switch (u8_channel_Protcol)
  {
    case SPI:
      spi_send_first(u8_BCM_ID);
      spi_send_first(u8_data_Lenght);
    break;
     1b8:	0c c0       	rjmp	.+24     	; 0x1d2 <BCM_Send+0x54>
    case UART:
    	Uart_tryansmitfirstbyte(u8_BCM_ID);
     1ba:	86 2f       	mov	r24, r22
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	0e 94 2a 09 	call	0x1254	; 0x1254 <Uart_tryansmitfirstbyte>
  uint8_t u8_channel_Protcol ,
  uint8_t u8_BCM_ID,
  uint8_t u8_data_Lenght,
  uint8_t Num_of_Frames )
{
  uint8_t ret=E_OK;
     1c2:	80 e0       	ldi	r24, 0x00	; 0
      spi_send_first(u8_BCM_ID);
      spi_send_first(u8_data_Lenght);
    break;
    case UART:
    	Uart_tryansmitfirstbyte(u8_BCM_ID);
    break;
     1c4:	06 c0       	rjmp	.+12     	; 0x1d2 <BCM_Send+0x54>
    case UARTANDSPI:
       spi_send_first(u8_BCM_ID);
     1c6:	86 2f       	mov	r24, r22
     1c8:	0e 94 01 06 	call	0xc02	; 0xc02 <spi_send_first>
  uint8_t u8_channel_Protcol ,
  uint8_t u8_BCM_ID,
  uint8_t u8_data_Lenght,
  uint8_t Num_of_Frames )
{
  uint8_t ret=E_OK;
     1cc:	80 e0       	ldi	r24, 0x00	; 0
    case UART:
    	Uart_tryansmitfirstbyte(u8_BCM_ID);
    break;
    case UARTANDSPI:
       spi_send_first(u8_BCM_ID);
    break;
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <BCM_Send+0x54>
    case I2C:
      ret=INVALID_PARM+BCM_MODULE;
    break;
    default:
    ret=E_NOK+INVALID_PARM+BCM_MODULE;
     1d0:	8b e3       	ldi	r24, 0x3B	; 59
  }

  return ret;
}
     1d2:	cf 91       	pop	r28
     1d4:	08 95       	ret

000001d6 <Uart_Int_RX>:


void Uart_Int_RX(void)
{
  u8_DATA=UDR;
     1d6:	9c b1       	in	r25, 0x0c	; 12
     1d8:	90 93 65 00 	sts	0x0065, r25
  if(u8Index<size)
     1dc:	80 91 7a 00 	lds	r24, 0x007A
     1e0:	20 91 66 00 	lds	r18, 0x0066
     1e4:	82 17       	cp	r24, r18
     1e6:	48 f4       	brcc	.+18     	; 0x1fa <Uart_Int_RX+0x24>
  {
    Buffer_Array[u8Index]=u8_DATA;
     1e8:	e7 e8       	ldi	r30, 0x87	; 135
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	e8 0f       	add	r30, r24
     1ee:	f1 1d       	adc	r31, r1
     1f0:	90 83       	st	Z, r25
    u8Index++;
     1f2:	8f 5f       	subi	r24, 0xFF	; 255
     1f4:	80 93 7a 00 	sts	0x007A, r24
     1f8:	08 95       	ret
  }
    else{
      u8Index=2;
     1fa:	82 e0       	ldi	r24, 0x02	; 2
     1fc:	80 93 7a 00 	sts	0x007A, r24
     200:	08 95       	ret

00000202 <SPI_int_Master_Send>:

}
void SPI_int_Master_Send(void)
{
  /******Disable uart Rx int******/
  SPDR=u8_DATA;
     202:	80 91 65 00 	lds	r24, 0x0065
     206:	8f b9       	out	0x0f, r24	; 15
  if(u8Index<size)
     208:	80 91 7a 00 	lds	r24, 0x007A
     20c:	90 91 66 00 	lds	r25, 0x0066
     210:	89 17       	cp	r24, r25
     212:	58 f4       	brcc	.+22     	; 0x22a <SPI_int_Master_Send+0x28>
  {
    u8_DATA=Buffer_Array[u8Index];
     214:	e7 e8       	ldi	r30, 0x87	; 135
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	e8 0f       	add	r30, r24
     21a:	f1 1d       	adc	r31, r1
     21c:	90 81       	ld	r25, Z
     21e:	90 93 65 00 	sts	0x0065, r25
    u8Index++;
     222:	8f 5f       	subi	r24, 0xFF	; 255
     224:	80 93 7a 00 	sts	0x007A, r24
     228:	08 95       	ret
  }
    else{
      u8Index=2;
     22a:	82 e0       	ldi	r24, 0x02	; 2
     22c:	80 93 7a 00 	sts	0x007A, r24
     230:	08 95       	ret

00000232 <main>:
	gpioPinDirection(GPIOB,BIT3,OUTPUT);
	Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
	Enable_communication_interrupt();
	SPI_Init();
*/
BCM_Init (&BCM_Configuration);
     232:	80 e6       	ldi	r24, 0x60	; 96
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 49 00 	call	0x92	; 0x92 <BCM_Init>
/*	SPDR=u8_DATA;*/
BCM_Send(UARTANDSPI,'M',250,4);
     23a:	83 e0       	ldi	r24, 0x03	; 3
     23c:	6d e4       	ldi	r22, 0x4D	; 77
     23e:	4a ef       	ldi	r20, 0xFA	; 250
     240:	24 e0       	ldi	r18, 0x04	; 4
     242:	0e 94 bf 00 	call	0x17e	; 0x17e <BCM_Send>
     246:	ff cf       	rjmp	.-2      	; 0x246 <main+0x14>

00000248 <gpioPortDirection>:
 * @param value: set the port value and takes the following values
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */

switch (u8_port)	
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	49 f0       	breq	.+18     	; 0x25e <gpioPortDirection+0x16>
     24c:	81 30       	cpi	r24, 0x01	; 1
     24e:	28 f0       	brcs	.+10     	; 0x25a <gpioPortDirection+0x12>
     250:	82 30       	cpi	r24, 0x02	; 2
     252:	39 f0       	breq	.+14     	; 0x262 <gpioPortDirection+0x1a>
     254:	83 30       	cpi	r24, 0x03	; 3
     256:	41 f4       	brne	.+16     	; 0x268 <gpioPortDirection+0x20>
     258:	06 c0       	rjmp	.+12     	; 0x266 <gpioPortDirection+0x1e>
{	case GPIOA:
	PORTA_DIR = u8_direction;
     25a:	6a bb       	out	0x1a, r22	; 26
	break;
     25c:	08 95       	ret
	case GPIOB:
	PORTB_DIR = u8_direction;
     25e:	67 bb       	out	0x17, r22	; 23
	break;
     260:	08 95       	ret
	case GPIOC:
	PORTC_DIR = u8_direction;
     262:	64 bb       	out	0x14, r22	; 20
	break;
     264:	08 95       	ret
	case GPIOD:
	PORTD_DIR = u8_direction;
     266:	61 bb       	out	0x11, r22	; 17
     268:	08 95       	ret

0000026a <gpioPortWrite>:
}

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	
switch (u8_port)	
     26a:	81 30       	cpi	r24, 0x01	; 1
     26c:	49 f0       	breq	.+18     	; 0x280 <gpioPortWrite+0x16>
     26e:	81 30       	cpi	r24, 0x01	; 1
     270:	28 f0       	brcs	.+10     	; 0x27c <gpioPortWrite+0x12>
     272:	82 30       	cpi	r24, 0x02	; 2
     274:	39 f0       	breq	.+14     	; 0x284 <gpioPortWrite+0x1a>
     276:	83 30       	cpi	r24, 0x03	; 3
     278:	41 f4       	brne	.+16     	; 0x28a <gpioPortWrite+0x20>
     27a:	06 c0       	rjmp	.+12     	; 0x288 <gpioPortWrite+0x1e>
{	case GPIOA:
	PORTA_DATA = u8_value;
     27c:	6b bb       	out	0x1b, r22	; 27
	break;
     27e:	08 95       	ret
	case GPIOB:
	PORTB_DATA = u8_value;
     280:	68 bb       	out	0x18, r22	; 24
	break;
     282:	08 95       	ret
	case GPIOC:
	PORTC_DATA = u8_value;
     284:	65 bb       	out	0x15, r22	; 21
	break;
     286:	08 95       	ret
	case GPIOD:
	PORTD_DATA = u8_value;
     288:	62 bb       	out	0x12, r22	; 18
     28a:	08 95       	ret

0000028c <gpioPortToggle>:
	
}
void gpioPortToggle(uint8_t u8_port)
{
	
switch (u8_port)	
     28c:	81 30       	cpi	r24, 0x01	; 1
     28e:	59 f0       	breq	.+22     	; 0x2a6 <gpioPortToggle+0x1a>
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	28 f0       	brcs	.+10     	; 0x29e <gpioPortToggle+0x12>
     294:	82 30       	cpi	r24, 0x02	; 2
     296:	59 f0       	breq	.+22     	; 0x2ae <gpioPortToggle+0x22>
     298:	83 30       	cpi	r24, 0x03	; 3
     29a:	81 f4       	brne	.+32     	; 0x2bc <gpioPortToggle+0x30>
     29c:	0c c0       	rjmp	.+24     	; 0x2b6 <gpioPortToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^= HIGH;
     29e:	8b b3       	in	r24, 0x1b	; 27
     2a0:	80 95       	com	r24
     2a2:	8b bb       	out	0x1b, r24	; 27
	break;
     2a4:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^= HIGH;
     2a6:	88 b3       	in	r24, 0x18	; 24
     2a8:	80 95       	com	r24
     2aa:	88 bb       	out	0x18, r24	; 24
	break;
     2ac:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^= HIGH;
     2ae:	85 b3       	in	r24, 0x15	; 21
     2b0:	80 95       	com	r24
     2b2:	85 bb       	out	0x15, r24	; 21
	break;
     2b4:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^= HIGH;
     2b6:	82 b3       	in	r24, 0x12	; 18
     2b8:	80 95       	com	r24
     2ba:	82 bb       	out	0x12, r24	; 18
     2bc:	08 95       	ret

000002be <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
	
switch (u8_port)	
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	49 f0       	breq	.+18     	; 0x2d4 <gpioPortRead+0x16>
     2c2:	81 30       	cpi	r24, 0x01	; 1
     2c4:	28 f0       	brcs	.+10     	; 0x2d0 <gpioPortRead+0x12>
     2c6:	82 30       	cpi	r24, 0x02	; 2
     2c8:	39 f0       	breq	.+14     	; 0x2d8 <gpioPortRead+0x1a>
     2ca:	83 30       	cpi	r24, 0x03	; 3
     2cc:	49 f4       	brne	.+18     	; 0x2e0 <gpioPortRead+0x22>
     2ce:	06 c0       	rjmp	.+12     	; 0x2dc <gpioPortRead+0x1e>
{	case GPIOA:
	U8_ret_Port_data=PORTA_DATA & HIGH;
     2d0:	8b b3       	in	r24, 0x1b	; 27
	break;
     2d2:	08 95       	ret
	case GPIOB:
	U8_ret_Port_data=PORTB_DATA & HIGH;
     2d4:	88 b3       	in	r24, 0x18	; 24
	break;
     2d6:	08 95       	ret
	case GPIOC:
	U8_ret_Port_data=PORTC_DATA & HIGH;
     2d8:	85 b3       	in	r24, 0x15	; 21
	break;
     2da:	08 95       	ret
	case GPIOD:
	U8_ret_Port_data=PORTD_DATA & HIGH;
     2dc:	82 b3       	in	r24, 0x12	; 18
	break;
     2de:	08 95       	ret
	
}

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
     2e0:	80 e0       	ldi	r24, 0x00	; 0
	break;
	
}

return 	U8_ret_Port_data;
}
     2e2:	08 95       	ret

000002e4 <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
switch(u8_direction){
     2e4:	44 23       	and	r20, r20
     2e6:	19 f0       	breq	.+6      	; 0x2ee <gpioPinDirection+0xa>
     2e8:	4f 3f       	cpi	r20, 0xFF	; 255
     2ea:	d1 f5       	brne	.+116    	; 0x360 <gpioPinDirection+0x7c>
     2ec:	21 c0       	rjmp	.+66     	; 0x330 <gpioPinDirection+0x4c>
case INPUT:
{
switch (u8_port)	
     2ee:	81 30       	cpi	r24, 0x01	; 1
     2f0:	69 f0       	breq	.+26     	; 0x30c <gpioPinDirection+0x28>
     2f2:	81 30       	cpi	r24, 0x01	; 1
     2f4:	28 f0       	brcs	.+10     	; 0x300 <gpioPinDirection+0x1c>
     2f6:	82 30       	cpi	r24, 0x02	; 2
     2f8:	79 f0       	breq	.+30     	; 0x318 <gpioPinDirection+0x34>
     2fa:	83 30       	cpi	r24, 0x03	; 3
     2fc:	c9 f4       	brne	.+50     	; 0x330 <gpioPinDirection+0x4c>
     2fe:	12 c0       	rjmp	.+36     	; 0x324 <gpioPinDirection+0x40>
{	case GPIOA:
	PORTA_DIR &=(~u8_pins);   // 0b01111111
     300:	8a b3       	in	r24, 0x1a	; 26
     302:	96 2f       	mov	r25, r22
     304:	90 95       	com	r25
     306:	89 23       	and	r24, r25
     308:	8a bb       	out	0x1a, r24	; 26
     30a:	1b c0       	rjmp	.+54     	; 0x342 <gpioPinDirection+0x5e>
	break;
	case GPIOB:
	PORTB_DIR &=(~u8_pins);
     30c:	87 b3       	in	r24, 0x17	; 23
     30e:	96 2f       	mov	r25, r22
     310:	90 95       	com	r25
     312:	89 23       	and	r24, r25
     314:	87 bb       	out	0x17, r24	; 23
     316:	19 c0       	rjmp	.+50     	; 0x34a <gpioPinDirection+0x66>
	break;
	case GPIOC:
	PORTC_DIR &=(~u8_pins);
     318:	84 b3       	in	r24, 0x14	; 20
     31a:	96 2f       	mov	r25, r22
     31c:	90 95       	com	r25
     31e:	89 23       	and	r24, r25
     320:	84 bb       	out	0x14, r24	; 20
     322:	17 c0       	rjmp	.+46     	; 0x352 <gpioPinDirection+0x6e>
	break;
	case GPIOD:
	PORTD_DIR &=(~u8_pins);
     324:	81 b3       	in	r24, 0x11	; 17
     326:	96 2f       	mov	r25, r22
     328:	90 95       	com	r25
     32a:	89 23       	and	r24, r25
     32c:	81 bb       	out	0x11, r24	; 17
     32e:	15 c0       	rjmp	.+42     	; 0x35a <gpioPinDirection+0x76>
	break;
	
}
}
case OUTPUT:{
switch (u8_port)	
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	59 f0       	breq	.+22     	; 0x34a <gpioPinDirection+0x66>
     334:	81 30       	cpi	r24, 0x01	; 1
     336:	28 f0       	brcs	.+10     	; 0x342 <gpioPinDirection+0x5e>
     338:	82 30       	cpi	r24, 0x02	; 2
     33a:	59 f0       	breq	.+22     	; 0x352 <gpioPinDirection+0x6e>
     33c:	83 30       	cpi	r24, 0x03	; 3
     33e:	81 f4       	brne	.+32     	; 0x360 <gpioPinDirection+0x7c>
     340:	0c c0       	rjmp	.+24     	; 0x35a <gpioPinDirection+0x76>
{	case GPIOA:
	PORTA_DIR |=(u8_pins);
     342:	8a b3       	in	r24, 0x1a	; 26
     344:	68 2b       	or	r22, r24
     346:	6a bb       	out	0x1a, r22	; 26
	break;
     348:	08 95       	ret
	case GPIOB:
	PORTB_DIR |=(u8_pins);
     34a:	87 b3       	in	r24, 0x17	; 23
     34c:	68 2b       	or	r22, r24
     34e:	67 bb       	out	0x17, r22	; 23
	break;
     350:	08 95       	ret
	case GPIOC:
	PORTC_DIR |=(u8_pins);
     352:	84 b3       	in	r24, 0x14	; 20
     354:	68 2b       	or	r22, r24
     356:	64 bb       	out	0x14, r22	; 20
	break;
     358:	08 95       	ret
	case GPIOD:
	PORTD_DIR |=(u8_pins);
     35a:	81 b3       	in	r24, 0x11	; 17
     35c:	68 2b       	or	r22, r24
     35e:	61 bb       	out	0x11, r22	; 17
     360:	08 95       	ret

00000362 <gpioPinWrite>:
	
	
}

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{switch(u8_value){
     362:	44 23       	and	r20, r20
     364:	19 f0       	breq	.+6      	; 0x36c <gpioPinWrite+0xa>
     366:	4f 3f       	cpi	r20, 0xFF	; 255
     368:	b1 f5       	brne	.+108    	; 0x3d6 <gpioPinWrite+0x74>
     36a:	1d c0       	rjmp	.+58     	; 0x3a6 <gpioPinWrite+0x44>
case LOW:
{
switch (u8_port)	
     36c:	81 30       	cpi	r24, 0x01	; 1
     36e:	61 f0       	breq	.+24     	; 0x388 <gpioPinWrite+0x26>
     370:	81 30       	cpi	r24, 0x01	; 1
     372:	28 f0       	brcs	.+10     	; 0x37e <gpioPinWrite+0x1c>
     374:	82 30       	cpi	r24, 0x02	; 2
     376:	69 f0       	breq	.+26     	; 0x392 <gpioPinWrite+0x30>
     378:	83 30       	cpi	r24, 0x03	; 3
     37a:	69 f5       	brne	.+90     	; 0x3d6 <gpioPinWrite+0x74>
     37c:	0f c0       	rjmp	.+30     	; 0x39c <gpioPinWrite+0x3a>
{	case GPIOA:
	PORTA_DATA &= ~(u8_pins);   // 0b01111111
     37e:	8b b3       	in	r24, 0x1b	; 27
     380:	60 95       	com	r22
     382:	68 23       	and	r22, r24
     384:	6b bb       	out	0x1b, r22	; 27
	break;
     386:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(u8_pins);
     388:	88 b3       	in	r24, 0x18	; 24
     38a:	60 95       	com	r22
     38c:	68 23       	and	r22, r24
     38e:	68 bb       	out	0x18, r22	; 24
	break;
     390:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(u8_pins);
     392:	85 b3       	in	r24, 0x15	; 21
     394:	60 95       	com	r22
     396:	68 23       	and	r22, r24
     398:	65 bb       	out	0x15, r22	; 21
	break;
     39a:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(u8_pins);
     39c:	82 b3       	in	r24, 0x12	; 18
     39e:	60 95       	com	r22
     3a0:	68 23       	and	r22, r24
     3a2:	62 bb       	out	0x12, r22	; 18
	break;
     3a4:	08 95       	ret
	
}
break;
}
case HIGH:{
switch (u8_port)	
     3a6:	81 30       	cpi	r24, 0x01	; 1
     3a8:	59 f0       	breq	.+22     	; 0x3c0 <gpioPinWrite+0x5e>
     3aa:	81 30       	cpi	r24, 0x01	; 1
     3ac:	28 f0       	brcs	.+10     	; 0x3b8 <gpioPinWrite+0x56>
     3ae:	82 30       	cpi	r24, 0x02	; 2
     3b0:	59 f0       	breq	.+22     	; 0x3c8 <gpioPinWrite+0x66>
     3b2:	83 30       	cpi	r24, 0x03	; 3
     3b4:	81 f4       	brne	.+32     	; 0x3d6 <gpioPinWrite+0x74>
     3b6:	0c c0       	rjmp	.+24     	; 0x3d0 <gpioPinWrite+0x6e>
{	case GPIOA:
	PORTA_DATA |=(u8_pins);
     3b8:	8b b3       	in	r24, 0x1b	; 27
     3ba:	68 2b       	or	r22, r24
     3bc:	6b bb       	out	0x1b, r22	; 27
	break;
     3be:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(u8_pins);
     3c0:	88 b3       	in	r24, 0x18	; 24
     3c2:	68 2b       	or	r22, r24
     3c4:	68 bb       	out	0x18, r22	; 24
	break;
     3c6:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(u8_pins);
     3c8:	85 b3       	in	r24, 0x15	; 21
     3ca:	68 2b       	or	r22, r24
     3cc:	65 bb       	out	0x15, r22	; 21
	break;
     3ce:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(u8_pins);
     3d0:	82 b3       	in	r24, 0x12	; 18
     3d2:	68 2b       	or	r22, r24
     3d4:	62 bb       	out	0x12, r22	; 18
     3d6:	08 95       	ret

000003d8 <gpioPinToggle>:
}

}
void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
switch (u8_port)	
     3d8:	81 30       	cpi	r24, 0x01	; 1
     3da:	59 f0       	breq	.+22     	; 0x3f2 <gpioPinToggle+0x1a>
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	28 f0       	brcs	.+10     	; 0x3ea <gpioPinToggle+0x12>
     3e0:	82 30       	cpi	r24, 0x02	; 2
     3e2:	59 f0       	breq	.+22     	; 0x3fa <gpioPinToggle+0x22>
     3e4:	83 30       	cpi	r24, 0x03	; 3
     3e6:	81 f4       	brne	.+32     	; 0x408 <gpioPinToggle+0x30>
     3e8:	0c c0       	rjmp	.+24     	; 0x402 <gpioPinToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^=(u8_pins);
     3ea:	8b b3       	in	r24, 0x1b	; 27
     3ec:	68 27       	eor	r22, r24
     3ee:	6b bb       	out	0x1b, r22	; 27
	break;
     3f0:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^=(u8_pins);
     3f2:	88 b3       	in	r24, 0x18	; 24
     3f4:	68 27       	eor	r22, r24
     3f6:	68 bb       	out	0x18, r22	; 24
	break;
     3f8:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^=(u8_pins);
     3fa:	85 b3       	in	r24, 0x15	; 21
     3fc:	68 27       	eor	r22, r24
     3fe:	65 bb       	out	0x15, r22	; 21
	break;
     400:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^=(u8_pins);
     402:	82 b3       	in	r24, 0x12	; 18
     404:	68 27       	eor	r22, r24
     406:	62 bb       	out	0x12, r22	; 18
     408:	08 95       	ret

0000040a <gpioPinRead>:
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
switch (u8_port)	
     40a:	81 30       	cpi	r24, 0x01	; 1
     40c:	51 f0       	breq	.+20     	; 0x422 <gpioPinRead+0x18>
     40e:	81 30       	cpi	r24, 0x01	; 1
     410:	28 f0       	brcs	.+10     	; 0x41c <gpioPinRead+0x12>
     412:	82 30       	cpi	r24, 0x02	; 2
     414:	49 f0       	breq	.+18     	; 0x428 <gpioPinRead+0x1e>
     416:	83 30       	cpi	r24, 0x03	; 3
     418:	69 f4       	brne	.+26     	; 0x434 <gpioPinRead+0x2a>
     41a:	09 c0       	rjmp	.+18     	; 0x42e <gpioPinRead+0x24>
{	case GPIOA:
	U8_ret_BIT_data=(PORTA_PIN & u8_pin);
     41c:	89 b3       	in	r24, 0x19	; 25
     41e:	68 23       	and	r22, r24
	break;
     420:	0a c0       	rjmp	.+20     	; 0x436 <gpioPinRead+0x2c>
	case GPIOB:
	U8_ret_BIT_data=(PORTB_PIN & u8_pin);
     422:	86 b3       	in	r24, 0x16	; 22
     424:	68 23       	and	r22, r24
	break;
     426:	07 c0       	rjmp	.+14     	; 0x436 <gpioPinRead+0x2c>
	case GPIOC:
	U8_ret_BIT_data=(PORTC_PIN & u8_pin);
     428:	83 b3       	in	r24, 0x13	; 19
     42a:	68 23       	and	r22, r24
	break;
     42c:	04 c0       	rjmp	.+8      	; 0x436 <gpioPinRead+0x2c>
	case GPIOD:
	U8_ret_BIT_data=(PORTD_PIN & u8_pin);
     42e:	80 b3       	in	r24, 0x10	; 16
     430:	68 23       	and	r22, r24
	break;
     432:	01 c0       	rjmp	.+2      	; 0x436 <gpioPinRead+0x2c>
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
     434:	60 e0       	ldi	r22, 0x00	; 0
}
	
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	66 23       	and	r22, r22
     43a:	09 f4       	brne	.+2      	; 0x43e <gpioPinRead+0x34>
     43c:	80 e0       	ldi	r24, 0x00	; 0
if(U8_ret_BIT_data > 0)
{
	U8_ret_BIT_data = 1;
}
return U8_ret_BIT_data;
     43e:	08 95       	ret

00000440 <G_interrupt_Enable>:
ptr_to_Fun SPM_RDY;

void G_interrupt_Enable(void)
{
//	sei();
 SREG |=(0x80);
     440:	8f b7       	in	r24, 0x3f	; 63
     442:	80 68       	ori	r24, 0x80	; 128
     444:	8f bf       	out	0x3f, r24	; 63
}
     446:	08 95       	ret

00000448 <EX_interrupt_enable2>:
void EX_interrupt_enable2(void)
{
gpioPinDirection(GPIOB,BIT2,LOW);
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	64 e0       	ldi	r22, 0x04	; 4
     44c:	40 e0       	ldi	r20, 0x00	; 0
     44e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <gpioPinDirection>
SET_BIT(GICR,INT2);
     452:	8b b7       	in	r24, 0x3b	; 59
     454:	80 62       	ori	r24, 0x20	; 32
     456:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCSR,6);
     458:	84 b7       	in	r24, 0x34	; 52
     45a:	80 64       	ori	r24, 0x40	; 64
     45c:	84 bf       	out	0x34, r24	; 52
}
     45e:	08 95       	ret

00000460 <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     460:	8f b7       	in	r24, 0x3f	; 63
     462:	8f 77       	andi	r24, 0x7F	; 127
     464:	8f bf       	out	0x3f, r24	; 63
}
     466:	08 95       	ret

00000468 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     468:	1f 92       	push	r1
     46a:	0f 92       	push	r0
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	0f 92       	push	r0
     470:	11 24       	eor	r1, r1
     472:	2f 93       	push	r18
     474:	3f 93       	push	r19
     476:	4f 93       	push	r20
     478:	5f 93       	push	r21
     47a:	6f 93       	push	r22
     47c:	7f 93       	push	r23
     47e:	8f 93       	push	r24
     480:	9f 93       	push	r25
     482:	af 93       	push	r26
     484:	bf 93       	push	r27
     486:	ef 93       	push	r30
     488:	ff 93       	push	r31
  INT0_external_interrupt();
     48a:	e0 91 98 01 	lds	r30, 0x0198
     48e:	f0 91 99 01 	lds	r31, 0x0199
     492:	09 95       	icall
}
     494:	ff 91       	pop	r31
     496:	ef 91       	pop	r30
     498:	bf 91       	pop	r27
     49a:	af 91       	pop	r26
     49c:	9f 91       	pop	r25
     49e:	8f 91       	pop	r24
     4a0:	7f 91       	pop	r23
     4a2:	6f 91       	pop	r22
     4a4:	5f 91       	pop	r21
     4a6:	4f 91       	pop	r20
     4a8:	3f 91       	pop	r19
     4aa:	2f 91       	pop	r18
     4ac:	0f 90       	pop	r0
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	0f 90       	pop	r0
     4b2:	1f 90       	pop	r1
     4b4:	18 95       	reti

000004b6 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
     4b6:	1f 92       	push	r1
     4b8:	0f 92       	push	r0
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	0f 92       	push	r0
     4be:	11 24       	eor	r1, r1
     4c0:	2f 93       	push	r18
     4c2:	3f 93       	push	r19
     4c4:	4f 93       	push	r20
     4c6:	5f 93       	push	r21
     4c8:	6f 93       	push	r22
     4ca:	7f 93       	push	r23
     4cc:	8f 93       	push	r24
     4ce:	9f 93       	push	r25
     4d0:	af 93       	push	r26
     4d2:	bf 93       	push	r27
     4d4:	ef 93       	push	r30
     4d6:	ff 93       	push	r31
  INT1_external_interrupt();
     4d8:	e0 91 9e 01 	lds	r30, 0x019E
     4dc:	f0 91 9f 01 	lds	r31, 0x019F
     4e0:	09 95       	icall
}
     4e2:	ff 91       	pop	r31
     4e4:	ef 91       	pop	r30
     4e6:	bf 91       	pop	r27
     4e8:	af 91       	pop	r26
     4ea:	9f 91       	pop	r25
     4ec:	8f 91       	pop	r24
     4ee:	7f 91       	pop	r23
     4f0:	6f 91       	pop	r22
     4f2:	5f 91       	pop	r21
     4f4:	4f 91       	pop	r20
     4f6:	3f 91       	pop	r19
     4f8:	2f 91       	pop	r18
     4fa:	0f 90       	pop	r0
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	0f 90       	pop	r0
     500:	1f 90       	pop	r1
     502:	18 95       	reti

00000504 <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     504:	1f 92       	push	r1
     506:	0f 92       	push	r0
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	0f 92       	push	r0
     50c:	11 24       	eor	r1, r1
     50e:	2f 93       	push	r18
     510:	3f 93       	push	r19
     512:	4f 93       	push	r20
     514:	5f 93       	push	r21
     516:	6f 93       	push	r22
     518:	7f 93       	push	r23
     51a:	8f 93       	push	r24
     51c:	9f 93       	push	r25
     51e:	af 93       	push	r26
     520:	bf 93       	push	r27
     522:	ef 93       	push	r30
     524:	ff 93       	push	r31
  INT2_external_interrupt();
     526:	e0 91 8e 01 	lds	r30, 0x018E
     52a:	f0 91 8f 01 	lds	r31, 0x018F
     52e:	09 95       	icall
}
     530:	ff 91       	pop	r31
     532:	ef 91       	pop	r30
     534:	bf 91       	pop	r27
     536:	af 91       	pop	r26
     538:	9f 91       	pop	r25
     53a:	8f 91       	pop	r24
     53c:	7f 91       	pop	r23
     53e:	6f 91       	pop	r22
     540:	5f 91       	pop	r21
     542:	4f 91       	pop	r20
     544:	3f 91       	pop	r19
     546:	2f 91       	pop	r18
     548:	0f 90       	pop	r0
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	0f 90       	pop	r0
     54e:	1f 90       	pop	r1
     550:	18 95       	reti

00000552 <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     552:	1f 92       	push	r1
     554:	0f 92       	push	r0
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	0f 92       	push	r0
     55a:	11 24       	eor	r1, r1
     55c:	2f 93       	push	r18
     55e:	3f 93       	push	r19
     560:	4f 93       	push	r20
     562:	5f 93       	push	r21
     564:	6f 93       	push	r22
     566:	7f 93       	push	r23
     568:	8f 93       	push	r24
     56a:	9f 93       	push	r25
     56c:	af 93       	push	r26
     56e:	bf 93       	push	r27
     570:	ef 93       	push	r30
     572:	ff 93       	push	r31
TIMER2COMP();
     574:	e0 91 6f 00 	lds	r30, 0x006F
     578:	f0 91 70 00 	lds	r31, 0x0070
     57c:	09 95       	icall
}
     57e:	ff 91       	pop	r31
     580:	ef 91       	pop	r30
     582:	bf 91       	pop	r27
     584:	af 91       	pop	r26
     586:	9f 91       	pop	r25
     588:	8f 91       	pop	r24
     58a:	7f 91       	pop	r23
     58c:	6f 91       	pop	r22
     58e:	5f 91       	pop	r21
     590:	4f 91       	pop	r20
     592:	3f 91       	pop	r19
     594:	2f 91       	pop	r18
     596:	0f 90       	pop	r0
     598:	0f be       	out	0x3f, r0	; 63
     59a:	0f 90       	pop	r0
     59c:	1f 90       	pop	r1
     59e:	18 95       	reti

000005a0 <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     5a0:	1f 92       	push	r1
     5a2:	0f 92       	push	r0
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	0f 92       	push	r0
     5a8:	11 24       	eor	r1, r1
     5aa:	2f 93       	push	r18
     5ac:	3f 93       	push	r19
     5ae:	4f 93       	push	r20
     5b0:	5f 93       	push	r21
     5b2:	6f 93       	push	r22
     5b4:	7f 93       	push	r23
     5b6:	8f 93       	push	r24
     5b8:	9f 93       	push	r25
     5ba:	af 93       	push	r26
     5bc:	bf 93       	push	r27
     5be:	ef 93       	push	r30
     5c0:	ff 93       	push	r31
  TIMER2OVF();
     5c2:	e0 91 6d 00 	lds	r30, 0x006D
     5c6:	f0 91 6e 00 	lds	r31, 0x006E
     5ca:	09 95       	icall
}
     5cc:	ff 91       	pop	r31
     5ce:	ef 91       	pop	r30
     5d0:	bf 91       	pop	r27
     5d2:	af 91       	pop	r26
     5d4:	9f 91       	pop	r25
     5d6:	8f 91       	pop	r24
     5d8:	7f 91       	pop	r23
     5da:	6f 91       	pop	r22
     5dc:	5f 91       	pop	r21
     5de:	4f 91       	pop	r20
     5e0:	3f 91       	pop	r19
     5e2:	2f 91       	pop	r18
     5e4:	0f 90       	pop	r0
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	0f 90       	pop	r0
     5ea:	1f 90       	pop	r1
     5ec:	18 95       	reti

000005ee <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     5ee:	1f 92       	push	r1
     5f0:	0f 92       	push	r0
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	0f 92       	push	r0
     5f6:	11 24       	eor	r1, r1
     5f8:	2f 93       	push	r18
     5fa:	3f 93       	push	r19
     5fc:	4f 93       	push	r20
     5fe:	5f 93       	push	r21
     600:	6f 93       	push	r22
     602:	7f 93       	push	r23
     604:	8f 93       	push	r24
     606:	9f 93       	push	r25
     608:	af 93       	push	r26
     60a:	bf 93       	push	r27
     60c:	ef 93       	push	r30
     60e:	ff 93       	push	r31
  TIMER1CAPT();
     610:	e0 91 a0 01 	lds	r30, 0x01A0
     614:	f0 91 a1 01 	lds	r31, 0x01A1
     618:	09 95       	icall
}
     61a:	ff 91       	pop	r31
     61c:	ef 91       	pop	r30
     61e:	bf 91       	pop	r27
     620:	af 91       	pop	r26
     622:	9f 91       	pop	r25
     624:	8f 91       	pop	r24
     626:	7f 91       	pop	r23
     628:	6f 91       	pop	r22
     62a:	5f 91       	pop	r21
     62c:	4f 91       	pop	r20
     62e:	3f 91       	pop	r19
     630:	2f 91       	pop	r18
     632:	0f 90       	pop	r0
     634:	0f be       	out	0x3f, r0	; 63
     636:	0f 90       	pop	r0
     638:	1f 90       	pop	r1
     63a:	18 95       	reti

0000063c <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     63c:	1f 92       	push	r1
     63e:	0f 92       	push	r0
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	0f 92       	push	r0
     644:	11 24       	eor	r1, r1
     646:	2f 93       	push	r18
     648:	3f 93       	push	r19
     64a:	4f 93       	push	r20
     64c:	5f 93       	push	r21
     64e:	6f 93       	push	r22
     650:	7f 93       	push	r23
     652:	8f 93       	push	r24
     654:	9f 93       	push	r25
     656:	af 93       	push	r26
     658:	bf 93       	push	r27
     65a:	ef 93       	push	r30
     65c:	ff 93       	push	r31
TIMER1COMPA();
     65e:	e0 91 8c 01 	lds	r30, 0x018C
     662:	f0 91 8d 01 	lds	r31, 0x018D
     666:	09 95       	icall
}
     668:	ff 91       	pop	r31
     66a:	ef 91       	pop	r30
     66c:	bf 91       	pop	r27
     66e:	af 91       	pop	r26
     670:	9f 91       	pop	r25
     672:	8f 91       	pop	r24
     674:	7f 91       	pop	r23
     676:	6f 91       	pop	r22
     678:	5f 91       	pop	r21
     67a:	4f 91       	pop	r20
     67c:	3f 91       	pop	r19
     67e:	2f 91       	pop	r18
     680:	0f 90       	pop	r0
     682:	0f be       	out	0x3f, r0	; 63
     684:	0f 90       	pop	r0
     686:	1f 90       	pop	r1
     688:	18 95       	reti

0000068a <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
     68a:	1f 92       	push	r1
     68c:	0f 92       	push	r0
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	0f 92       	push	r0
     692:	11 24       	eor	r1, r1
     694:	2f 93       	push	r18
     696:	3f 93       	push	r19
     698:	4f 93       	push	r20
     69a:	5f 93       	push	r21
     69c:	6f 93       	push	r22
     69e:	7f 93       	push	r23
     6a0:	8f 93       	push	r24
     6a2:	9f 93       	push	r25
     6a4:	af 93       	push	r26
     6a6:	bf 93       	push	r27
     6a8:	ef 93       	push	r30
     6aa:	ff 93       	push	r31
  TIMER1COMPB();
     6ac:	e0 91 8a 01 	lds	r30, 0x018A
     6b0:	f0 91 8b 01 	lds	r31, 0x018B
     6b4:	09 95       	icall
}
     6b6:	ff 91       	pop	r31
     6b8:	ef 91       	pop	r30
     6ba:	bf 91       	pop	r27
     6bc:	af 91       	pop	r26
     6be:	9f 91       	pop	r25
     6c0:	8f 91       	pop	r24
     6c2:	7f 91       	pop	r23
     6c4:	6f 91       	pop	r22
     6c6:	5f 91       	pop	r21
     6c8:	4f 91       	pop	r20
     6ca:	3f 91       	pop	r19
     6cc:	2f 91       	pop	r18
     6ce:	0f 90       	pop	r0
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	0f 90       	pop	r0
     6d4:	1f 90       	pop	r1
     6d6:	18 95       	reti

000006d8 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     6d8:	1f 92       	push	r1
     6da:	0f 92       	push	r0
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	0f 92       	push	r0
     6e0:	11 24       	eor	r1, r1
     6e2:	2f 93       	push	r18
     6e4:	3f 93       	push	r19
     6e6:	4f 93       	push	r20
     6e8:	5f 93       	push	r21
     6ea:	6f 93       	push	r22
     6ec:	7f 93       	push	r23
     6ee:	8f 93       	push	r24
     6f0:	9f 93       	push	r25
     6f2:	af 93       	push	r26
     6f4:	bf 93       	push	r27
     6f6:	ef 93       	push	r30
     6f8:	ff 93       	push	r31
  TIMER1OVF();
     6fa:	e0 91 a2 01 	lds	r30, 0x01A2
     6fe:	f0 91 a3 01 	lds	r31, 0x01A3
     702:	09 95       	icall
}
     704:	ff 91       	pop	r31
     706:	ef 91       	pop	r30
     708:	bf 91       	pop	r27
     70a:	af 91       	pop	r26
     70c:	9f 91       	pop	r25
     70e:	8f 91       	pop	r24
     710:	7f 91       	pop	r23
     712:	6f 91       	pop	r22
     714:	5f 91       	pop	r21
     716:	4f 91       	pop	r20
     718:	3f 91       	pop	r19
     71a:	2f 91       	pop	r18
     71c:	0f 90       	pop	r0
     71e:	0f be       	out	0x3f, r0	; 63
     720:	0f 90       	pop	r0
     722:	1f 90       	pop	r1
     724:	18 95       	reti

00000726 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     726:	1f 92       	push	r1
     728:	0f 92       	push	r0
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	0f 92       	push	r0
     72e:	11 24       	eor	r1, r1
     730:	2f 93       	push	r18
     732:	3f 93       	push	r19
     734:	4f 93       	push	r20
     736:	5f 93       	push	r21
     738:	6f 93       	push	r22
     73a:	7f 93       	push	r23
     73c:	8f 93       	push	r24
     73e:	9f 93       	push	r25
     740:	af 93       	push	r26
     742:	bf 93       	push	r27
     744:	ef 93       	push	r30
     746:	ff 93       	push	r31

  TIMER0COMP();
     748:	e0 91 6b 00 	lds	r30, 0x006B
     74c:	f0 91 6c 00 	lds	r31, 0x006C
     750:	09 95       	icall
}
     752:	ff 91       	pop	r31
     754:	ef 91       	pop	r30
     756:	bf 91       	pop	r27
     758:	af 91       	pop	r26
     75a:	9f 91       	pop	r25
     75c:	8f 91       	pop	r24
     75e:	7f 91       	pop	r23
     760:	6f 91       	pop	r22
     762:	5f 91       	pop	r21
     764:	4f 91       	pop	r20
     766:	3f 91       	pop	r19
     768:	2f 91       	pop	r18
     76a:	0f 90       	pop	r0
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	0f 90       	pop	r0
     770:	1f 90       	pop	r1
     772:	18 95       	reti

00000774 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     774:	1f 92       	push	r1
     776:	0f 92       	push	r0
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	0f 92       	push	r0
     77c:	11 24       	eor	r1, r1
     77e:	2f 93       	push	r18
     780:	3f 93       	push	r19
     782:	4f 93       	push	r20
     784:	5f 93       	push	r21
     786:	6f 93       	push	r22
     788:	7f 93       	push	r23
     78a:	8f 93       	push	r24
     78c:	9f 93       	push	r25
     78e:	af 93       	push	r26
     790:	bf 93       	push	r27
     792:	ef 93       	push	r30
     794:	ff 93       	push	r31

  TIMER0OVF_INT();
     796:	e0 91 90 01 	lds	r30, 0x0190
     79a:	f0 91 91 01 	lds	r31, 0x0191
     79e:	09 95       	icall
}
     7a0:	ff 91       	pop	r31
     7a2:	ef 91       	pop	r30
     7a4:	bf 91       	pop	r27
     7a6:	af 91       	pop	r26
     7a8:	9f 91       	pop	r25
     7aa:	8f 91       	pop	r24
     7ac:	7f 91       	pop	r23
     7ae:	6f 91       	pop	r22
     7b0:	5f 91       	pop	r21
     7b2:	4f 91       	pop	r20
     7b4:	3f 91       	pop	r19
     7b6:	2f 91       	pop	r18
     7b8:	0f 90       	pop	r0
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	0f 90       	pop	r0
     7be:	1f 90       	pop	r1
     7c0:	18 95       	reti

000007c2 <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
     7c2:	1f 92       	push	r1
     7c4:	0f 92       	push	r0
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	0f 92       	push	r0
     7ca:	11 24       	eor	r1, r1
     7cc:	2f 93       	push	r18
     7ce:	3f 93       	push	r19
     7d0:	4f 93       	push	r20
     7d2:	5f 93       	push	r21
     7d4:	6f 93       	push	r22
     7d6:	7f 93       	push	r23
     7d8:	8f 93       	push	r24
     7da:	9f 93       	push	r25
     7dc:	af 93       	push	r26
     7de:	bf 93       	push	r27
     7e0:	ef 93       	push	r30
     7e2:	ff 93       	push	r31
  SPI_STC();
     7e4:	e0 91 69 00 	lds	r30, 0x0069
     7e8:	f0 91 6a 00 	lds	r31, 0x006A
     7ec:	09 95       	icall
}
     7ee:	ff 91       	pop	r31
     7f0:	ef 91       	pop	r30
     7f2:	bf 91       	pop	r27
     7f4:	af 91       	pop	r26
     7f6:	9f 91       	pop	r25
     7f8:	8f 91       	pop	r24
     7fa:	7f 91       	pop	r23
     7fc:	6f 91       	pop	r22
     7fe:	5f 91       	pop	r21
     800:	4f 91       	pop	r20
     802:	3f 91       	pop	r19
     804:	2f 91       	pop	r18
     806:	0f 90       	pop	r0
     808:	0f be       	out	0x3f, r0	; 63
     80a:	0f 90       	pop	r0
     80c:	1f 90       	pop	r1
     80e:	18 95       	reti

00000810 <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     810:	1f 92       	push	r1
     812:	0f 92       	push	r0
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	0f 92       	push	r0
     818:	11 24       	eor	r1, r1
     81a:	2f 93       	push	r18
     81c:	3f 93       	push	r19
     81e:	4f 93       	push	r20
     820:	5f 93       	push	r21
     822:	6f 93       	push	r22
     824:	7f 93       	push	r23
     826:	8f 93       	push	r24
     828:	9f 93       	push	r25
     82a:	af 93       	push	r26
     82c:	bf 93       	push	r27
     82e:	ef 93       	push	r30
     830:	ff 93       	push	r31
  USART_RXC();
     832:	e0 91 67 00 	lds	r30, 0x0067
     836:	f0 91 68 00 	lds	r31, 0x0068
     83a:	09 95       	icall
}
     83c:	ff 91       	pop	r31
     83e:	ef 91       	pop	r30
     840:	bf 91       	pop	r27
     842:	af 91       	pop	r26
     844:	9f 91       	pop	r25
     846:	8f 91       	pop	r24
     848:	7f 91       	pop	r23
     84a:	6f 91       	pop	r22
     84c:	5f 91       	pop	r21
     84e:	4f 91       	pop	r20
     850:	3f 91       	pop	r19
     852:	2f 91       	pop	r18
     854:	0f 90       	pop	r0
     856:	0f be       	out	0x3f, r0	; 63
     858:	0f 90       	pop	r0
     85a:	1f 90       	pop	r1
     85c:	18 95       	reti

0000085e <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     85e:	1f 92       	push	r1
     860:	0f 92       	push	r0
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	0f 92       	push	r0
     866:	11 24       	eor	r1, r1
     868:	2f 93       	push	r18
     86a:	3f 93       	push	r19
     86c:	4f 93       	push	r20
     86e:	5f 93       	push	r21
     870:	6f 93       	push	r22
     872:	7f 93       	push	r23
     874:	8f 93       	push	r24
     876:	9f 93       	push	r25
     878:	af 93       	push	r26
     87a:	bf 93       	push	r27
     87c:	ef 93       	push	r30
     87e:	ff 93       	push	r31
  USART_UDRE();
     880:	e0 91 9c 01 	lds	r30, 0x019C
     884:	f0 91 9d 01 	lds	r31, 0x019D
     888:	09 95       	icall
}
     88a:	ff 91       	pop	r31
     88c:	ef 91       	pop	r30
     88e:	bf 91       	pop	r27
     890:	af 91       	pop	r26
     892:	9f 91       	pop	r25
     894:	8f 91       	pop	r24
     896:	7f 91       	pop	r23
     898:	6f 91       	pop	r22
     89a:	5f 91       	pop	r21
     89c:	4f 91       	pop	r20
     89e:	3f 91       	pop	r19
     8a0:	2f 91       	pop	r18
     8a2:	0f 90       	pop	r0
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	0f 90       	pop	r0
     8a8:	1f 90       	pop	r1
     8aa:	18 95       	reti

000008ac <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     8ac:	1f 92       	push	r1
     8ae:	0f 92       	push	r0
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	0f 92       	push	r0
     8b4:	11 24       	eor	r1, r1
     8b6:	2f 93       	push	r18
     8b8:	3f 93       	push	r19
     8ba:	4f 93       	push	r20
     8bc:	5f 93       	push	r21
     8be:	6f 93       	push	r22
     8c0:	7f 93       	push	r23
     8c2:	8f 93       	push	r24
     8c4:	9f 93       	push	r25
     8c6:	af 93       	push	r26
     8c8:	bf 93       	push	r27
     8ca:	ef 93       	push	r30
     8cc:	ff 93       	push	r31
  USART_TXC();
     8ce:	e0 91 9a 01 	lds	r30, 0x019A
     8d2:	f0 91 9b 01 	lds	r31, 0x019B
     8d6:	09 95       	icall
}
     8d8:	ff 91       	pop	r31
     8da:	ef 91       	pop	r30
     8dc:	bf 91       	pop	r27
     8de:	af 91       	pop	r26
     8e0:	9f 91       	pop	r25
     8e2:	8f 91       	pop	r24
     8e4:	7f 91       	pop	r23
     8e6:	6f 91       	pop	r22
     8e8:	5f 91       	pop	r21
     8ea:	4f 91       	pop	r20
     8ec:	3f 91       	pop	r19
     8ee:	2f 91       	pop	r18
     8f0:	0f 90       	pop	r0
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	0f 90       	pop	r0
     8f6:	1f 90       	pop	r1
     8f8:	18 95       	reti

000008fa <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     8fa:	1f 92       	push	r1
     8fc:	0f 92       	push	r0
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	0f 92       	push	r0
     902:	11 24       	eor	r1, r1
     904:	2f 93       	push	r18
     906:	3f 93       	push	r19
     908:	4f 93       	push	r20
     90a:	5f 93       	push	r21
     90c:	6f 93       	push	r22
     90e:	7f 93       	push	r23
     910:	8f 93       	push	r24
     912:	9f 93       	push	r25
     914:	af 93       	push	r26
     916:	bf 93       	push	r27
     918:	ef 93       	push	r30
     91a:	ff 93       	push	r31
  ADC_INT();
     91c:	e0 91 94 01 	lds	r30, 0x0194
     920:	f0 91 95 01 	lds	r31, 0x0195
     924:	09 95       	icall
}
     926:	ff 91       	pop	r31
     928:	ef 91       	pop	r30
     92a:	bf 91       	pop	r27
     92c:	af 91       	pop	r26
     92e:	9f 91       	pop	r25
     930:	8f 91       	pop	r24
     932:	7f 91       	pop	r23
     934:	6f 91       	pop	r22
     936:	5f 91       	pop	r21
     938:	4f 91       	pop	r20
     93a:	3f 91       	pop	r19
     93c:	2f 91       	pop	r18
     93e:	0f 90       	pop	r0
     940:	0f be       	out	0x3f, r0	; 63
     942:	0f 90       	pop	r0
     944:	1f 90       	pop	r1
     946:	18 95       	reti

00000948 <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
     948:	1f 92       	push	r1
     94a:	0f 92       	push	r0
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	0f 92       	push	r0
     950:	11 24       	eor	r1, r1
     952:	2f 93       	push	r18
     954:	3f 93       	push	r19
     956:	4f 93       	push	r20
     958:	5f 93       	push	r21
     95a:	6f 93       	push	r22
     95c:	7f 93       	push	r23
     95e:	8f 93       	push	r24
     960:	9f 93       	push	r25
     962:	af 93       	push	r26
     964:	bf 93       	push	r27
     966:	ef 93       	push	r30
     968:	ff 93       	push	r31
  EE_RDY();
     96a:	e0 91 96 01 	lds	r30, 0x0196
     96e:	f0 91 97 01 	lds	r31, 0x0197
     972:	09 95       	icall
}
     974:	ff 91       	pop	r31
     976:	ef 91       	pop	r30
     978:	bf 91       	pop	r27
     97a:	af 91       	pop	r26
     97c:	9f 91       	pop	r25
     97e:	8f 91       	pop	r24
     980:	7f 91       	pop	r23
     982:	6f 91       	pop	r22
     984:	5f 91       	pop	r21
     986:	4f 91       	pop	r20
     988:	3f 91       	pop	r19
     98a:	2f 91       	pop	r18
     98c:	0f 90       	pop	r0
     98e:	0f be       	out	0x3f, r0	; 63
     990:	0f 90       	pop	r0
     992:	1f 90       	pop	r1
     994:	18 95       	reti

00000996 <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
     996:	1f 92       	push	r1
     998:	0f 92       	push	r0
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	0f 92       	push	r0
     99e:	11 24       	eor	r1, r1
     9a0:	2f 93       	push	r18
     9a2:	3f 93       	push	r19
     9a4:	4f 93       	push	r20
     9a6:	5f 93       	push	r21
     9a8:	6f 93       	push	r22
     9aa:	7f 93       	push	r23
     9ac:	8f 93       	push	r24
     9ae:	9f 93       	push	r25
     9b0:	af 93       	push	r26
     9b2:	bf 93       	push	r27
     9b4:	ef 93       	push	r30
     9b6:	ff 93       	push	r31
  ANA_COMP();
     9b8:	e0 91 92 01 	lds	r30, 0x0192
     9bc:	f0 91 93 01 	lds	r31, 0x0193
     9c0:	09 95       	icall
}
     9c2:	ff 91       	pop	r31
     9c4:	ef 91       	pop	r30
     9c6:	bf 91       	pop	r27
     9c8:	af 91       	pop	r26
     9ca:	9f 91       	pop	r25
     9cc:	8f 91       	pop	r24
     9ce:	7f 91       	pop	r23
     9d0:	6f 91       	pop	r22
     9d2:	5f 91       	pop	r21
     9d4:	4f 91       	pop	r20
     9d6:	3f 91       	pop	r19
     9d8:	2f 91       	pop	r18
     9da:	0f 90       	pop	r0
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	0f 90       	pop	r0
     9e0:	1f 90       	pop	r1
     9e2:	18 95       	reti

000009e4 <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
     9e4:	1f 92       	push	r1
     9e6:	0f 92       	push	r0
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	0f 92       	push	r0
     9ec:	11 24       	eor	r1, r1
     9ee:	2f 93       	push	r18
     9f0:	3f 93       	push	r19
     9f2:	4f 93       	push	r20
     9f4:	5f 93       	push	r21
     9f6:	6f 93       	push	r22
     9f8:	7f 93       	push	r23
     9fa:	8f 93       	push	r24
     9fc:	9f 93       	push	r25
     9fe:	af 93       	push	r26
     a00:	bf 93       	push	r27
     a02:	ef 93       	push	r30
     a04:	ff 93       	push	r31
  TWI_I2C();
     a06:	e0 91 86 01 	lds	r30, 0x0186
     a0a:	f0 91 87 01 	lds	r31, 0x0187
     a0e:	09 95       	icall
}
     a10:	ff 91       	pop	r31
     a12:	ef 91       	pop	r30
     a14:	bf 91       	pop	r27
     a16:	af 91       	pop	r26
     a18:	9f 91       	pop	r25
     a1a:	8f 91       	pop	r24
     a1c:	7f 91       	pop	r23
     a1e:	6f 91       	pop	r22
     a20:	5f 91       	pop	r21
     a22:	4f 91       	pop	r20
     a24:	3f 91       	pop	r19
     a26:	2f 91       	pop	r18
     a28:	0f 90       	pop	r0
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	0f 90       	pop	r0
     a2e:	1f 90       	pop	r1
     a30:	18 95       	reti

00000a32 <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
     a32:	1f 92       	push	r1
     a34:	0f 92       	push	r0
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	0f 92       	push	r0
     a3a:	11 24       	eor	r1, r1
     a3c:	2f 93       	push	r18
     a3e:	3f 93       	push	r19
     a40:	4f 93       	push	r20
     a42:	5f 93       	push	r21
     a44:	6f 93       	push	r22
     a46:	7f 93       	push	r23
     a48:	8f 93       	push	r24
     a4a:	9f 93       	push	r25
     a4c:	af 93       	push	r26
     a4e:	bf 93       	push	r27
     a50:	ef 93       	push	r30
     a52:	ff 93       	push	r31
  SPM_RDY();
     a54:	e0 91 88 01 	lds	r30, 0x0188
     a58:	f0 91 89 01 	lds	r31, 0x0189
     a5c:	09 95       	icall
}
     a5e:	ff 91       	pop	r31
     a60:	ef 91       	pop	r30
     a62:	bf 91       	pop	r27
     a64:	af 91       	pop	r26
     a66:	9f 91       	pop	r25
     a68:	8f 91       	pop	r24
     a6a:	7f 91       	pop	r23
     a6c:	6f 91       	pop	r22
     a6e:	5f 91       	pop	r21
     a70:	4f 91       	pop	r20
     a72:	3f 91       	pop	r19
     a74:	2f 91       	pop	r18
     a76:	0f 90       	pop	r0
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	0f 90       	pop	r0
     a7c:	1f 90       	pop	r1
     a7e:	18 95       	reti

00000a80 <Led_Init>:
	LED_3

*/
void Led_Init(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     a80:	81 30       	cpi	r24, 0x01	; 1
     a82:	69 f0       	breq	.+26     	; 0xa9e <Led_Init+0x1e>
     a84:	81 30       	cpi	r24, 0x01	; 1
     a86:	28 f0       	brcs	.+10     	; 0xa92 <Led_Init+0x12>
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	79 f0       	breq	.+30     	; 0xaaa <Led_Init+0x2a>
     a8c:	83 30       	cpi	r24, 0x03	; 3
     a8e:	c1 f4       	brne	.+48     	; 0xac0 <Led_Init+0x40>
     a90:	12 c0       	rjmp	.+36     	; 0xab6 <Led_Init+0x36>
{
case LED_0:
gpioPinDirection(LED_0_GPIO,LED_0_BIT,HIGH);
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	60 e1       	ldi	r22, 0x10	; 16
     a96:	4f ef       	ldi	r20, 0xFF	; 255
     a98:	0e 94 72 01 	call	0x2e4	; 0x2e4 <gpioPinDirection>
break;
     a9c:	08 95       	ret

case LED_1:
gpioPinDirection(LED_1_GPIO,LED_1_BIT,HIGH);
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	60 e2       	ldi	r22, 0x20	; 32
     aa2:	4f ef       	ldi	r20, 0xFF	; 255
     aa4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <gpioPinDirection>
break;
     aa8:	08 95       	ret

case LED_2:
gpioPinDirection(LED_2_GPIO,LED_2_BIT,HIGH);
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	60 e4       	ldi	r22, 0x40	; 64
     aae:	4f ef       	ldi	r20, 0xFF	; 255
     ab0:	0e 94 72 01 	call	0x2e4	; 0x2e4 <gpioPinDirection>
break;
     ab4:	08 95       	ret

case LED_3:
gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	60 e8       	ldi	r22, 0x80	; 128
     aba:	4f ef       	ldi	r20, 0xFF	; 255
     abc:	0e 94 72 01 	call	0x2e4	; 0x2e4 <gpioPinDirection>
     ac0:	08 95       	ret

00000ac2 <Led_On>:
}


void Led_On(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     ac2:	81 30       	cpi	r24, 0x01	; 1
     ac4:	69 f0       	breq	.+26     	; 0xae0 <Led_On+0x1e>
     ac6:	81 30       	cpi	r24, 0x01	; 1
     ac8:	28 f0       	brcs	.+10     	; 0xad4 <Led_On+0x12>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	79 f0       	breq	.+30     	; 0xaec <Led_On+0x2a>
     ace:	83 30       	cpi	r24, 0x03	; 3
     ad0:	c1 f4       	brne	.+48     	; 0xb02 <Led_On+0x40>
     ad2:	12 c0       	rjmp	.+36     	; 0xaf8 <Led_On+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,HIGH);
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	60 e1       	ldi	r22, 0x10	; 16
     ad8:	4f ef       	ldi	r20, 0xFF	; 255
     ada:	0e 94 b1 01 	call	0x362	; 0x362 <gpioPinWrite>
break;
     ade:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,HIGH);
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	60 e2       	ldi	r22, 0x20	; 32
     ae4:	4f ef       	ldi	r20, 0xFF	; 255
     ae6:	0e 94 b1 01 	call	0x362	; 0x362 <gpioPinWrite>
break;
     aea:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,HIGH);
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	60 e4       	ldi	r22, 0x40	; 64
     af0:	4f ef       	ldi	r20, 0xFF	; 255
     af2:	0e 94 b1 01 	call	0x362	; 0x362 <gpioPinWrite>
break;
     af6:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,HIGH);
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	60 e8       	ldi	r22, 0x80	; 128
     afc:	4f ef       	ldi	r20, 0xFF	; 255
     afe:	0e 94 b1 01 	call	0x362	; 0x362 <gpioPinWrite>
     b02:	08 95       	ret

00000b04 <Led_Off>:
}

void Led_Off(En_LedNumber_t en_led_id)
{

switch(en_led_id)
     b04:	81 30       	cpi	r24, 0x01	; 1
     b06:	69 f0       	breq	.+26     	; 0xb22 <Led_Off+0x1e>
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	28 f0       	brcs	.+10     	; 0xb16 <Led_Off+0x12>
     b0c:	82 30       	cpi	r24, 0x02	; 2
     b0e:	79 f0       	breq	.+30     	; 0xb2e <Led_Off+0x2a>
     b10:	83 30       	cpi	r24, 0x03	; 3
     b12:	c1 f4       	brne	.+48     	; 0xb44 <Led_Off+0x40>
     b14:	12 c0       	rjmp	.+36     	; 0xb3a <Led_Off+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,LOW);
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	60 e1       	ldi	r22, 0x10	; 16
     b1a:	40 e0       	ldi	r20, 0x00	; 0
     b1c:	0e 94 b1 01 	call	0x362	; 0x362 <gpioPinWrite>
break;
     b20:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,LOW);
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	60 e2       	ldi	r22, 0x20	; 32
     b26:	40 e0       	ldi	r20, 0x00	; 0
     b28:	0e 94 b1 01 	call	0x362	; 0x362 <gpioPinWrite>
break;
     b2c:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,LOW);
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	60 e4       	ldi	r22, 0x40	; 64
     b32:	40 e0       	ldi	r20, 0x00	; 0
     b34:	0e 94 b1 01 	call	0x362	; 0x362 <gpioPinWrite>
break;
     b38:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,LOW);
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	60 e8       	ldi	r22, 0x80	; 128
     b3e:	40 e0       	ldi	r20, 0x00	; 0
     b40:	0e 94 b1 01 	call	0x362	; 0x362 <gpioPinWrite>
     b44:	08 95       	ret

00000b46 <Led_Toggle>:


}
void Led_Toggle(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     b46:	81 30       	cpi	r24, 0x01	; 1
     b48:	61 f0       	breq	.+24     	; 0xb62 <Led_Toggle+0x1c>
     b4a:	81 30       	cpi	r24, 0x01	; 1
     b4c:	28 f0       	brcs	.+10     	; 0xb58 <Led_Toggle+0x12>
     b4e:	82 30       	cpi	r24, 0x02	; 2
     b50:	69 f0       	breq	.+26     	; 0xb6c <Led_Toggle+0x26>
     b52:	83 30       	cpi	r24, 0x03	; 3
     b54:	a1 f4       	brne	.+40     	; 0xb7e <Led_Toggle+0x38>
     b56:	0f c0       	rjmp	.+30     	; 0xb76 <Led_Toggle+0x30>
{
case LED_0:
gpioPinToggle(LED_0_GPIO,LED_0_BIT);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	60 e1       	ldi	r22, 0x10	; 16
     b5c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <gpioPinToggle>
break;
     b60:	08 95       	ret

case LED_1:
gpioPinToggle(LED_1_GPIO,LED_1_BIT);
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	60 e2       	ldi	r22, 0x20	; 32
     b66:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <gpioPinToggle>
break;
     b6a:	08 95       	ret

case LED_2:
gpioPinToggle(LED_2_GPIO,LED_2_BIT);
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	60 e4       	ldi	r22, 0x40	; 64
     b70:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <gpioPinToggle>
break;
     b74:	08 95       	ret

case LED_3:
gpioPinToggle(LED_3_GPIO,LED_3_BIT);
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	60 e8       	ldi	r22, 0x80	; 128
     b7a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <gpioPinToggle>
     b7e:	08 95       	ret

00000b80 <SPI_Init>:
#include "gpio.h"
extern ST_SPI_Configuration SPI_Config ;
extern volatile uint8_t u8_DATA;

void SPI_Init()
{
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
	 ST_SPI_Configuration *gConfig = & SPI_Config;

	/********************Enable SPI Interrupt ******************/

	//SPCR = SPCR | (SPI_INT_ENABLE<<SPIE);
	SPCR = gConfig->MASTER_SLAVE_MODE | gConfig->DATA_ORDER
     b84:	c1 e7       	ldi	r28, 0x71	; 113
     b86:	d0 e0       	ldi	r29, 0x00	; 0
     b88:	90 91 78 00 	lds	r25, 0x0078
     b8c:	88 81       	ld	r24, Y
     b8e:	89 2b       	or	r24, r25
     b90:	9c 81       	ldd	r25, Y+4	; 0x04
     b92:	89 2b       	or	r24, r25
     b94:	99 81       	ldd	r25, Y+1	; 0x01
     b96:	89 2b       	or	r24, r25
     b98:	9d 81       	ldd	r25, Y+5	; 0x05
     b9a:	89 2b       	or	r24, r25
     b9c:	9e 81       	ldd	r25, Y+6	; 0x06
     b9e:	89 2b       	or	r24, r25
     ba0:	8d b9       	out	0x0d, r24	; 13
			  | gConfig->OPERATING_LEVEL | gConfig->PRESCALAR
			 | gConfig->SAMPLING_EDGE | gConfig ->INT_ENABLE;

	SPSR |= gConfig->DOUBLE_SPEED;
     ba2:	9e b1       	in	r25, 0x0e	; 14
     ba4:	8b 81       	ldd	r24, Y+3	; 0x03
     ba6:	89 2b       	or	r24, r25
     ba8:	8e b9       	out	0x0e, r24	; 14
			 gpioPinDirection(GPIOB, BIT4 | BIT5 | BIT7, OUTPUT);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	60 eb       	ldi	r22, 0xB0	; 176
     bae:	4f ef       	ldi	r20, 0xFF	; 255
     bb0:	0e 94 72 01 	call	0x2e4	; 0x2e4 <gpioPinDirection>
			 gpioPinDirection(GPIOB, BIT6, INPUT);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	60 e4       	ldi	r22, 0x40	; 64
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 72 01 	call	0x2e4	; 0x2e4 <gpioPinDirection>

		SPCR |=  gConfig->ENABLE;
     bbe:	9d b1       	in	r25, 0x0d	; 13
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	89 2b       	or	r24, r25
     bc4:	8d b9       	out	0x0d, r24	; 13



}
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	08 95       	ret

00000bcc <SPI_Transciever_INT>:
void SPI_Transciever_INT(void)
{
	SPDR=u8_DATA;
     bcc:	80 91 65 00 	lds	r24, 0x0065
     bd0:	8f b9       	out	0x0f, r24	; 15
}
     bd2:	08 95       	ret

00000bd4 <SPI_Send>:
void  SPI_Send(uint8_t u8_data)
{
     /* Start transmission */
     SPDR = u8_data;
     bd4:	8f b9       	out	0x0f, r24	; 15
    if (!(READBIT(SPCR,SPIE)))
     bd6:	6f 99       	sbic	0x0d, 7	; 13
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <SPI_Send+0xa>
    {
	 	/* Wait for transmission complete */
     while(!(SPSR & (1<<SPIF)));
     bda:	77 9b       	sbis	0x0e, 7	; 14
     bdc:	fe cf       	rjmp	.-4      	; 0xbda <SPI_Send+0x6>
     bde:	08 95       	ret

00000be0 <spi_INT_CALLED>:
		}
}


uint8_t spi_INT_CALLED(void){
	return SPDR;
     be0:	8f b1       	in	r24, 0x0f	; 15
}
     be2:	08 95       	ret

00000be4 <SPI_Receive>:

uint8_t  SPI_Receive(void)
{
	if (!(READBIT(SPCR,SPIE)))
     be4:	6f 99       	sbic	0x0d, 7	; 13
     be6:	02 c0       	rjmp	.+4      	; 0xbec <SPI_Receive+0x8>
	{
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));
     be8:	77 9b       	sbis	0x0e, 7	; 14
     bea:	fe cf       	rjmp	.-4      	; 0xbe8 <SPI_Receive+0x4>
		//return SPDR ; // Received data
	}
	return SPDR;
     bec:	8f b1       	in	r24, 0x0f	; 15
}
     bee:	08 95       	ret

00000bf0 <SPI_Checks_for_collision>:


 uint8_t SPI_Checks_for_collision(void)
{
	 return READBIT(SPSR, WCOL);
     bf0:	8e b1       	in	r24, 0x0e	; 14
     bf2:	82 95       	swap	r24
     bf4:	86 95       	lsr	r24
     bf6:	86 95       	lsr	r24
     bf8:	83 70       	andi	r24, 0x03	; 3
}
     bfa:	81 70       	andi	r24, 0x01	; 1
     bfc:	08 95       	ret

00000bfe <SPI_De_Init>:

void SPI_De_Init(void)
{
SPCR=0;
     bfe:	1d b8       	out	0x0d, r1	; 13
}
     c00:	08 95       	ret

00000c02 <spi_send_first>:
void spi_send_first(uint8_t data)
{
SPDR=data;
     c02:	8f b9       	out	0x0f, r24	; 15
}
     c04:	08 95       	ret

00000c06 <timer0Set>:
}

}
void timer0Set(uint8_t u8_value)
{
TCNT0 =	u8_value;
     c06:	82 bf       	out	0x32, r24	; 50
}
     c08:	08 95       	ret

00000c0a <timer0Read>:

uint8_t timer0Read(void)
{
	 return TCNT0;
     c0a:	82 b7       	in	r24, 0x32	; 50
}
     c0c:	08 95       	ret

00000c0e <timer0Start>:
Depending on prescaler	x     X    X

*/
void timer0Start(void)
{
	 TCCR0 &= (0xF8);
     c0e:	83 b7       	in	r24, 0x33	; 51
     c10:	88 7f       	andi	r24, 0xF8	; 248
     c12:	83 bf       	out	0x33, r24	; 51
	 TCCR0 |= Prescaler_Value;
     c14:	93 b7       	in	r25, 0x33	; 51
     c16:	80 91 83 00 	lds	r24, 0x0083
     c1a:	89 2b       	or	r24, r25
     c1c:	83 bf       	out	0x33, r24	; 51
}
     c1e:	08 95       	ret

00000c20 <timer0Stop>:
						      0     0    0
*/
void timer0Stop(void)
 {

TCCR0 &= (0xF8);
     c20:	83 b7       	in	r24, 0x33	; 51
     c22:	88 7f       	andi	r24, 0xF8	; 248
     c24:	83 bf       	out	0x33, r24	; 51

 }
     c26:	08 95       	ret

00000c28 <timer0Init>:
uint8_t Prescaler_Value2=0;
uint8_t u8g_T1_Prescaler=0;
volatile uint8_t pwm_time_on=0,flag=0;

void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal,uint8_t u8_initialValue, uint8_t u8_outputCompare,En_timer0Interrupt_t en_interruptMask)
{
     c28:	ef 92       	push	r14
     c2a:	0f 93       	push	r16
if(en_prescal == T0_NO_CLOCK)
     c2c:	44 23       	and	r20, r20
     c2e:	19 f4       	brne	.+6      	; 0xc36 <timer0Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer0Stop();
     c30:	0e 94 10 06 	call	0xc20	; 0xc20 <timer0Stop>
     c34:	48 c0       	rjmp	.+144    	; 0xcc6 <timer0Init+0x9e>
}
else
{
TCCR0 |= en_mode|en_prescal;
     c36:	93 b7       	in	r25, 0x33	; 51
     c38:	89 2b       	or	r24, r25
     c3a:	84 2b       	or	r24, r20
     c3c:	83 bf       	out	0x33, r24	; 51
Prescaler_Value=en_prescal;
     c3e:	40 93 83 00 	sts	0x0083, r20
TCNT0 = u8_initialValue;
     c42:	22 bf       	out	0x32, r18	; 50
switch(en_OC0){
     c44:	60 31       	cpi	r22, 0x10	; 16
     c46:	71 f0       	breq	.+28     	; 0xc64 <timer0Init+0x3c>
     c48:	61 31       	cpi	r22, 0x11	; 17
     c4a:	18 f4       	brcc	.+6      	; 0xc52 <timer0Init+0x2a>
     c4c:	66 23       	and	r22, r22
     c4e:	31 f0       	breq	.+12     	; 0xc5c <timer0Init+0x34>
     c50:	14 c0       	rjmp	.+40     	; 0xc7a <timer0Init+0x52>
     c52:	60 32       	cpi	r22, 0x20	; 32
     c54:	59 f0       	breq	.+22     	; 0xc6c <timer0Init+0x44>
     c56:	60 33       	cpi	r22, 0x30	; 48
     c58:	81 f4       	brne	.+32     	; 0xc7a <timer0Init+0x52>
     c5a:	0c c0       	rjmp	.+24     	; 0xc74 <timer0Init+0x4c>
	case  T0_OC0_DIS:
	{
	TCCR0 &= 0xCF;
     c5c:	83 b7       	in	r24, 0x33	; 51
     c5e:	8f 7c       	andi	r24, 0xCF	; 207
     c60:	83 bf       	out	0x33, r24	; 51
		break;
     c62:	0b c0       	rjmp	.+22     	; 0xc7a <timer0Init+0x52>
	}
	case T0_OC0_TOGGLE:
	{
		TCCR0|=T0_OC0_TOGGLE;
     c64:	83 b7       	in	r24, 0x33	; 51
     c66:	80 61       	ori	r24, 0x10	; 16
     c68:	83 bf       	out	0x33, r24	; 51
		break;
     c6a:	07 c0       	rjmp	.+14     	; 0xc7a <timer0Init+0x52>
	}
	case  T0_OC0_CLEAR:
	{
	TCCR0 |= T0_OC0_CLEAR;
     c6c:	83 b7       	in	r24, 0x33	; 51
     c6e:	80 62       	ori	r24, 0x20	; 32
     c70:	83 bf       	out	0x33, r24	; 51

		break;
     c72:	03 c0       	rjmp	.+6      	; 0xc7a <timer0Init+0x52>
	}
	case T0_OC0_SET:
	{
		TCCR0 |=T0_OC0_SET;
     c74:	83 b7       	in	r24, 0x33	; 51
     c76:	80 63       	ori	r24, 0x30	; 48
     c78:	83 bf       	out	0x33, r24	; 51
		break;
	}

}
OCR0  =u8_outputCompare;
     c7a:	0c bf       	out	0x3c, r16	; 60
switch(en_interruptMask){
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	e8 16       	cp	r14, r24
     c80:	69 f0       	breq	.+26     	; 0xc9c <timer0Init+0x74>
     c82:	e8 16       	cp	r14, r24
     c84:	20 f0       	brcs	.+8      	; 0xc8e <timer0Init+0x66>
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	e8 16       	cp	r14, r24
     c8a:	e9 f4       	brne	.+58     	; 0xcc6 <timer0Init+0x9e>
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <timer0Init+0x86>
case  T0_POLLING:{
pooling=0;
     c8e:	10 92 82 00 	sts	0x0082, r1
G_interrupt_Disable();
     c92:	0e 94 30 02 	call	0x460	; 0x460 <G_interrupt_Disable>
TIMSK &= T0_POLLING;
     c96:	89 b7       	in	r24, 0x39	; 57
     c98:	19 be       	out	0x39, r1	; 57
break;
     c9a:	15 c0       	rjmp	.+42     	; 0xcc6 <timer0Init+0x9e>
}
case T0_INTERRUPT_NORMAL :
{pooling=1;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	80 93 82 00 	sts	0x0082, r24
G_interrupt_Enable();
     ca2:	0e 94 20 02 	call	0x440	; 0x440 <G_interrupt_Enable>
TIMSK |= T0_INTERRUPT_NORMAL;
     ca6:	89 b7       	in	r24, 0x39	; 57
     ca8:	81 60       	ori	r24, 0x01	; 1
     caa:	89 bf       	out	0x39, r24	; 57
break;
     cac:	0c c0       	rjmp	.+24     	; 0xcc6 <timer0Init+0x9e>
}
case T0_INTERRUPT_CMP:
{pooling=1;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	80 93 82 00 	sts	0x0082, r24
//G_interrupt_Enable();
SET_BIT(SREG,7);
     cb4:	8f b7       	in	r24, 0x3f	; 63
     cb6:	80 68       	ori	r24, 0x80	; 128
     cb8:	8f bf       	out	0x3f, r24	; 63
TIMSK |= T0_INTERRUPT_NORMAL;
     cba:	89 b7       	in	r24, 0x39	; 57
     cbc:	81 60       	ori	r24, 0x01	; 1
     cbe:	89 bf       	out	0x39, r24	; 57
TIMSK |=T0_INTERRUPT_CMP;
     cc0:	89 b7       	in	r24, 0x39	; 57
     cc2:	82 60       	ori	r24, 0x02	; 2
     cc4:	89 bf       	out	0x39, r24	; 57
}
}

}

}
     cc6:	0f 91       	pop	r16
     cc8:	ef 90       	pop	r14
     cca:	08 95       	ret

00000ccc <timer0DelayMs>:
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
     ccc:	ac 01       	movw	r20, r24
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	41 15       	cp	r20, r1
     cd4:	51 05       	cpc	r21, r1
     cd6:	61 05       	cpc	r22, r1
     cd8:	71 05       	cpc	r23, r1
     cda:	89 f0       	breq	.+34     	; 0xcfe <timer0DelayMs+0x32>
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	dc 01       	movw	r26, r24
{
	while ((TIFR&0x01)==0);
     ce2:	08 b6       	in	r0, 0x38	; 56
     ce4:	00 fe       	sbrs	r0, 0
     ce6:	fd cf       	rjmp	.-6      	; 0xce2 <timer0DelayMs+0x16>
	TIFR |=0x01;
     ce8:	28 b7       	in	r18, 0x38	; 56
     cea:	21 60       	ori	r18, 0x01	; 1
     cec:	28 bf       	out	0x38, r18	; 56
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	a1 1d       	adc	r26, r1
     cf2:	b1 1d       	adc	r27, r1
     cf4:	84 17       	cp	r24, r20
     cf6:	95 07       	cpc	r25, r21
     cf8:	a6 07       	cpc	r26, r22
     cfa:	b7 07       	cpc	r27, r23
     cfc:	90 f3       	brcs	.-28     	; 0xce2 <timer0DelayMs+0x16>
     cfe:	08 95       	ret

00000d00 <timer0DelayUs>:
 at pooling _no prescaling
 240at TCNT0

 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
     d00:	dc 01       	movw	r26, r24
     d02:	cb 01       	movw	r24, r22
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	a1 05       	cpc	r26, r1
     d08:	b1 05       	cpc	r27, r1
     d0a:	31 f0       	breq	.+12     	; 0xd18 <timer0DelayUs+0x18>
	{
	timer0Set(240);
     d0c:	80 ef       	ldi	r24, 0xF0	; 240
     d0e:	0e 94 03 06 	call	0xc06	; 0xc06 <timer0Set>
	while(timer0Read()<=255);
     d12:	0e 94 05 06 	call	0xc0a	; 0xc0a <timer0Read>
     d16:	fd cf       	rjmp	.-6      	; 0xd12 <timer0DelayUs+0x12>
	//while(u32_ovf_counter <= (8*u32_delay_in_us/1000));
	}
	TIFR |=(1<<TOV0);/*Clear the flag*/
     d18:	88 b7       	in	r24, 0x38	; 56
     d1a:	81 60       	ori	r24, 0x01	; 1
     d1c:	88 bf       	out	0x38, r24	; 56
}/*1*/
     d1e:	08 95       	ret

00000d20 <timer0SwPWM>:
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
     d20:	cf 92       	push	r12
     d22:	df 92       	push	r13
     d24:	ef 92       	push	r14
     d26:	ff 92       	push	r15
     d28:	cf 93       	push	r28
     d2a:	c8 2f       	mov	r28, r24
float dutyReal;
pwm_time_on=MAX_HOLD;
     d2c:	8f ef       	ldi	r24, 0xFF	; 255
     d2e:	80 93 7e 00 	sts	0x007E, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
     d32:	60 91 7e 00 	lds	r22, 0x007E
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 c5 09 	call	0x138a	; 0x138a <__floatunsisf>
     d40:	6b 01       	movw	r12, r22
     d42:	7c 01       	movw	r14, r24
}/*1*/
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
     d44:	6c 2f       	mov	r22, r28
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	0e 94 c5 09 	call	0x138a	; 0x138a <__floatunsisf>
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	48 ec       	ldi	r20, 0xC8	; 200
     d56:	52 e4       	ldi	r21, 0x42	; 66
     d58:	0e 94 31 09 	call	0x1262	; 0x1262 <__divsf3>
     d5c:	9b 01       	movw	r18, r22
     d5e:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
     d60:	c7 01       	movw	r24, r14
     d62:	b6 01       	movw	r22, r12
     d64:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__mulsf3>
     d68:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     d6c:	60 93 7e 00 	sts	0x007E, r22
switch(pooling)
     d70:	80 91 82 00 	lds	r24, 0x0082
     d74:	88 23       	and	r24, r24
     d76:	19 f0       	breq	.+6      	; 0xd7e <timer0SwPWM+0x5e>
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	29 f5       	brne	.+74     	; 0xdc6 <timer0SwPWM+0xa6>
     d7c:	1f c0       	rjmp	.+62     	; 0xdbc <timer0SwPWM+0x9c>
{
	case 0:
	{
	timer0Start();
     d7e:	0e 94 07 06 	call	0xc0e	; 0xc0e <timer0Start>
	timer0Set(pwm_time_on);
     d82:	80 91 7e 00 	lds	r24, 0x007E
     d86:	0e 94 03 06 	call	0xc06	; 0xc06 <timer0Set>
	//freq 50KHZ is the Max frequency possible
	while ((TIFR&0x01)==0);
     d8a:	08 b6       	in	r0, 0x38	; 56
     d8c:	00 fe       	sbrs	r0, 0
     d8e:	fd cf       	rjmp	.-6      	; 0xd8a <timer0SwPWM+0x6a>
	TIFR |=0x01;
     d90:	88 b7       	in	r24, 0x38	; 56
     d92:	81 60       	ori	r24, 0x01	; 1
     d94:	88 bf       	out	0x38, r24	; 56
	PORTC_DATA |=0xff;
     d96:	85 b3       	in	r24, 0x15	; 21
     d98:	8f ef       	ldi	r24, 0xFF	; 255
     d9a:	85 bb       	out	0x15, r24	; 21
	timer0Start();
     d9c:	0e 94 07 06 	call	0xc0e	; 0xc0e <timer0Start>
	timer0Set(MAX_HOLD-pwm_time_on);
     da0:	80 91 7e 00 	lds	r24, 0x007E
     da4:	80 95       	com	r24
     da6:	0e 94 03 06 	call	0xc06	; 0xc06 <timer0Set>
	//freq
	while ((TIFR & 0x01)==0);
     daa:	08 b6       	in	r0, 0x38	; 56
     dac:	00 fe       	sbrs	r0, 0
     dae:	fd cf       	rjmp	.-6      	; 0xdaa <timer0SwPWM+0x8a>
	TIFR |=0x01;
     db0:	88 b7       	in	r24, 0x38	; 56
     db2:	81 60       	ori	r24, 0x01	; 1
     db4:	88 bf       	out	0x38, r24	; 56
	PORTC_DATA &=0x00;
     db6:	85 b3       	in	r24, 0x15	; 21
     db8:	15 ba       	out	0x15, r1	; 21

break;
     dba:	05 c0       	rjmp	.+10     	; 0xdc6 <timer0SwPWM+0xa6>
}
case 1:
{
timer0Start();
     dbc:	0e 94 07 06 	call	0xc0e	; 0xc0e <timer0Start>
OCR0=pwm_time_on;
     dc0:	80 91 7e 00 	lds	r24, 0x007E
     dc4:	8c bf       	out	0x3c, r24	; 60
break;
}

}

}
     dc6:	cf 91       	pop	r28
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	df 90       	pop	r13
     dce:	cf 90       	pop	r12
     dd0:	08 95       	ret

00000dd2 <Timer_interrupt_COMP_routine>:



void Timer_interrupt_COMP_routine(void)
{
	PORTD_DATA ^=0xff;
     dd2:	82 b3       	in	r24, 0x12	; 18
     dd4:	80 95       	com	r24
     dd6:	82 bb       	out	0x12, r24	; 18

}
     dd8:	08 95       	ret

00000dda <timer1Init>:
 */
void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC,
	En_timer1perscaler_t en_prescal,uint16_t u16_initialValue,
	uint16_t u16_outputCompareA,uint16_t u16_outputCompareB,
	 uint16_t u16_inputCapture,En_timer1Interrupt_t en_interruptMask)
 {
     dda:	af 92       	push	r10
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	d9 01       	movw	r26, r18
     de6:	2a 2d       	mov	r18, r10
	TCCR1 |= en_mode | en_OC;
     de8:	ee b5       	in	r30, 0x2e	; 46
     dea:	ff b5       	in	r31, 0x2f	; 47
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	86 2b       	or	r24, r22
     df0:	97 2b       	or	r25, r23
     df2:	8e 2b       	or	r24, r30
     df4:	9f 2b       	or	r25, r31
     df6:	9f bd       	out	0x2f, r25	; 47
     df8:	8e bd       	out	0x2e, r24	; 46
	u8g_T1_Prescaler=en_prescal;
     dfa:	40 93 7f 00 	sts	0x007F, r20
	OCR1A =u16_outputCompareA;
     dfe:	1b bd       	out	0x2b, r17	; 43
     e00:	0a bd       	out	0x2a, r16	; 42
	OCR1B =u16_outputCompareB;
     e02:	f9 bc       	out	0x29, r15	; 41
     e04:	e8 bc       	out	0x28, r14	; 40
	TCNT1=u16_initialValue;
     e06:	bd bd       	out	0x2d, r27	; 45
     e08:	ac bd       	out	0x2c, r26	; 44
	switch(en_interruptMask)
     e0a:	28 30       	cpi	r18, 0x08	; 8
     e0c:	d1 f0       	breq	.+52     	; 0xe42 <timer1Init+0x68>
     e0e:	29 30       	cpi	r18, 0x09	; 9
     e10:	28 f4       	brcc	.+10     	; 0xe1c <timer1Init+0x42>
     e12:	aa 20       	and	r10, r10
     e14:	51 f0       	breq	.+20     	; 0xe2a <timer1Init+0x50>
     e16:	24 30       	cpi	r18, 0x04	; 4
     e18:	f9 f4       	brne	.+62     	; 0xe58 <timer1Init+0x7e>
     e1a:	0b c0       	rjmp	.+22     	; 0xe32 <timer1Init+0x58>
     e1c:	20 32       	cpi	r18, 0x20	; 32
     e1e:	a9 f0       	breq	.+42     	; 0xe4a <timer1Init+0x70>
     e20:	2c 33       	cpi	r18, 0x3C	; 60
     e22:	b9 f0       	breq	.+46     	; 0xe52 <timer1Init+0x78>
     e24:	20 31       	cpi	r18, 0x10	; 16
     e26:	c1 f4       	brne	.+48     	; 0xe58 <timer1Init+0x7e>
     e28:	08 c0       	rjmp	.+16     	; 0xe3a <timer1Init+0x60>
	{
		case T1_POLLING:
		{
			TIMSK &=0xC3;
     e2a:	89 b7       	in	r24, 0x39	; 57
     e2c:	83 7c       	andi	r24, 0xC3	; 195
     e2e:	89 bf       	out	0x39, r24	; 57
			/*	     OCIE0 ToIE0   ALL INTERRUPT T1    	OCIE0 ToIE0
			TIMSK &=  1     1        0 0 0 0 	           1     1
			All T1 Interrupts enable are cleared
			but other timers interrupt enable are not effected
			*/
		break;
     e30:	13 c0       	rjmp	.+38     	; 0xe58 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_NORMAL:
		{
			TIMSK |=T1_INTERRUPT_NORMAL;
     e32:	89 b7       	in	r24, 0x39	; 57
     e34:	84 60       	ori	r24, 0x04	; 4
     e36:	89 bf       	out	0x39, r24	; 57
		break;
     e38:	0f c0       	rjmp	.+30     	; 0xe58 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_CMP_1A:
		{
			TIMSK |=T1_INTERRUPT_CMP_1A;
     e3a:	89 b7       	in	r24, 0x39	; 57
     e3c:	80 61       	ori	r24, 0x10	; 16
     e3e:	89 bf       	out	0x39, r24	; 57
			break;
     e40:	0b c0       	rjmp	.+22     	; 0xe58 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_CMP_1B:
		{
			TIMSK |=T1_INTERRUPT_CMP_1B;
     e42:	89 b7       	in	r24, 0x39	; 57
     e44:	88 60       	ori	r24, 0x08	; 8
     e46:	89 bf       	out	0x39, r24	; 57
			break;
     e48:	07 c0       	rjmp	.+14     	; 0xe58 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_ICAPTURE:
		{
			TIMSK |=T1_INTERRUPT_ICAPTURE;
     e4a:	89 b7       	in	r24, 0x39	; 57
     e4c:	80 62       	ori	r24, 0x20	; 32
     e4e:	89 bf       	out	0x39, r24	; 57
			break;
     e50:	03 c0       	rjmp	.+6      	; 0xe58 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_All:
		{
			TIMSK|=T1_INTERRUPT_All;
     e52:	89 b7       	in	r24, 0x39	; 57
     e54:	8c 63       	ori	r24, 0x3C	; 60
     e56:	89 bf       	out	0x39, r24	; 57
	}




	}
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	af 90       	pop	r10
     e62:	08 95       	ret

00000e64 <timer1Set>:


void timer1Set(uint16_t u16_value)
{
TCNT1=u16_value;
     e64:	9d bd       	out	0x2d, r25	; 45
     e66:	8c bd       	out	0x2c, r24	; 44
}
     e68:	08 95       	ret

00000e6a <timer1Read>:
 * Description:
 * @return TCNT1
 */
uint16_t timer1Read(void)
{
return TCNT1;
     e6a:	8c b5       	in	r24, 0x2c	; 44
     e6c:	9d b5       	in	r25, 0x2d	; 45
}
     e6e:	08 95       	ret

00000e70 <timer1Start>:
 * Description:
 * @param
 */
void timer1Start(void)
{
TCCR1|=u8g_T1_Prescaler;
     e70:	2e b5       	in	r18, 0x2e	; 46
     e72:	3f b5       	in	r19, 0x2f	; 47
     e74:	80 91 7f 00 	lds	r24, 0x007F
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	82 2b       	or	r24, r18
     e7c:	93 2b       	or	r25, r19
     e7e:	9f bd       	out	0x2f, r25	; 47
     e80:	8e bd       	out	0x2e, r24	; 46
}
     e82:	08 95       	ret

00000e84 <timer1Stop>:
 * Description:
 * @param
 */
void timer1Stop(void)
{
TCCR1 &=0xfff8;
     e84:	8e b5       	in	r24, 0x2e	; 46
     e86:	9f b5       	in	r25, 0x2f	; 47
     e88:	88 7f       	andi	r24, 0xF8	; 248
     e8a:	9f bd       	out	0x2f, r25	; 47
     e8c:	8e bd       	out	0x2e, r24	; 46
/*Keep all sittings as it is and put zeros in cs10,cs11,cs12*/
}
     e8e:	08 95       	ret

00000e90 <timer1DelayMs>:
 */
void timer1DelayMs(uint16_t u16_delay_in_ms)
{


}
     e90:	08 95       	ret

00000e92 <timer1DelayUs>:
 */
void timer1DelayUs(uint32_t u32_delay_in_us)
{


}
     e92:	08 95       	ret

00000e94 <timer1SwPWM>:
 */
void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{


}
     e94:	08 95       	ret

00000e96 <timer2Set>:
* Description:
* @param value
*/
void timer2Set(uint8_t u8_a_value)
{
TCNT2=u8_a_value;
     e96:	84 bd       	out	0x24, r24	; 36
}
     e98:	08 95       	ret

00000e9a <timer2Read>:
/**
* Description:
* @return
*/
uint8_t timer2Read(void){
return TCNT2;
     e9a:	84 b5       	in	r24, 0x24	; 36
}
     e9c:	08 95       	ret

00000e9e <timer2Start>:
/**
* Description:
*/
void timer2Start(void)
{
TCCR2 &= 0xf8;
     e9e:	85 b5       	in	r24, 0x25	; 37
     ea0:	88 7f       	andi	r24, 0xF8	; 248
     ea2:	85 bd       	out	0x25, r24	; 37
TCCR2 |= Prescaler_Value2;
     ea4:	95 b5       	in	r25, 0x25	; 37
     ea6:	80 91 80 00 	lds	r24, 0x0080
     eaa:	89 2b       	or	r24, r25
     eac:	85 bd       	out	0x25, r24	; 37
}
     eae:	08 95       	ret

00000eb0 <timer2Stop>:
/**
* Description:
*/
void timer2Stop(void)
{
TCCR2 &= 0xf8;
     eb0:	85 b5       	in	r24, 0x25	; 37
     eb2:	88 7f       	andi	r24, 0xF8	; 248
     eb4:	85 bd       	out	0x25, r24	; 37

}
     eb6:	08 95       	ret

00000eb8 <timer2Init>:


}

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC,En_timer2perscaler_t en_prescal2, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
     eb8:	cf 92       	push	r12
     eba:	0f 93       	push	r16
if(en_prescal2 == T2_NO_CLOCK)
     ebc:	44 23       	and	r20, r20
     ebe:	19 f4       	brne	.+6      	; 0xec6 <timer2Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer2Stop();
     ec0:	0e 94 58 07 	call	0xeb0	; 0xeb0 <timer2Stop>
     ec4:	46 c0       	rjmp	.+140    	; 0xf52 <timer2Init+0x9a>
}
else
{
TCCR2 |= en_mode|en_prescal2 ;
     ec6:	95 b5       	in	r25, 0x25	; 37
     ec8:	89 2b       	or	r24, r25
     eca:	84 2b       	or	r24, r20
     ecc:	85 bd       	out	0x25, r24	; 37
Prescaler_Value2=en_prescal2;
     ece:	40 93 80 00 	sts	0x0080, r20
TCNT2 = u8_initialValue;
     ed2:	24 bd       	out	0x24, r18	; 36
switch(en_OC){
     ed4:	60 31       	cpi	r22, 0x10	; 16
     ed6:	71 f0       	breq	.+28     	; 0xef4 <timer2Init+0x3c>
     ed8:	61 31       	cpi	r22, 0x11	; 17
     eda:	18 f4       	brcc	.+6      	; 0xee2 <timer2Init+0x2a>
     edc:	66 23       	and	r22, r22
     ede:	31 f0       	breq	.+12     	; 0xeec <timer2Init+0x34>
     ee0:	14 c0       	rjmp	.+40     	; 0xf0a <timer2Init+0x52>
     ee2:	60 32       	cpi	r22, 0x20	; 32
     ee4:	59 f0       	breq	.+22     	; 0xefc <timer2Init+0x44>
     ee6:	60 33       	cpi	r22, 0x30	; 48
     ee8:	81 f4       	brne	.+32     	; 0xf0a <timer2Init+0x52>
     eea:	0c c0       	rjmp	.+24     	; 0xf04 <timer2Init+0x4c>
	case  T2_OC2_DIS:
	{
	TCCR2 &= 0xCF;
     eec:	85 b5       	in	r24, 0x25	; 37
     eee:	8f 7c       	andi	r24, 0xCF	; 207
     ef0:	85 bd       	out	0x25, r24	; 37
		break;
     ef2:	0b c0       	rjmp	.+22     	; 0xf0a <timer2Init+0x52>
	}
	case T2_OC2_TOGGLE:
	{
		TCCR2 |=T2_OC2_TOGGLE;
     ef4:	85 b5       	in	r24, 0x25	; 37
     ef6:	80 61       	ori	r24, 0x10	; 16
     ef8:	85 bd       	out	0x25, r24	; 37
		break;
     efa:	07 c0       	rjmp	.+14     	; 0xf0a <timer2Init+0x52>
	}
	case  T2_OC2_CLEAR:
	{
	TCCR2 |= T2_OC2_CLEAR;
     efc:	85 b5       	in	r24, 0x25	; 37
     efe:	80 62       	ori	r24, 0x20	; 32
     f00:	85 bd       	out	0x25, r24	; 37

		break;
     f02:	03 c0       	rjmp	.+6      	; 0xf0a <timer2Init+0x52>
	}
	case T2_OC2_SET:
	{
		TCCR2 |=T2_OC2_SET;
     f04:	85 b5       	in	r24, 0x25	; 37
     f06:	80 63       	ori	r24, 0x30	; 48
     f08:	85 bd       	out	0x25, r24	; 37
		break;
	}

}
OCR2  =u8_outputCompare;
     f0a:	03 bd       	out	0x23, r16	; 35
switch(en_interruptMask){
     f0c:	80 e4       	ldi	r24, 0x40	; 64
     f0e:	c8 16       	cp	r12, r24
     f10:	61 f0       	breq	.+24     	; 0xf2a <timer2Init+0x72>
     f12:	80 e8       	ldi	r24, 0x80	; 128
     f14:	c8 16       	cp	r12, r24
     f16:	91 f0       	breq	.+36     	; 0xf3c <timer2Init+0x84>
     f18:	cc 20       	and	r12, r12
     f1a:	d9 f4       	brne	.+54     	; 0xf52 <timer2Init+0x9a>
case  T2_POLLING:
pooling_2=0;
     f1c:	10 92 81 00 	sts	0x0081, r1
G_interrupt_Disable();
     f20:	0e 94 30 02 	call	0x460	; 0x460 <G_interrupt_Disable>
TIMSK &= T2_POLLING;
     f24:	89 b7       	in	r24, 0x39	; 57
     f26:	19 be       	out	0x39, r1	; 57
break;
     f28:	14 c0       	rjmp	.+40     	; 0xf52 <timer2Init+0x9a>
case T2_INTERRUPT_NORMAL :
{
	pooling_2=1;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	80 93 81 00 	sts	0x0081, r24
G_interrupt_Enable();
     f30:	0e 94 20 02 	call	0x440	; 0x440 <G_interrupt_Enable>
TIMSK |= T2_INTERRUPT_NORMAL;
     f34:	89 b7       	in	r24, 0x39	; 57
     f36:	80 64       	ori	r24, 0x40	; 64
     f38:	89 bf       	out	0x39, r24	; 57
break;
     f3a:	0b c0       	rjmp	.+22     	; 0xf52 <timer2Init+0x9a>
}
case T2_INTERRUPT_CMP:
{
	pooling_2=1;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	80 93 81 00 	sts	0x0081, r24
G_interrupt_Enable();
     f42:	0e 94 20 02 	call	0x440	; 0x440 <G_interrupt_Enable>
//SET_BIT(SREG,7);
TIMSK |=T2_INTERRUPT_NORMAL;
     f46:	89 b7       	in	r24, 0x39	; 57
     f48:	80 64       	ori	r24, 0x40	; 64
     f4a:	89 bf       	out	0x39, r24	; 57
TIMSK |=T2_INTERRUPT_CMP;
     f4c:	89 b7       	in	r24, 0x39	; 57
     f4e:	80 68       	ori	r24, 0x80	; 128
     f50:	89 bf       	out	0x39, r24	; 57

}



}
     f52:	0f 91       	pop	r16
     f54:	cf 90       	pop	r12
     f56:	08 95       	ret

00000f58 <timer2DelayMs>:
		Prescalercounst=1;
		break;

		}*/
void timer2DelayMs(uint16_t u16_delay_in_ms)
{
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	00 d0       	rcall	.+0      	; 0xf62 <timer2DelayMs+0xa>
     f62:	00 d0       	rcall	.+0      	; 0xf64 <timer2DelayMs+0xc>
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	8c 01       	movw	r16, r24
	volatile uint16_t count=0;
     f6a:	1a 82       	std	Y+2, r1	; 0x02
     f6c:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t Prescalercounst=0,set_timer2=0;
     f6e:	1b 82       	std	Y+3, r1	; 0x03
     f70:	1c 82       	std	Y+4, r1	; 0x04
	switch(Prescaler_Value2)
     f72:	80 91 80 00 	lds	r24, 0x0080
     f76:	84 30       	cpi	r24, 0x04	; 4
     f78:	f9 f0       	breq	.+62     	; 0xfb8 <timer2DelayMs+0x60>
     f7a:	85 30       	cpi	r24, 0x05	; 5
     f7c:	38 f4       	brcc	.+14     	; 0xf8c <timer2DelayMs+0x34>
     f7e:	82 30       	cpi	r24, 0x02	; 2
     f80:	89 f0       	breq	.+34     	; 0xfa4 <timer2DelayMs+0x4c>
     f82:	83 30       	cpi	r24, 0x03	; 3
     f84:	a0 f4       	brcc	.+40     	; 0xfae <timer2DelayMs+0x56>
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	51 f5       	brne	.+84     	; 0xfde <timer2DelayMs+0x86>
     f8a:	07 c0       	rjmp	.+14     	; 0xf9a <timer2DelayMs+0x42>
     f8c:	86 30       	cpi	r24, 0x06	; 6
     f8e:	f1 f0       	breq	.+60     	; 0xfcc <timer2DelayMs+0x74>
     f90:	86 30       	cpi	r24, 0x06	; 6
     f92:	b8 f0       	brcs	.+46     	; 0xfc2 <timer2DelayMs+0x6a>
     f94:	87 30       	cpi	r24, 0x07	; 7
     f96:	19 f5       	brne	.+70     	; 0xfde <timer2DelayMs+0x86>
     f98:	1e c0       	rjmp	.+60     	; 0xfd6 <timer2DelayMs+0x7e>
	{
		case T2_PRESCALER_NO:{
		Prescalercounst=58;
     f9a:	8a e3       	ldi	r24, 0x3A	; 58
     f9c:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=10;
     f9e:	8a e0       	ldi	r24, 0x0A	; 10
     fa0:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     fa2:	1d c0       	rjmp	.+58     	; 0xfde <timer2DelayMs+0x86>
		case T2_PRESCALER_8:
		{Prescalercounst=8;
     fa4:	88 e0       	ldi	r24, 0x08	; 8
     fa6:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=12;
     fa8:	8c e0       	ldi	r24, 0x0C	; 12
     faa:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     fac:	18 c0       	rjmp	.+48     	; 0xfde <timer2DelayMs+0x86>
		case T2_PRESCALER_32:
		{Prescalercounst=2;
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=8;
     fb2:	88 e0       	ldi	r24, 0x08	; 8
     fb4:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     fb6:	13 c0       	rjmp	.+38     	; 0xfde <timer2DelayMs+0x86>
		case T2_PRESCALER_64:
		{Prescalercounst=1;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=6;
     fbc:	86 e0       	ldi	r24, 0x06	; 6
     fbe:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     fc0:	0e c0       	rjmp	.+28     	; 0xfde <timer2DelayMs+0x86>
		case T2_PRESCALER_128:
		{Prescalercounst=1;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=131;
     fc6:	83 e8       	ldi	r24, 0x83	; 131
     fc8:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     fca:	09 c0       	rjmp	.+18     	; 0xfde <timer2DelayMs+0x86>
		case T2_PRESCALER_256:
		{Prescalercounst=1;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=194;
     fd0:	82 ec       	ldi	r24, 0xC2	; 194
     fd2:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     fd4:	04 c0       	rjmp	.+8      	; 0xfde <timer2DelayMs+0x86>
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=240;
     fda:	80 ef       	ldi	r24, 0xF0	; 240
     fdc:	8c 83       	std	Y+4, r24	; 0x04
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
     fde:	1a 82       	std	Y+2, r1	; 0x02
     fe0:	19 82       	std	Y+1, r1	; 0x01
     fe2:	2b 81       	ldd	r18, Y+3	; 0x03
     fe4:	49 81       	ldd	r20, Y+1	; 0x01
     fe6:	5a 81       	ldd	r21, Y+2	; 0x02
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	02 9f       	mul	r16, r18
     fec:	c0 01       	movw	r24, r0
     fee:	03 9f       	mul	r16, r19
     ff0:	90 0d       	add	r25, r0
     ff2:	12 9f       	mul	r17, r18
     ff4:	90 0d       	add	r25, r0
     ff6:	11 24       	eor	r1, r1
     ff8:	48 17       	cp	r20, r24
     ffa:	59 07       	cpc	r21, r25
     ffc:	e0 f4       	brcc	.+56     	; 0x1036 <timer2DelayMs+0xde>
	{
		timer2Set(set_timer2);//10 for no prescaler....12 for 8 prescaler .... 8 for 32 prescaler ....6 for prescaler 64 .....
     ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    1000:	0e 94 4b 07 	call	0xe96	; 0xe96 <timer2Set>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR & 0x40)==0);
    1004:	08 b6       	in	r0, 0x38	; 56
    1006:	06 fe       	sbrs	r0, 6
    1008:	fd cf       	rjmp	.-6      	; 0x1004 <timer2DelayMs+0xac>
		TIFR |=0x40;
    100a:	88 b7       	in	r24, 0x38	; 56
    100c:	80 64       	ori	r24, 0x40	; 64
    100e:	88 bf       	out	0x38, r24	; 56
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
		set_timer2=240;
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	9a 81       	ldd	r25, Y+2	; 0x02
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	9a 83       	std	Y+2, r25	; 0x02
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	2b 81       	ldd	r18, Y+3	; 0x03
    101c:	49 81       	ldd	r20, Y+1	; 0x01
    101e:	5a 81       	ldd	r21, Y+2	; 0x02
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	02 9f       	mul	r16, r18
    1024:	c0 01       	movw	r24, r0
    1026:	03 9f       	mul	r16, r19
    1028:	90 0d       	add	r25, r0
    102a:	12 9f       	mul	r17, r18
    102c:	90 0d       	add	r25, r0
    102e:	11 24       	eor	r1, r1
    1030:	48 17       	cp	r20, r24
    1032:	59 07       	cpc	r21, r25
    1034:	20 f3       	brcs	.-56     	; 0xffe <timer2DelayMs+0xa6>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR & 0x40)==0);
		TIFR |=0x40;

	}
}
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	08 95       	ret

00001048 <timer2DelayUs>:

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
    1048:	cf 92       	push	r12
    104a:	df 92       	push	r13
    104c:	ef 92       	push	r14
    104e:	ff 92       	push	r15
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	00 d0       	rcall	.+0      	; 0x1056 <timer2DelayUs+0xe>
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	6b 01       	movw	r12, r22
    105c:	7c 01       	movw	r14, r24
	volatile uint16_t count =0;
    105e:	1a 82       	std	Y+2, r1	; 0x02
    1060:	19 82       	std	Y+1, r1	; 0x01
	for (count=0;count<u16_delay_in_us;count++)
    1062:	1a 82       	std	Y+2, r1	; 0x02
    1064:	19 82       	std	Y+1, r1	; 0x01
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
    106a:	a0 e0       	ldi	r26, 0x00	; 0
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	8c 15       	cp	r24, r12
    1070:	9d 05       	cpc	r25, r13
    1072:	ae 05       	cpc	r26, r14
    1074:	bf 05       	cpc	r27, r15
    1076:	b8 f4       	brcc	.+46     	; 0x10a6 <timer2DelayUs+0x5e>
	{
		timer2Set(254);//254 for no prescaler
    1078:	8e ef       	ldi	r24, 0xFE	; 254
    107a:	0e 94 4b 07 	call	0xe96	; 0xe96 <timer2Set>
		while ((TIFR & 0x40)==0);
    107e:	08 b6       	in	r0, 0x38	; 56
    1080:	06 fe       	sbrs	r0, 6
    1082:	fd cf       	rjmp	.-6      	; 0x107e <timer2DelayUs+0x36>
		TIFR |=0x40;
    1084:	88 b7       	in	r24, 0x38	; 56
    1086:	80 64       	ori	r24, 0x40	; 64
    1088:	88 bf       	out	0x38, r24	; 56

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
	volatile uint16_t count =0;
	for (count=0;count<u16_delay_in_us;count++)
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	01 96       	adiw	r24, 0x01	; 1
    1090:	9a 83       	std	Y+2, r25	; 0x02
    1092:	89 83       	std	Y+1, r24	; 0x01
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	9a 81       	ldd	r25, Y+2	; 0x02
    1098:	a0 e0       	ldi	r26, 0x00	; 0
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	8c 15       	cp	r24, r12
    109e:	9d 05       	cpc	r25, r13
    10a0:	ae 05       	cpc	r26, r14
    10a2:	bf 05       	cpc	r27, r15
    10a4:	48 f3       	brcs	.-46     	; 0x1078 <timer2DelayUs+0x30>
		while ((TIFR & 0x40)==0);
		TIFR |=0x40;

	}

}
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	ff 90       	pop	r15
    10b0:	ef 90       	pop	r14
    10b2:	df 90       	pop	r13
    10b4:	cf 90       	pop	r12
    10b6:	08 95       	ret

000010b8 <timer2SwPWM>:
/**
* Description:
* @param dutyCycle
*/
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	cf 93       	push	r28
    10c2:	c8 2f       	mov	r28, r24

float dutyReal;
pwm_time_on=MAX_HOLD;
    10c4:	8f ef       	ldi	r24, 0xFF	; 255
    10c6:	80 93 7e 00 	sts	0x007E, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
    10ca:	60 91 7e 00 	lds	r22, 0x007E
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 c5 09 	call	0x138a	; 0x138a <__floatunsisf>
    10d8:	6b 01       	movw	r12, r22
    10da:	7c 01       	movw	r14, r24
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{

float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
    10dc:	6c 2f       	mov	r22, r28
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 c5 09 	call	0x138a	; 0x138a <__floatunsisf>
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	48 ec       	ldi	r20, 0xC8	; 200
    10ee:	52 e4       	ldi	r21, 0x42	; 66
    10f0:	0e 94 31 09 	call	0x1262	; 0x1262 <__divsf3>
    10f4:	9b 01       	movw	r18, r22
    10f6:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
    10f8:	c7 01       	movw	r24, r14
    10fa:	b6 01       	movw	r22, r12
    10fc:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__mulsf3>
    1100:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
    1104:	60 93 7e 00 	sts	0x007E, r22
switch(pooling_2)
    1108:	80 91 81 00 	lds	r24, 0x0081
    110c:	88 23       	and	r24, r24
    110e:	19 f0       	breq	.+6      	; 0x1116 <timer2SwPWM+0x5e>
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	29 f5       	brne	.+74     	; 0x115e <timer2SwPWM+0xa6>
    1114:	1f c0       	rjmp	.+62     	; 0x1154 <timer2SwPWM+0x9c>
{
	case 0:
	{
		timer2Start();
    1116:	0e 94 4f 07 	call	0xe9e	; 0xe9e <timer2Start>
		timer2Set(pwm_time_on);
    111a:	80 91 7e 00 	lds	r24, 0x007E
    111e:	0e 94 4b 07 	call	0xe96	; 0xe96 <timer2Set>
		//freq 50KHZ is the Max frequency possible
		while ((TIFR&0x04)==0);
    1122:	08 b6       	in	r0, 0x38	; 56
    1124:	02 fe       	sbrs	r0, 2
    1126:	fd cf       	rjmp	.-6      	; 0x1122 <timer2SwPWM+0x6a>
		TIFR |=0x04;
    1128:	88 b7       	in	r24, 0x38	; 56
    112a:	84 60       	ori	r24, 0x04	; 4
    112c:	88 bf       	out	0x38, r24	; 56
		PORTC_DATA |=0xff;
    112e:	85 b3       	in	r24, 0x15	; 21
    1130:	8f ef       	ldi	r24, 0xFF	; 255
    1132:	85 bb       	out	0x15, r24	; 21
		timer2Start();
    1134:	0e 94 4f 07 	call	0xe9e	; 0xe9e <timer2Start>
		timer2Set(MAX_HOLD-pwm_time_on);
    1138:	80 91 7e 00 	lds	r24, 0x007E
    113c:	80 95       	com	r24
    113e:	0e 94 4b 07 	call	0xe96	; 0xe96 <timer2Set>
		//freq
		while ((TIFR & 0x04)==0);
    1142:	08 b6       	in	r0, 0x38	; 56
    1144:	02 fe       	sbrs	r0, 2
    1146:	fd cf       	rjmp	.-6      	; 0x1142 <timer2SwPWM+0x8a>
		TIFR |=0x04;
    1148:	88 b7       	in	r24, 0x38	; 56
    114a:	84 60       	ori	r24, 0x04	; 4
    114c:	88 bf       	out	0x38, r24	; 56
		PORTC_DATA &=0x00;
    114e:	85 b3       	in	r24, 0x15	; 21
    1150:	15 ba       	out	0x15, r1	; 21

		break;
    1152:	05 c0       	rjmp	.+10     	; 0x115e <timer2SwPWM+0xa6>
	}
	case 1:
	{
		timer2Start();
    1154:	0e 94 4f 07 	call	0xe9e	; 0xe9e <timer2Start>
		OCR2=pwm_time_on;
    1158:	80 91 7e 00 	lds	r24, 0x007E
    115c:	83 bd       	out	0x23, r24	; 35
	}

}


}
    115e:	cf 91       	pop	r28
    1160:	ff 90       	pop	r15
    1162:	ef 90       	pop	r14
    1164:	df 90       	pop	r13
    1166:	cf 90       	pop	r12
    1168:	08 95       	ret

0000116a <Timer2_interrupt_COMP_routine>:
void Timer2_interrupt_COMP_routine(void)
{



}
    116a:	08 95       	ret

0000116c <Timer2_interrupt_routine>:
void Timer2_interrupt_routine(void)
{


}
    116c:	08 95       	ret

0000116e <Uart_Init>:
uint8_t BufferRequested[Buffer_Size];
volatile uint8_t u8_index=0;
volatile uint8_t buf_is_full=0;
void Uart_Init(En_BAUD_Rate Baud_rate,En_Stop_config Stop_bits_num,
  EN_Parity parity_Bit,EN_Data_Size data_num_bits,EN_UartMode uart_mode)
{uint8_t Buffer=0;
    116e:	0f 93       	push	r16
switch (Baud_rate) {
    1170:	83 33       	cpi	r24, 0x33	; 51
    1172:	71 f0       	breq	.+28     	; 0x1190 <Uart_Init+0x22>
    1174:	84 33       	cpi	r24, 0x34	; 52
    1176:	18 f4       	brcc	.+6      	; 0x117e <Uart_Init+0x10>
    1178:	89 31       	cpi	r24, 0x19	; 25
    117a:	79 f4       	brne	.+30     	; 0x119a <Uart_Init+0x2c>
    117c:	0c c0       	rjmp	.+24     	; 0x1196 <Uart_Init+0x28>
    117e:	84 34       	cpi	r24, 0x44	; 68
    1180:	21 f0       	breq	.+8      	; 0x118a <Uart_Init+0x1c>
    1182:	87 36       	cpi	r24, 0x67	; 103
    1184:	51 f4       	brne	.+20     	; 0x119a <Uart_Init+0x2c>
  case Baud9600:
  UBRRL=Baud9600;
    1186:	89 b9       	out	0x09, r24	; 9
  break;
    1188:	08 c0       	rjmp	.+16     	; 0x119a <Uart_Init+0x2c>
  case Baud14400:
  UBRRL=Baud14400;
    118a:	84 e4       	ldi	r24, 0x44	; 68
    118c:	89 b9       	out	0x09, r24	; 9
  break;
    118e:	05 c0       	rjmp	.+10     	; 0x119a <Uart_Init+0x2c>
  case Baud19200:
  UBRRL=Baud19200;
    1190:	83 e3       	ldi	r24, 0x33	; 51
    1192:	89 b9       	out	0x09, r24	; 9
  break;
    1194:	02 c0       	rjmp	.+4      	; 0x119a <Uart_Init+0x2c>
  case Baud38400:
  UBRRL=Baud38400;
    1196:	89 e1       	ldi	r24, 0x19	; 25
    1198:	89 b9       	out	0x09, r24	; 9
  break;
}
switch (Stop_bits_num) {
    119a:	66 23       	and	r22, r22
    119c:	31 f0       	breq	.+12     	; 0x11aa <Uart_Init+0x3c>
    119e:	61 30       	cpi	r22, 0x01	; 1
    11a0:	11 f0       	breq	.+4      	; 0x11a6 <Uart_Init+0x38>
uint8_t BufferRequested[Buffer_Size];
volatile uint8_t u8_index=0;
volatile uint8_t buf_is_full=0;
void Uart_Init(En_BAUD_Rate Baud_rate,En_Stop_config Stop_bits_num,
  EN_Parity parity_Bit,EN_Data_Size data_num_bits,EN_UartMode uart_mode)
{uint8_t Buffer=0;
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	03 c0       	rjmp	.+6      	; 0x11ac <Uart_Init+0x3e>
  break;
}
case TwoStopBits:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,USBS);
    11a6:	88 e8       	ldi	r24, 0x88	; 136
  break;
    11a8:	01 c0       	rjmp	.+2      	; 0x11ac <Uart_Init+0x3e>
  break;
}
switch (Stop_bits_num) {
case OneStopBit:
{ SET_BIT(Buffer,URSEL);
  CLEAR_BIT(Buffer,USBS);
    11aa:	80 e8       	ldi	r24, 0x80	; 128
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,USBS);
  break;
}
}
switch (data_num_bits)
    11ac:	22 30       	cpi	r18, 0x02	; 2
    11ae:	a1 f0       	breq	.+40     	; 0x11d8 <Uart_Init+0x6a>
    11b0:	23 30       	cpi	r18, 0x03	; 3
    11b2:	28 f4       	brcc	.+10     	; 0x11be <Uart_Init+0x50>
    11b4:	22 23       	and	r18, r18
    11b6:	41 f0       	breq	.+16     	; 0x11c8 <Uart_Init+0x5a>
    11b8:	21 30       	cpi	r18, 0x01	; 1
    11ba:	b9 f4       	brne	.+46     	; 0x11ea <Uart_Init+0x7c>
    11bc:	09 c0       	rjmp	.+18     	; 0x11d0 <Uart_Init+0x62>
    11be:	23 30       	cpi	r18, 0x03	; 3
    11c0:	79 f0       	breq	.+30     	; 0x11e0 <Uart_Init+0x72>
    11c2:	24 30       	cpi	r18, 0x04	; 4
    11c4:	91 f4       	brne	.+36     	; 0x11ea <Uart_Init+0x7c>
    11c6:	0f c0       	rjmp	.+30     	; 0x11e6 <Uart_Init+0x78>
{
case FiveBits:
{
SET_BIT(Buffer,URSEL);
    11c8:	80 68       	ori	r24, 0x80	; 128
CLEAR_BIT(Buffer,UCSZ0);
CLEAR_BIT(Buffer,UCSZ1);
    11ca:	89 7f       	andi	r24, 0xF9	; 249
CLEAR_BIT(UCSRB,UCSZ2);
    11cc:	52 98       	cbi	0x0a, 2	; 10
break;
    11ce:	0d c0       	rjmp	.+26     	; 0x11ea <Uart_Init+0x7c>
}
case SexBits:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,UCSZ0);
    11d0:	82 68       	ori	r24, 0x82	; 130
  CLEAR_BIT(Buffer,UCSZ1);
    11d2:	8b 7f       	andi	r24, 0xFB	; 251
  CLEAR_BIT(UCSRB,UCSZ2);
    11d4:	52 98       	cbi	0x0a, 2	; 10
  break;
    11d6:	09 c0       	rjmp	.+18     	; 0x11ea <Uart_Init+0x7c>
}
case SevenBits:
{
  SET_BIT(Buffer,URSEL);
  CLEAR_BIT(Buffer,UCSZ0);
    11d8:	89 77       	andi	r24, 0x79	; 121
  SET_BIT(Buffer,UCSZ1);
    11da:	84 68       	ori	r24, 0x84	; 132
  CLEAR_BIT(UCSRB,UCSZ2);
    11dc:	52 98       	cbi	0x0a, 2	; 10
  break;
    11de:	05 c0       	rjmp	.+10     	; 0x11ea <Uart_Init+0x7c>
}
case EightBits:
{   SET_BIT(Buffer,URSEL);
    SET_BIT(Buffer,UCSZ0);
    SET_BIT(Buffer,UCSZ1);
    11e0:	86 68       	ori	r24, 0x86	; 134
    CLEAR_BIT(UCSRB,UCSZ2);
    11e2:	52 98       	cbi	0x0a, 2	; 10
break;
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <Uart_Init+0x7c>
}

case NineBits:
{   SET_BIT(Buffer,URSEL);
	SET_BIT(Buffer,UCSZ0);
	SET_BIT(Buffer,UCSZ1);
    11e6:	86 68       	ori	r24, 0x86	; 134
	SET_BIT(UCSRB,UCSZ2);
    11e8:	52 9a       	sbi	0x0a, 2	; 10
	break;
}

}

switch (uart_mode) {
    11ea:	00 23       	and	r16, r16
    11ec:	19 f0       	breq	.+6      	; 0x11f4 <Uart_Init+0x86>
    11ee:	01 30       	cpi	r16, 0x01	; 1
    11f0:	29 f4       	brne	.+10     	; 0x11fc <Uart_Init+0x8e>
    11f2:	03 c0       	rjmp	.+6      	; 0x11fa <Uart_Init+0x8c>
  case ASynchronous:
  {
  SET_BIT(Buffer,URSEL);
    11f4:	80 68       	ori	r24, 0x80	; 128
  CLEAR_BIT(Buffer,UMSEL);
    11f6:	8f 7b       	andi	r24, 0xBF	; 191
  break;
    11f8:	01 c0       	rjmp	.+2      	; 0x11fc <Uart_Init+0x8e>
  }
case Synchronous:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,UMSEL);
    11fa:	80 6c       	ori	r24, 0xC0	; 192
  break;
}
}
switch (parity_Bit) {
    11fc:	41 30       	cpi	r20, 0x01	; 1
    11fe:	41 f0       	breq	.+16     	; 0x1210 <Uart_Init+0xa2>
    1200:	41 30       	cpi	r20, 0x01	; 1
    1202:	18 f0       	brcs	.+6      	; 0x120a <Uart_Init+0x9c>
    1204:	42 30       	cpi	r20, 0x02	; 2
    1206:	41 f4       	brne	.+16     	; 0x1218 <Uart_Init+0xaa>
    1208:	06 c0       	rjmp	.+12     	; 0x1216 <Uart_Init+0xa8>
  case NoParity:
{
SET_BIT(Buffer,URSEL);
    120a:	80 68       	ori	r24, 0x80	; 128
CLEAR_BIT(Buffer,UPM0);
CLEAR_BIT(Buffer,UPM1);
    120c:	8f 7c       	andi	r24, 0xCF	; 207
  break;
    120e:	04 c0       	rjmp	.+8      	; 0x1218 <Uart_Init+0xaa>
}
case EvenParity:
{
SET_BIT(Buffer,URSEL);
CLEAR_BIT(Buffer,UPM0);
    1210:	8f 74       	andi	r24, 0x4F	; 79
SET_BIT(Buffer,UPM1);
    1212:	80 6a       	ori	r24, 0xA0	; 160
break;
    1214:	01 c0       	rjmp	.+2      	; 0x1218 <Uart_Init+0xaa>
}
case OddParity:
{
SET_BIT(Buffer,URSEL);
SET_BIT(Buffer,UPM1);
SET_BIT(Buffer,UPM0);
    1216:	80 6b       	ori	r24, 0xB0	; 176
}


}

UCSRC=Buffer;
    1218:	80 bd       	out	0x20, r24	; 32
SET_BIT(UCSRB,TXEN);/*TXEN*/
    121a:	53 9a       	sbi	0x0a, 3	; 10
SET_BIT(UCSRB,RXEN);/*RXEN*/
    121c:	54 9a       	sbi	0x0a, 4	; 10
}
    121e:	0f 91       	pop	r16
    1220:	08 95       	ret

00001222 <UartTransmitPooling>:
void UartTransmitPooling(uint8_t Data)
{
while( !( UCSRA & (1<<UDRE)));
    1222:	5d 9b       	sbis	0x0b, 5	; 11
    1224:	fe cf       	rjmp	.-4      	; 0x1222 <UartTransmitPooling>
UDR=Data;
    1226:	8c b9       	out	0x0c, r24	; 12
}
    1228:	08 95       	ret

0000122a <UartRecievePooling>:
uint8_t UartRecievePooling(void)
{
	uint8_t data=0;
while (!( UCSRA & (1 << RXC)));/* Wait until new data receive*/
    122a:	5f 9b       	sbis	0x0b, 7	; 11
    122c:	fe cf       	rjmp	.-4      	; 0x122a <UartRecievePooling>
data=UDR;
    122e:	8c b1       	in	r24, 0x0c	; 12
return data;									/* Get and return received data */
}
    1230:	08 95       	ret

00001232 <Enable_communication_interrupt>:


void Enable_communication_interrupt(void)
{
G_interrupt_Enable();
    1232:	0e 94 20 02 	call	0x440	; 0x440 <G_interrupt_Enable>
SET_BIT(UCSRB,RXCIE);
    1236:	57 9a       	sbi	0x0a, 7	; 10
SET_BIT(UCSRB,TXCIE);
    1238:	56 9a       	sbi	0x0a, 6	; 10
SET_BIT(SPCR,SPIE);
    123a:	6f 9a       	sbi	0x0d, 7	; 13
}
    123c:	08 95       	ret

0000123e <UartRecieveInterrupt>:
void UartRecieveInterrupt(void)
{/*
if(u8_index<Buffer_Size)
{
u8_Notification_RX=TRUE;
*/  u8_DATA=UDR;/*
    123e:	8c b1       	in	r24, 0x0c	; 12
    1240:	80 93 65 00 	sts	0x0065, r24
}
  else{
    u8_index=0;
      }
*/
}
    1244:	08 95       	ret

00001246 <UartTransmitInterrupt>:
 buf_is_full=1;
 u8_index=0;
     }
u8_Notification_TX=TRUE;
*/
UDR =u8_DATA;
    1246:	80 91 65 00 	lds	r24, 0x0065
    124a:	8c b9       	out	0x0c, r24	; 12
}
    124c:	08 95       	ret

0000124e <UartTransmitdataInt>:
void UartTransmitdataInt(uint8_t data_to_transmit)
{

	  u8_DATA=data_to_transmit;
    124e:	80 93 65 00 	sts	0x0065, r24

}
    1252:	08 95       	ret

00001254 <Uart_tryansmitfirstbyte>:

void Uart_tryansmitfirstbyte(uint8_t data)
{
UDR=data;
    1254:	8c b9       	out	0x0c, r24	; 12
}
    1256:	08 95       	ret

00001258 <Uart_recievefirstbyte>:
uint8_t Uart_recievefirstbyte(void)
{
uint8_t data=0;
data = UDR;
    1258:	8c b1       	in	r24, 0x0c	; 12
return data;
}
    125a:	08 95       	ret

0000125c <Uart_De_Init>:
void Uart_De_Init(void)
{
  CLEAR_BIT(UCSRB,TXEN);/*TXEN*/
    125c:	53 98       	cbi	0x0a, 3	; 10
  CLEAR_BIT(UCSRB,RXEN);/*RXEN*/
    125e:	54 98       	cbi	0x0a, 4	; 10

}
    1260:	08 95       	ret

00001262 <__divsf3>:
    1262:	0c d0       	rcall	.+24     	; 0x127c <__divsf3x>
    1264:	e6 c0       	rjmp	.+460    	; 0x1432 <__fp_round>
    1266:	de d0       	rcall	.+444    	; 0x1424 <__fp_pscB>
    1268:	40 f0       	brcs	.+16     	; 0x127a <__divsf3+0x18>
    126a:	d5 d0       	rcall	.+426    	; 0x1416 <__fp_pscA>
    126c:	30 f0       	brcs	.+12     	; 0x127a <__divsf3+0x18>
    126e:	21 f4       	brne	.+8      	; 0x1278 <__divsf3+0x16>
    1270:	5f 3f       	cpi	r21, 0xFF	; 255
    1272:	19 f0       	breq	.+6      	; 0x127a <__divsf3+0x18>
    1274:	c7 c0       	rjmp	.+398    	; 0x1404 <__fp_inf>
    1276:	51 11       	cpse	r21, r1
    1278:	10 c1       	rjmp	.+544    	; 0x149a <__fp_szero>
    127a:	ca c0       	rjmp	.+404    	; 0x1410 <__fp_nan>

0000127c <__divsf3x>:
    127c:	eb d0       	rcall	.+470    	; 0x1454 <__fp_split3>
    127e:	98 f3       	brcs	.-26     	; 0x1266 <__divsf3+0x4>

00001280 <__divsf3_pse>:
    1280:	99 23       	and	r25, r25
    1282:	c9 f3       	breq	.-14     	; 0x1276 <__divsf3+0x14>
    1284:	55 23       	and	r21, r21
    1286:	b1 f3       	breq	.-20     	; 0x1274 <__divsf3+0x12>
    1288:	95 1b       	sub	r25, r21
    128a:	55 0b       	sbc	r21, r21
    128c:	bb 27       	eor	r27, r27
    128e:	aa 27       	eor	r26, r26
    1290:	62 17       	cp	r22, r18
    1292:	73 07       	cpc	r23, r19
    1294:	84 07       	cpc	r24, r20
    1296:	38 f0       	brcs	.+14     	; 0x12a6 <__divsf3_pse+0x26>
    1298:	9f 5f       	subi	r25, 0xFF	; 255
    129a:	5f 4f       	sbci	r21, 0xFF	; 255
    129c:	22 0f       	add	r18, r18
    129e:	33 1f       	adc	r19, r19
    12a0:	44 1f       	adc	r20, r20
    12a2:	aa 1f       	adc	r26, r26
    12a4:	a9 f3       	breq	.-22     	; 0x1290 <__divsf3_pse+0x10>
    12a6:	33 d0       	rcall	.+102    	; 0x130e <__divsf3_pse+0x8e>
    12a8:	0e 2e       	mov	r0, r30
    12aa:	3a f0       	brmi	.+14     	; 0x12ba <__divsf3_pse+0x3a>
    12ac:	e0 e8       	ldi	r30, 0x80	; 128
    12ae:	30 d0       	rcall	.+96     	; 0x1310 <__divsf3_pse+0x90>
    12b0:	91 50       	subi	r25, 0x01	; 1
    12b2:	50 40       	sbci	r21, 0x00	; 0
    12b4:	e6 95       	lsr	r30
    12b6:	00 1c       	adc	r0, r0
    12b8:	ca f7       	brpl	.-14     	; 0x12ac <__divsf3_pse+0x2c>
    12ba:	29 d0       	rcall	.+82     	; 0x130e <__divsf3_pse+0x8e>
    12bc:	fe 2f       	mov	r31, r30
    12be:	27 d0       	rcall	.+78     	; 0x130e <__divsf3_pse+0x8e>
    12c0:	66 0f       	add	r22, r22
    12c2:	77 1f       	adc	r23, r23
    12c4:	88 1f       	adc	r24, r24
    12c6:	bb 1f       	adc	r27, r27
    12c8:	26 17       	cp	r18, r22
    12ca:	37 07       	cpc	r19, r23
    12cc:	48 07       	cpc	r20, r24
    12ce:	ab 07       	cpc	r26, r27
    12d0:	b0 e8       	ldi	r27, 0x80	; 128
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <__divsf3_pse+0x56>
    12d4:	bb 0b       	sbc	r27, r27
    12d6:	80 2d       	mov	r24, r0
    12d8:	bf 01       	movw	r22, r30
    12da:	ff 27       	eor	r31, r31
    12dc:	93 58       	subi	r25, 0x83	; 131
    12de:	5f 4f       	sbci	r21, 0xFF	; 255
    12e0:	2a f0       	brmi	.+10     	; 0x12ec <__divsf3_pse+0x6c>
    12e2:	9e 3f       	cpi	r25, 0xFE	; 254
    12e4:	51 05       	cpc	r21, r1
    12e6:	68 f0       	brcs	.+26     	; 0x1302 <__divsf3_pse+0x82>
    12e8:	8d c0       	rjmp	.+282    	; 0x1404 <__fp_inf>
    12ea:	d7 c0       	rjmp	.+430    	; 0x149a <__fp_szero>
    12ec:	5f 3f       	cpi	r21, 0xFF	; 255
    12ee:	ec f3       	brlt	.-6      	; 0x12ea <__divsf3_pse+0x6a>
    12f0:	98 3e       	cpi	r25, 0xE8	; 232
    12f2:	dc f3       	brlt	.-10     	; 0x12ea <__divsf3_pse+0x6a>
    12f4:	86 95       	lsr	r24
    12f6:	77 95       	ror	r23
    12f8:	67 95       	ror	r22
    12fa:	b7 95       	ror	r27
    12fc:	f7 95       	ror	r31
    12fe:	9f 5f       	subi	r25, 0xFF	; 255
    1300:	c9 f7       	brne	.-14     	; 0x12f4 <__divsf3_pse+0x74>
    1302:	88 0f       	add	r24, r24
    1304:	91 1d       	adc	r25, r1
    1306:	96 95       	lsr	r25
    1308:	87 95       	ror	r24
    130a:	97 f9       	bld	r25, 7
    130c:	08 95       	ret
    130e:	e1 e0       	ldi	r30, 0x01	; 1
    1310:	66 0f       	add	r22, r22
    1312:	77 1f       	adc	r23, r23
    1314:	88 1f       	adc	r24, r24
    1316:	bb 1f       	adc	r27, r27
    1318:	62 17       	cp	r22, r18
    131a:	73 07       	cpc	r23, r19
    131c:	84 07       	cpc	r24, r20
    131e:	ba 07       	cpc	r27, r26
    1320:	20 f0       	brcs	.+8      	; 0x132a <__divsf3_pse+0xaa>
    1322:	62 1b       	sub	r22, r18
    1324:	73 0b       	sbc	r23, r19
    1326:	84 0b       	sbc	r24, r20
    1328:	ba 0b       	sbc	r27, r26
    132a:	ee 1f       	adc	r30, r30
    132c:	88 f7       	brcc	.-30     	; 0x1310 <__divsf3_pse+0x90>
    132e:	e0 95       	com	r30
    1330:	08 95       	ret

00001332 <__fixunssfsi>:
    1332:	98 d0       	rcall	.+304    	; 0x1464 <__fp_splitA>
    1334:	88 f0       	brcs	.+34     	; 0x1358 <__fixunssfsi+0x26>
    1336:	9f 57       	subi	r25, 0x7F	; 127
    1338:	90 f0       	brcs	.+36     	; 0x135e <__fixunssfsi+0x2c>
    133a:	b9 2f       	mov	r27, r25
    133c:	99 27       	eor	r25, r25
    133e:	b7 51       	subi	r27, 0x17	; 23
    1340:	a0 f0       	brcs	.+40     	; 0x136a <__fixunssfsi+0x38>
    1342:	d1 f0       	breq	.+52     	; 0x1378 <__fixunssfsi+0x46>
    1344:	66 0f       	add	r22, r22
    1346:	77 1f       	adc	r23, r23
    1348:	88 1f       	adc	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	1a f0       	brmi	.+6      	; 0x1354 <__fixunssfsi+0x22>
    134e:	ba 95       	dec	r27
    1350:	c9 f7       	brne	.-14     	; 0x1344 <__fixunssfsi+0x12>
    1352:	12 c0       	rjmp	.+36     	; 0x1378 <__fixunssfsi+0x46>
    1354:	b1 30       	cpi	r27, 0x01	; 1
    1356:	81 f0       	breq	.+32     	; 0x1378 <__fixunssfsi+0x46>
    1358:	9f d0       	rcall	.+318    	; 0x1498 <__fp_zero>
    135a:	b1 e0       	ldi	r27, 0x01	; 1
    135c:	08 95       	ret
    135e:	9c c0       	rjmp	.+312    	; 0x1498 <__fp_zero>
    1360:	67 2f       	mov	r22, r23
    1362:	78 2f       	mov	r23, r24
    1364:	88 27       	eor	r24, r24
    1366:	b8 5f       	subi	r27, 0xF8	; 248
    1368:	39 f0       	breq	.+14     	; 0x1378 <__fixunssfsi+0x46>
    136a:	b9 3f       	cpi	r27, 0xF9	; 249
    136c:	cc f3       	brlt	.-14     	; 0x1360 <__fixunssfsi+0x2e>
    136e:	86 95       	lsr	r24
    1370:	77 95       	ror	r23
    1372:	67 95       	ror	r22
    1374:	b3 95       	inc	r27
    1376:	d9 f7       	brne	.-10     	; 0x136e <__fixunssfsi+0x3c>
    1378:	3e f4       	brtc	.+14     	; 0x1388 <__fixunssfsi+0x56>
    137a:	90 95       	com	r25
    137c:	80 95       	com	r24
    137e:	70 95       	com	r23
    1380:	61 95       	neg	r22
    1382:	7f 4f       	sbci	r23, 0xFF	; 255
    1384:	8f 4f       	sbci	r24, 0xFF	; 255
    1386:	9f 4f       	sbci	r25, 0xFF	; 255
    1388:	08 95       	ret

0000138a <__floatunsisf>:
    138a:	e8 94       	clt
    138c:	09 c0       	rjmp	.+18     	; 0x13a0 <__floatsisf+0x12>

0000138e <__floatsisf>:
    138e:	97 fb       	bst	r25, 7
    1390:	3e f4       	brtc	.+14     	; 0x13a0 <__floatsisf+0x12>
    1392:	90 95       	com	r25
    1394:	80 95       	com	r24
    1396:	70 95       	com	r23
    1398:	61 95       	neg	r22
    139a:	7f 4f       	sbci	r23, 0xFF	; 255
    139c:	8f 4f       	sbci	r24, 0xFF	; 255
    139e:	9f 4f       	sbci	r25, 0xFF	; 255
    13a0:	99 23       	and	r25, r25
    13a2:	a9 f0       	breq	.+42     	; 0x13ce <__floatsisf+0x40>
    13a4:	f9 2f       	mov	r31, r25
    13a6:	96 e9       	ldi	r25, 0x96	; 150
    13a8:	bb 27       	eor	r27, r27
    13aa:	93 95       	inc	r25
    13ac:	f6 95       	lsr	r31
    13ae:	87 95       	ror	r24
    13b0:	77 95       	ror	r23
    13b2:	67 95       	ror	r22
    13b4:	b7 95       	ror	r27
    13b6:	f1 11       	cpse	r31, r1
    13b8:	f8 cf       	rjmp	.-16     	; 0x13aa <__floatsisf+0x1c>
    13ba:	fa f4       	brpl	.+62     	; 0x13fa <__floatsisf+0x6c>
    13bc:	bb 0f       	add	r27, r27
    13be:	11 f4       	brne	.+4      	; 0x13c4 <__floatsisf+0x36>
    13c0:	60 ff       	sbrs	r22, 0
    13c2:	1b c0       	rjmp	.+54     	; 0x13fa <__floatsisf+0x6c>
    13c4:	6f 5f       	subi	r22, 0xFF	; 255
    13c6:	7f 4f       	sbci	r23, 0xFF	; 255
    13c8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ca:	9f 4f       	sbci	r25, 0xFF	; 255
    13cc:	16 c0       	rjmp	.+44     	; 0x13fa <__floatsisf+0x6c>
    13ce:	88 23       	and	r24, r24
    13d0:	11 f0       	breq	.+4      	; 0x13d6 <__floatsisf+0x48>
    13d2:	96 e9       	ldi	r25, 0x96	; 150
    13d4:	11 c0       	rjmp	.+34     	; 0x13f8 <__floatsisf+0x6a>
    13d6:	77 23       	and	r23, r23
    13d8:	21 f0       	breq	.+8      	; 0x13e2 <__floatsisf+0x54>
    13da:	9e e8       	ldi	r25, 0x8E	; 142
    13dc:	87 2f       	mov	r24, r23
    13de:	76 2f       	mov	r23, r22
    13e0:	05 c0       	rjmp	.+10     	; 0x13ec <__floatsisf+0x5e>
    13e2:	66 23       	and	r22, r22
    13e4:	71 f0       	breq	.+28     	; 0x1402 <__floatsisf+0x74>
    13e6:	96 e8       	ldi	r25, 0x86	; 134
    13e8:	86 2f       	mov	r24, r22
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	2a f0       	brmi	.+10     	; 0x13fa <__floatsisf+0x6c>
    13f0:	9a 95       	dec	r25
    13f2:	66 0f       	add	r22, r22
    13f4:	77 1f       	adc	r23, r23
    13f6:	88 1f       	adc	r24, r24
    13f8:	da f7       	brpl	.-10     	; 0x13f0 <__floatsisf+0x62>
    13fa:	88 0f       	add	r24, r24
    13fc:	96 95       	lsr	r25
    13fe:	87 95       	ror	r24
    1400:	97 f9       	bld	r25, 7
    1402:	08 95       	ret

00001404 <__fp_inf>:
    1404:	97 f9       	bld	r25, 7
    1406:	9f 67       	ori	r25, 0x7F	; 127
    1408:	80 e8       	ldi	r24, 0x80	; 128
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	08 95       	ret

00001410 <__fp_nan>:
    1410:	9f ef       	ldi	r25, 0xFF	; 255
    1412:	80 ec       	ldi	r24, 0xC0	; 192
    1414:	08 95       	ret

00001416 <__fp_pscA>:
    1416:	00 24       	eor	r0, r0
    1418:	0a 94       	dec	r0
    141a:	16 16       	cp	r1, r22
    141c:	17 06       	cpc	r1, r23
    141e:	18 06       	cpc	r1, r24
    1420:	09 06       	cpc	r0, r25
    1422:	08 95       	ret

00001424 <__fp_pscB>:
    1424:	00 24       	eor	r0, r0
    1426:	0a 94       	dec	r0
    1428:	12 16       	cp	r1, r18
    142a:	13 06       	cpc	r1, r19
    142c:	14 06       	cpc	r1, r20
    142e:	05 06       	cpc	r0, r21
    1430:	08 95       	ret

00001432 <__fp_round>:
    1432:	09 2e       	mov	r0, r25
    1434:	03 94       	inc	r0
    1436:	00 0c       	add	r0, r0
    1438:	11 f4       	brne	.+4      	; 0x143e <__fp_round+0xc>
    143a:	88 23       	and	r24, r24
    143c:	52 f0       	brmi	.+20     	; 0x1452 <__fp_round+0x20>
    143e:	bb 0f       	add	r27, r27
    1440:	40 f4       	brcc	.+16     	; 0x1452 <__fp_round+0x20>
    1442:	bf 2b       	or	r27, r31
    1444:	11 f4       	brne	.+4      	; 0x144a <__fp_round+0x18>
    1446:	60 ff       	sbrs	r22, 0
    1448:	04 c0       	rjmp	.+8      	; 0x1452 <__fp_round+0x20>
    144a:	6f 5f       	subi	r22, 0xFF	; 255
    144c:	7f 4f       	sbci	r23, 0xFF	; 255
    144e:	8f 4f       	sbci	r24, 0xFF	; 255
    1450:	9f 4f       	sbci	r25, 0xFF	; 255
    1452:	08 95       	ret

00001454 <__fp_split3>:
    1454:	57 fd       	sbrc	r21, 7
    1456:	90 58       	subi	r25, 0x80	; 128
    1458:	44 0f       	add	r20, r20
    145a:	55 1f       	adc	r21, r21
    145c:	59 f0       	breq	.+22     	; 0x1474 <__fp_splitA+0x10>
    145e:	5f 3f       	cpi	r21, 0xFF	; 255
    1460:	71 f0       	breq	.+28     	; 0x147e <__fp_splitA+0x1a>
    1462:	47 95       	ror	r20

00001464 <__fp_splitA>:
    1464:	88 0f       	add	r24, r24
    1466:	97 fb       	bst	r25, 7
    1468:	99 1f       	adc	r25, r25
    146a:	61 f0       	breq	.+24     	; 0x1484 <__fp_splitA+0x20>
    146c:	9f 3f       	cpi	r25, 0xFF	; 255
    146e:	79 f0       	breq	.+30     	; 0x148e <__fp_splitA+0x2a>
    1470:	87 95       	ror	r24
    1472:	08 95       	ret
    1474:	12 16       	cp	r1, r18
    1476:	13 06       	cpc	r1, r19
    1478:	14 06       	cpc	r1, r20
    147a:	55 1f       	adc	r21, r21
    147c:	f2 cf       	rjmp	.-28     	; 0x1462 <__fp_split3+0xe>
    147e:	46 95       	lsr	r20
    1480:	f1 df       	rcall	.-30     	; 0x1464 <__fp_splitA>
    1482:	08 c0       	rjmp	.+16     	; 0x1494 <__fp_splitA+0x30>
    1484:	16 16       	cp	r1, r22
    1486:	17 06       	cpc	r1, r23
    1488:	18 06       	cpc	r1, r24
    148a:	99 1f       	adc	r25, r25
    148c:	f1 cf       	rjmp	.-30     	; 0x1470 <__fp_splitA+0xc>
    148e:	86 95       	lsr	r24
    1490:	71 05       	cpc	r23, r1
    1492:	61 05       	cpc	r22, r1
    1494:	08 94       	sec
    1496:	08 95       	ret

00001498 <__fp_zero>:
    1498:	e8 94       	clt

0000149a <__fp_szero>:
    149a:	bb 27       	eor	r27, r27
    149c:	66 27       	eor	r22, r22
    149e:	77 27       	eor	r23, r23
    14a0:	cb 01       	movw	r24, r22
    14a2:	97 f9       	bld	r25, 7
    14a4:	08 95       	ret

000014a6 <__mulsf3>:
    14a6:	0b d0       	rcall	.+22     	; 0x14be <__mulsf3x>
    14a8:	c4 cf       	rjmp	.-120    	; 0x1432 <__fp_round>
    14aa:	b5 df       	rcall	.-150    	; 0x1416 <__fp_pscA>
    14ac:	28 f0       	brcs	.+10     	; 0x14b8 <__mulsf3+0x12>
    14ae:	ba df       	rcall	.-140    	; 0x1424 <__fp_pscB>
    14b0:	18 f0       	brcs	.+6      	; 0x14b8 <__mulsf3+0x12>
    14b2:	95 23       	and	r25, r21
    14b4:	09 f0       	breq	.+2      	; 0x14b8 <__mulsf3+0x12>
    14b6:	a6 cf       	rjmp	.-180    	; 0x1404 <__fp_inf>
    14b8:	ab cf       	rjmp	.-170    	; 0x1410 <__fp_nan>
    14ba:	11 24       	eor	r1, r1
    14bc:	ee cf       	rjmp	.-36     	; 0x149a <__fp_szero>

000014be <__mulsf3x>:
    14be:	ca df       	rcall	.-108    	; 0x1454 <__fp_split3>
    14c0:	a0 f3       	brcs	.-24     	; 0x14aa <__mulsf3+0x4>

000014c2 <__mulsf3_pse>:
    14c2:	95 9f       	mul	r25, r21
    14c4:	d1 f3       	breq	.-12     	; 0x14ba <__mulsf3+0x14>
    14c6:	95 0f       	add	r25, r21
    14c8:	50 e0       	ldi	r21, 0x00	; 0
    14ca:	55 1f       	adc	r21, r21
    14cc:	62 9f       	mul	r22, r18
    14ce:	f0 01       	movw	r30, r0
    14d0:	72 9f       	mul	r23, r18
    14d2:	bb 27       	eor	r27, r27
    14d4:	f0 0d       	add	r31, r0
    14d6:	b1 1d       	adc	r27, r1
    14d8:	63 9f       	mul	r22, r19
    14da:	aa 27       	eor	r26, r26
    14dc:	f0 0d       	add	r31, r0
    14de:	b1 1d       	adc	r27, r1
    14e0:	aa 1f       	adc	r26, r26
    14e2:	64 9f       	mul	r22, r20
    14e4:	66 27       	eor	r22, r22
    14e6:	b0 0d       	add	r27, r0
    14e8:	a1 1d       	adc	r26, r1
    14ea:	66 1f       	adc	r22, r22
    14ec:	82 9f       	mul	r24, r18
    14ee:	22 27       	eor	r18, r18
    14f0:	b0 0d       	add	r27, r0
    14f2:	a1 1d       	adc	r26, r1
    14f4:	62 1f       	adc	r22, r18
    14f6:	73 9f       	mul	r23, r19
    14f8:	b0 0d       	add	r27, r0
    14fa:	a1 1d       	adc	r26, r1
    14fc:	62 1f       	adc	r22, r18
    14fe:	83 9f       	mul	r24, r19
    1500:	a0 0d       	add	r26, r0
    1502:	61 1d       	adc	r22, r1
    1504:	22 1f       	adc	r18, r18
    1506:	74 9f       	mul	r23, r20
    1508:	33 27       	eor	r19, r19
    150a:	a0 0d       	add	r26, r0
    150c:	61 1d       	adc	r22, r1
    150e:	23 1f       	adc	r18, r19
    1510:	84 9f       	mul	r24, r20
    1512:	60 0d       	add	r22, r0
    1514:	21 1d       	adc	r18, r1
    1516:	82 2f       	mov	r24, r18
    1518:	76 2f       	mov	r23, r22
    151a:	6a 2f       	mov	r22, r26
    151c:	11 24       	eor	r1, r1
    151e:	9f 57       	subi	r25, 0x7F	; 127
    1520:	50 40       	sbci	r21, 0x00	; 0
    1522:	8a f0       	brmi	.+34     	; 0x1546 <__mulsf3_pse+0x84>
    1524:	e1 f0       	breq	.+56     	; 0x155e <__mulsf3_pse+0x9c>
    1526:	88 23       	and	r24, r24
    1528:	4a f0       	brmi	.+18     	; 0x153c <__mulsf3_pse+0x7a>
    152a:	ee 0f       	add	r30, r30
    152c:	ff 1f       	adc	r31, r31
    152e:	bb 1f       	adc	r27, r27
    1530:	66 1f       	adc	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	88 1f       	adc	r24, r24
    1536:	91 50       	subi	r25, 0x01	; 1
    1538:	50 40       	sbci	r21, 0x00	; 0
    153a:	a9 f7       	brne	.-22     	; 0x1526 <__mulsf3_pse+0x64>
    153c:	9e 3f       	cpi	r25, 0xFE	; 254
    153e:	51 05       	cpc	r21, r1
    1540:	70 f0       	brcs	.+28     	; 0x155e <__mulsf3_pse+0x9c>
    1542:	60 cf       	rjmp	.-320    	; 0x1404 <__fp_inf>
    1544:	aa cf       	rjmp	.-172    	; 0x149a <__fp_szero>
    1546:	5f 3f       	cpi	r21, 0xFF	; 255
    1548:	ec f3       	brlt	.-6      	; 0x1544 <__mulsf3_pse+0x82>
    154a:	98 3e       	cpi	r25, 0xE8	; 232
    154c:	dc f3       	brlt	.-10     	; 0x1544 <__mulsf3_pse+0x82>
    154e:	86 95       	lsr	r24
    1550:	77 95       	ror	r23
    1552:	67 95       	ror	r22
    1554:	b7 95       	ror	r27
    1556:	f7 95       	ror	r31
    1558:	e7 95       	ror	r30
    155a:	9f 5f       	subi	r25, 0xFF	; 255
    155c:	c1 f7       	brne	.-16     	; 0x154e <__mulsf3_pse+0x8c>
    155e:	fe 2b       	or	r31, r30
    1560:	88 0f       	add	r24, r24
    1562:	91 1d       	adc	r25, r1
    1564:	96 95       	lsr	r25
    1566:	87 95       	ror	r24
    1568:	97 f9       	bld	r25, 7
    156a:	08 95       	ret

0000156c <_exit>:
    156c:	f8 94       	cli

0000156e <__stop_program>:
    156e:	ff cf       	rjmp	.-2      	; 0x156e <__stop_program>
