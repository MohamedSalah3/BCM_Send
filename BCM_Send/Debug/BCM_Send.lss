
BCM_Send.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000013d2  00001466  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  00800072  00800072  00001478  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00001478  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00003044  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000035c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001db7  00000000  00000000  00003708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071a  00000000  00000000  000054bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006af  00000000  00000000  00005bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bcc  00000000  00000000  00006288  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001026  00000000  00000000  00006e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c93  00000000  00000000  00007e7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_1>
       8:	0c 94 81 01 	jmp	0x302	; 0x302 <__vector_2>
       c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__vector_3>
      10:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__vector_4>
      14:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_5>
      18:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_6>
      1c:	0c 94 44 02 	jmp	0x488	; 0x488 <__vector_7>
      20:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_8>
      24:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_9>
      28:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_10>
      2c:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__vector_11>
      30:	0c 94 07 03 	jmp	0x60e	; 0x60e <__vector_12>
      34:	0c 94 2e 03 	jmp	0x65c	; 0x65c <__vector_13>
      38:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__vector_14>
      3c:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__vector_15>
      40:	0c 94 a3 03 	jmp	0x746	; 0x746 <__vector_16>
      44:	0c 94 ca 03 	jmp	0x794	; 0x794 <__vector_17>
      48:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__vector_18>
      4c:	0c 94 18 04 	jmp	0x830	; 0x830 <__vector_19>
      50:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ed       	ldi	r30, 0xD2	; 210
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


#include <avr/io.h>

int main(void)
{
      92:	ff cf       	rjmp	.-2      	; 0x92 <main>

00000094 <gpioPortDirection>:
 * @param value: set the port value and takes the following values
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */

switch (u8_port)	
      94:	81 30       	cpi	r24, 0x01	; 1
      96:	49 f0       	breq	.+18     	; 0xaa <gpioPortDirection+0x16>
      98:	81 30       	cpi	r24, 0x01	; 1
      9a:	28 f0       	brcs	.+10     	; 0xa6 <gpioPortDirection+0x12>
      9c:	82 30       	cpi	r24, 0x02	; 2
      9e:	39 f0       	breq	.+14     	; 0xae <gpioPortDirection+0x1a>
      a0:	83 30       	cpi	r24, 0x03	; 3
      a2:	41 f4       	brne	.+16     	; 0xb4 <gpioPortDirection+0x20>
      a4:	06 c0       	rjmp	.+12     	; 0xb2 <gpioPortDirection+0x1e>
{	case GPIOA:
	PORTA_DIR = u8_direction;
      a6:	6a bb       	out	0x1a, r22	; 26
	break;
      a8:	08 95       	ret
	case GPIOB:
	PORTB_DIR = u8_direction;
      aa:	67 bb       	out	0x17, r22	; 23
	break;
      ac:	08 95       	ret
	case GPIOC:
	PORTC_DIR = u8_direction;
      ae:	64 bb       	out	0x14, r22	; 20
	break;
      b0:	08 95       	ret
	case GPIOD:
	PORTD_DIR = u8_direction;
      b2:	61 bb       	out	0x11, r22	; 17
      b4:	08 95       	ret

000000b6 <gpioPortWrite>:
}

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	
switch (u8_port)	
      b6:	81 30       	cpi	r24, 0x01	; 1
      b8:	49 f0       	breq	.+18     	; 0xcc <gpioPortWrite+0x16>
      ba:	81 30       	cpi	r24, 0x01	; 1
      bc:	28 f0       	brcs	.+10     	; 0xc8 <gpioPortWrite+0x12>
      be:	82 30       	cpi	r24, 0x02	; 2
      c0:	39 f0       	breq	.+14     	; 0xd0 <gpioPortWrite+0x1a>
      c2:	83 30       	cpi	r24, 0x03	; 3
      c4:	41 f4       	brne	.+16     	; 0xd6 <gpioPortWrite+0x20>
      c6:	06 c0       	rjmp	.+12     	; 0xd4 <gpioPortWrite+0x1e>
{	case GPIOA:
	PORTA_DATA = u8_value;
      c8:	6b bb       	out	0x1b, r22	; 27
	break;
      ca:	08 95       	ret
	case GPIOB:
	PORTB_DATA = u8_value;
      cc:	68 bb       	out	0x18, r22	; 24
	break;
      ce:	08 95       	ret
	case GPIOC:
	PORTC_DATA = u8_value;
      d0:	65 bb       	out	0x15, r22	; 21
	break;
      d2:	08 95       	ret
	case GPIOD:
	PORTD_DATA = u8_value;
      d4:	62 bb       	out	0x12, r22	; 18
      d6:	08 95       	ret

000000d8 <gpioPortToggle>:
	
}
void gpioPortToggle(uint8_t u8_port)
{
	
switch (u8_port)	
      d8:	81 30       	cpi	r24, 0x01	; 1
      da:	59 f0       	breq	.+22     	; 0xf2 <gpioPortToggle+0x1a>
      dc:	81 30       	cpi	r24, 0x01	; 1
      de:	28 f0       	brcs	.+10     	; 0xea <gpioPortToggle+0x12>
      e0:	82 30       	cpi	r24, 0x02	; 2
      e2:	59 f0       	breq	.+22     	; 0xfa <gpioPortToggle+0x22>
      e4:	83 30       	cpi	r24, 0x03	; 3
      e6:	81 f4       	brne	.+32     	; 0x108 <gpioPortToggle+0x30>
      e8:	0c c0       	rjmp	.+24     	; 0x102 <gpioPortToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^= HIGH;
      ea:	8b b3       	in	r24, 0x1b	; 27
      ec:	80 95       	com	r24
      ee:	8b bb       	out	0x1b, r24	; 27
	break;
      f0:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^= HIGH;
      f2:	88 b3       	in	r24, 0x18	; 24
      f4:	80 95       	com	r24
      f6:	88 bb       	out	0x18, r24	; 24
	break;
      f8:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^= HIGH;
      fa:	85 b3       	in	r24, 0x15	; 21
      fc:	80 95       	com	r24
      fe:	85 bb       	out	0x15, r24	; 21
	break;
     100:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^= HIGH;
     102:	82 b3       	in	r24, 0x12	; 18
     104:	80 95       	com	r24
     106:	82 bb       	out	0x12, r24	; 18
     108:	08 95       	ret

0000010a <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
	
switch (u8_port)	
     10a:	81 30       	cpi	r24, 0x01	; 1
     10c:	49 f0       	breq	.+18     	; 0x120 <gpioPortRead+0x16>
     10e:	81 30       	cpi	r24, 0x01	; 1
     110:	28 f0       	brcs	.+10     	; 0x11c <gpioPortRead+0x12>
     112:	82 30       	cpi	r24, 0x02	; 2
     114:	39 f0       	breq	.+14     	; 0x124 <gpioPortRead+0x1a>
     116:	83 30       	cpi	r24, 0x03	; 3
     118:	49 f4       	brne	.+18     	; 0x12c <gpioPortRead+0x22>
     11a:	06 c0       	rjmp	.+12     	; 0x128 <gpioPortRead+0x1e>
{	case GPIOA:
	U8_ret_Port_data=PORTA_DATA & HIGH;
     11c:	8b b3       	in	r24, 0x1b	; 27
	break;
     11e:	08 95       	ret
	case GPIOB:
	U8_ret_Port_data=PORTB_DATA & HIGH;
     120:	88 b3       	in	r24, 0x18	; 24
	break;
     122:	08 95       	ret
	case GPIOC:
	U8_ret_Port_data=PORTC_DATA & HIGH;
     124:	85 b3       	in	r24, 0x15	; 21
	break;
     126:	08 95       	ret
	case GPIOD:
	U8_ret_Port_data=PORTD_DATA & HIGH;
     128:	82 b3       	in	r24, 0x12	; 18
	break;
     12a:	08 95       	ret
	
}

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
     12c:	80 e0       	ldi	r24, 0x00	; 0
	break;
	
}

return 	U8_ret_Port_data;
}
     12e:	08 95       	ret

00000130 <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
switch(u8_direction){
     130:	44 23       	and	r20, r20
     132:	19 f0       	breq	.+6      	; 0x13a <gpioPinDirection+0xa>
     134:	4f 3f       	cpi	r20, 0xFF	; 255
     136:	d1 f5       	brne	.+116    	; 0x1ac <gpioPinDirection+0x7c>
     138:	21 c0       	rjmp	.+66     	; 0x17c <gpioPinDirection+0x4c>
case INPUT:
{
switch (u8_port)	
     13a:	81 30       	cpi	r24, 0x01	; 1
     13c:	69 f0       	breq	.+26     	; 0x158 <gpioPinDirection+0x28>
     13e:	81 30       	cpi	r24, 0x01	; 1
     140:	28 f0       	brcs	.+10     	; 0x14c <gpioPinDirection+0x1c>
     142:	82 30       	cpi	r24, 0x02	; 2
     144:	79 f0       	breq	.+30     	; 0x164 <gpioPinDirection+0x34>
     146:	83 30       	cpi	r24, 0x03	; 3
     148:	c9 f4       	brne	.+50     	; 0x17c <gpioPinDirection+0x4c>
     14a:	12 c0       	rjmp	.+36     	; 0x170 <gpioPinDirection+0x40>
{	case GPIOA:
	PORTA_DIR &=(~u8_pins);   // 0b01111111
     14c:	8a b3       	in	r24, 0x1a	; 26
     14e:	96 2f       	mov	r25, r22
     150:	90 95       	com	r25
     152:	89 23       	and	r24, r25
     154:	8a bb       	out	0x1a, r24	; 26
     156:	1b c0       	rjmp	.+54     	; 0x18e <gpioPinDirection+0x5e>
	break;
	case GPIOB:
	PORTB_DIR &=(~u8_pins);
     158:	87 b3       	in	r24, 0x17	; 23
     15a:	96 2f       	mov	r25, r22
     15c:	90 95       	com	r25
     15e:	89 23       	and	r24, r25
     160:	87 bb       	out	0x17, r24	; 23
     162:	19 c0       	rjmp	.+50     	; 0x196 <gpioPinDirection+0x66>
	break;
	case GPIOC:
	PORTC_DIR &=(~u8_pins);
     164:	84 b3       	in	r24, 0x14	; 20
     166:	96 2f       	mov	r25, r22
     168:	90 95       	com	r25
     16a:	89 23       	and	r24, r25
     16c:	84 bb       	out	0x14, r24	; 20
     16e:	17 c0       	rjmp	.+46     	; 0x19e <gpioPinDirection+0x6e>
	break;
	case GPIOD:
	PORTD_DIR &=(~u8_pins);
     170:	81 b3       	in	r24, 0x11	; 17
     172:	96 2f       	mov	r25, r22
     174:	90 95       	com	r25
     176:	89 23       	and	r24, r25
     178:	81 bb       	out	0x11, r24	; 17
     17a:	15 c0       	rjmp	.+42     	; 0x1a6 <gpioPinDirection+0x76>
	break;
	
}
}
case OUTPUT:{
switch (u8_port)	
     17c:	81 30       	cpi	r24, 0x01	; 1
     17e:	59 f0       	breq	.+22     	; 0x196 <gpioPinDirection+0x66>
     180:	81 30       	cpi	r24, 0x01	; 1
     182:	28 f0       	brcs	.+10     	; 0x18e <gpioPinDirection+0x5e>
     184:	82 30       	cpi	r24, 0x02	; 2
     186:	59 f0       	breq	.+22     	; 0x19e <gpioPinDirection+0x6e>
     188:	83 30       	cpi	r24, 0x03	; 3
     18a:	81 f4       	brne	.+32     	; 0x1ac <gpioPinDirection+0x7c>
     18c:	0c c0       	rjmp	.+24     	; 0x1a6 <gpioPinDirection+0x76>
{	case GPIOA:
	PORTA_DIR |=(u8_pins);
     18e:	8a b3       	in	r24, 0x1a	; 26
     190:	68 2b       	or	r22, r24
     192:	6a bb       	out	0x1a, r22	; 26
	break;
     194:	08 95       	ret
	case GPIOB:
	PORTB_DIR |=(u8_pins);
     196:	87 b3       	in	r24, 0x17	; 23
     198:	68 2b       	or	r22, r24
     19a:	67 bb       	out	0x17, r22	; 23
	break;
     19c:	08 95       	ret
	case GPIOC:
	PORTC_DIR |=(u8_pins);
     19e:	84 b3       	in	r24, 0x14	; 20
     1a0:	68 2b       	or	r22, r24
     1a2:	64 bb       	out	0x14, r22	; 20
	break;
     1a4:	08 95       	ret
	case GPIOD:
	PORTD_DIR |=(u8_pins);
     1a6:	81 b3       	in	r24, 0x11	; 17
     1a8:	68 2b       	or	r22, r24
     1aa:	61 bb       	out	0x11, r22	; 17
     1ac:	08 95       	ret

000001ae <gpioPinWrite>:
	
	
}

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{switch(u8_value){
     1ae:	44 23       	and	r20, r20
     1b0:	19 f0       	breq	.+6      	; 0x1b8 <gpioPinWrite+0xa>
     1b2:	4f 3f       	cpi	r20, 0xFF	; 255
     1b4:	b1 f5       	brne	.+108    	; 0x222 <gpioPinWrite+0x74>
     1b6:	1d c0       	rjmp	.+58     	; 0x1f2 <gpioPinWrite+0x44>
case LOW:
{
switch (u8_port)	
     1b8:	81 30       	cpi	r24, 0x01	; 1
     1ba:	61 f0       	breq	.+24     	; 0x1d4 <gpioPinWrite+0x26>
     1bc:	81 30       	cpi	r24, 0x01	; 1
     1be:	28 f0       	brcs	.+10     	; 0x1ca <gpioPinWrite+0x1c>
     1c0:	82 30       	cpi	r24, 0x02	; 2
     1c2:	69 f0       	breq	.+26     	; 0x1de <gpioPinWrite+0x30>
     1c4:	83 30       	cpi	r24, 0x03	; 3
     1c6:	69 f5       	brne	.+90     	; 0x222 <gpioPinWrite+0x74>
     1c8:	0f c0       	rjmp	.+30     	; 0x1e8 <gpioPinWrite+0x3a>
{	case GPIOA:
	PORTA_DATA &= ~(u8_pins);   // 0b01111111
     1ca:	8b b3       	in	r24, 0x1b	; 27
     1cc:	60 95       	com	r22
     1ce:	68 23       	and	r22, r24
     1d0:	6b bb       	out	0x1b, r22	; 27
	break;
     1d2:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(u8_pins);
     1d4:	88 b3       	in	r24, 0x18	; 24
     1d6:	60 95       	com	r22
     1d8:	68 23       	and	r22, r24
     1da:	68 bb       	out	0x18, r22	; 24
	break;
     1dc:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(u8_pins);
     1de:	85 b3       	in	r24, 0x15	; 21
     1e0:	60 95       	com	r22
     1e2:	68 23       	and	r22, r24
     1e4:	65 bb       	out	0x15, r22	; 21
	break;
     1e6:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(u8_pins);
     1e8:	82 b3       	in	r24, 0x12	; 18
     1ea:	60 95       	com	r22
     1ec:	68 23       	and	r22, r24
     1ee:	62 bb       	out	0x12, r22	; 18
	break;
     1f0:	08 95       	ret
	
}
break;
}
case HIGH:{
switch (u8_port)	
     1f2:	81 30       	cpi	r24, 0x01	; 1
     1f4:	59 f0       	breq	.+22     	; 0x20c <gpioPinWrite+0x5e>
     1f6:	81 30       	cpi	r24, 0x01	; 1
     1f8:	28 f0       	brcs	.+10     	; 0x204 <gpioPinWrite+0x56>
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	59 f0       	breq	.+22     	; 0x214 <gpioPinWrite+0x66>
     1fe:	83 30       	cpi	r24, 0x03	; 3
     200:	81 f4       	brne	.+32     	; 0x222 <gpioPinWrite+0x74>
     202:	0c c0       	rjmp	.+24     	; 0x21c <gpioPinWrite+0x6e>
{	case GPIOA:
	PORTA_DATA |=(u8_pins);
     204:	8b b3       	in	r24, 0x1b	; 27
     206:	68 2b       	or	r22, r24
     208:	6b bb       	out	0x1b, r22	; 27
	break;
     20a:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(u8_pins);
     20c:	88 b3       	in	r24, 0x18	; 24
     20e:	68 2b       	or	r22, r24
     210:	68 bb       	out	0x18, r22	; 24
	break;
     212:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(u8_pins);
     214:	85 b3       	in	r24, 0x15	; 21
     216:	68 2b       	or	r22, r24
     218:	65 bb       	out	0x15, r22	; 21
	break;
     21a:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(u8_pins);
     21c:	82 b3       	in	r24, 0x12	; 18
     21e:	68 2b       	or	r22, r24
     220:	62 bb       	out	0x12, r22	; 18
     222:	08 95       	ret

00000224 <gpioPinToggle>:
}

}
void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
switch (u8_port)	
     224:	81 30       	cpi	r24, 0x01	; 1
     226:	59 f0       	breq	.+22     	; 0x23e <gpioPinToggle+0x1a>
     228:	81 30       	cpi	r24, 0x01	; 1
     22a:	28 f0       	brcs	.+10     	; 0x236 <gpioPinToggle+0x12>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	59 f0       	breq	.+22     	; 0x246 <gpioPinToggle+0x22>
     230:	83 30       	cpi	r24, 0x03	; 3
     232:	81 f4       	brne	.+32     	; 0x254 <gpioPinToggle+0x30>
     234:	0c c0       	rjmp	.+24     	; 0x24e <gpioPinToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^=(u8_pins);
     236:	8b b3       	in	r24, 0x1b	; 27
     238:	68 27       	eor	r22, r24
     23a:	6b bb       	out	0x1b, r22	; 27
	break;
     23c:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^=(u8_pins);
     23e:	88 b3       	in	r24, 0x18	; 24
     240:	68 27       	eor	r22, r24
     242:	68 bb       	out	0x18, r22	; 24
	break;
     244:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^=(u8_pins);
     246:	85 b3       	in	r24, 0x15	; 21
     248:	68 27       	eor	r22, r24
     24a:	65 bb       	out	0x15, r22	; 21
	break;
     24c:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^=(u8_pins);
     24e:	82 b3       	in	r24, 0x12	; 18
     250:	68 27       	eor	r22, r24
     252:	62 bb       	out	0x12, r22	; 18
     254:	08 95       	ret

00000256 <gpioPinRead>:
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
switch (u8_port)	
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	51 f0       	breq	.+20     	; 0x26e <gpioPinRead+0x18>
     25a:	81 30       	cpi	r24, 0x01	; 1
     25c:	28 f0       	brcs	.+10     	; 0x268 <gpioPinRead+0x12>
     25e:	82 30       	cpi	r24, 0x02	; 2
     260:	49 f0       	breq	.+18     	; 0x274 <gpioPinRead+0x1e>
     262:	83 30       	cpi	r24, 0x03	; 3
     264:	69 f4       	brne	.+26     	; 0x280 <gpioPinRead+0x2a>
     266:	09 c0       	rjmp	.+18     	; 0x27a <gpioPinRead+0x24>
{	case GPIOA:
	U8_ret_BIT_data=(PORTA_PIN & u8_pin);
     268:	89 b3       	in	r24, 0x19	; 25
     26a:	68 23       	and	r22, r24
	break;
     26c:	0a c0       	rjmp	.+20     	; 0x282 <gpioPinRead+0x2c>
	case GPIOB:
	U8_ret_BIT_data=(PORTB_PIN & u8_pin);
     26e:	86 b3       	in	r24, 0x16	; 22
     270:	68 23       	and	r22, r24
	break;
     272:	07 c0       	rjmp	.+14     	; 0x282 <gpioPinRead+0x2c>
	case GPIOC:
	U8_ret_BIT_data=(PORTC_PIN & u8_pin);
     274:	83 b3       	in	r24, 0x13	; 19
     276:	68 23       	and	r22, r24
	break;
     278:	04 c0       	rjmp	.+8      	; 0x282 <gpioPinRead+0x2c>
	case GPIOD:
	U8_ret_BIT_data=(PORTD_PIN & u8_pin);
     27a:	80 b3       	in	r24, 0x10	; 16
     27c:	68 23       	and	r22, r24
	break;
     27e:	01 c0       	rjmp	.+2      	; 0x282 <gpioPinRead+0x2c>
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
     280:	60 e0       	ldi	r22, 0x00	; 0
}
	
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	66 23       	and	r22, r22
     286:	09 f4       	brne	.+2      	; 0x28a <gpioPinRead+0x34>
     288:	80 e0       	ldi	r24, 0x00	; 0
if(U8_ret_BIT_data > 0)
{
	U8_ret_BIT_data = 1;
}
return U8_ret_BIT_data;
     28a:	08 95       	ret

0000028c <G_interrupt_Enable>:
ptr_to_Fun SPM_RDY;

void G_interrupt_Enable(void)
{
//	sei();
 SREG |=(0x80);
     28c:	8f b7       	in	r24, 0x3f	; 63
     28e:	80 68       	ori	r24, 0x80	; 128
     290:	8f bf       	out	0x3f, r24	; 63
}
     292:	08 95       	ret

00000294 <EX_interrupt_enable2>:
void EX_interrupt_enable2(void)
{
gpioPinDirection(GPIOB,BIT2,LOW);
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	64 e0       	ldi	r22, 0x04	; 4
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	0e 94 98 00 	call	0x130	; 0x130 <gpioPinDirection>
SET_BIT(GICR,INT2);
     29e:	8b b7       	in	r24, 0x3b	; 59
     2a0:	80 62       	ori	r24, 0x20	; 32
     2a2:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCSR,6);
     2a4:	84 b7       	in	r24, 0x34	; 52
     2a6:	80 64       	ori	r24, 0x40	; 64
     2a8:	84 bf       	out	0x34, r24	; 52
}
     2aa:	08 95       	ret

000002ac <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     2ac:	8f b7       	in	r24, 0x3f	; 63
     2ae:	8f 77       	andi	r24, 0x7F	; 127
     2b0:	8f bf       	out	0x3f, r24	; 63
}
     2b2:	08 95       	ret

000002b4 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     2b4:	1f 92       	push	r1
     2b6:	0f 92       	push	r0
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	0f 92       	push	r0
     2bc:	11 24       	eor	r1, r1
     2be:	2f 93       	push	r18
     2c0:	3f 93       	push	r19
     2c2:	4f 93       	push	r20
     2c4:	5f 93       	push	r21
     2c6:	6f 93       	push	r22
     2c8:	7f 93       	push	r23
     2ca:	8f 93       	push	r24
     2cc:	9f 93       	push	r25
     2ce:	af 93       	push	r26
     2d0:	bf 93       	push	r27
     2d2:	ef 93       	push	r30
     2d4:	ff 93       	push	r31
  INT0_external_interrupt();
     2d6:	e0 91 90 00 	lds	r30, 0x0090
     2da:	f0 91 91 00 	lds	r31, 0x0091
     2de:	09 95       	icall
}
     2e0:	ff 91       	pop	r31
     2e2:	ef 91       	pop	r30
     2e4:	bf 91       	pop	r27
     2e6:	af 91       	pop	r26
     2e8:	9f 91       	pop	r25
     2ea:	8f 91       	pop	r24
     2ec:	7f 91       	pop	r23
     2ee:	6f 91       	pop	r22
     2f0:	5f 91       	pop	r21
     2f2:	4f 91       	pop	r20
     2f4:	3f 91       	pop	r19
     2f6:	2f 91       	pop	r18
     2f8:	0f 90       	pop	r0
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	0f 90       	pop	r0
     2fe:	1f 90       	pop	r1
     300:	18 95       	reti

00000302 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
     302:	1f 92       	push	r1
     304:	0f 92       	push	r0
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	0f 92       	push	r0
     30a:	11 24       	eor	r1, r1
     30c:	2f 93       	push	r18
     30e:	3f 93       	push	r19
     310:	4f 93       	push	r20
     312:	5f 93       	push	r21
     314:	6f 93       	push	r22
     316:	7f 93       	push	r23
     318:	8f 93       	push	r24
     31a:	9f 93       	push	r25
     31c:	af 93       	push	r26
     31e:	bf 93       	push	r27
     320:	ef 93       	push	r30
     322:	ff 93       	push	r31
  INT1_external_interrupt();
     324:	e0 91 96 00 	lds	r30, 0x0096
     328:	f0 91 97 00 	lds	r31, 0x0097
     32c:	09 95       	icall
}
     32e:	ff 91       	pop	r31
     330:	ef 91       	pop	r30
     332:	bf 91       	pop	r27
     334:	af 91       	pop	r26
     336:	9f 91       	pop	r25
     338:	8f 91       	pop	r24
     33a:	7f 91       	pop	r23
     33c:	6f 91       	pop	r22
     33e:	5f 91       	pop	r21
     340:	4f 91       	pop	r20
     342:	3f 91       	pop	r19
     344:	2f 91       	pop	r18
     346:	0f 90       	pop	r0
     348:	0f be       	out	0x3f, r0	; 63
     34a:	0f 90       	pop	r0
     34c:	1f 90       	pop	r1
     34e:	18 95       	reti

00000350 <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     350:	1f 92       	push	r1
     352:	0f 92       	push	r0
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	0f 92       	push	r0
     358:	11 24       	eor	r1, r1
     35a:	2f 93       	push	r18
     35c:	3f 93       	push	r19
     35e:	4f 93       	push	r20
     360:	5f 93       	push	r21
     362:	6f 93       	push	r22
     364:	7f 93       	push	r23
     366:	8f 93       	push	r24
     368:	9f 93       	push	r25
     36a:	af 93       	push	r26
     36c:	bf 93       	push	r27
     36e:	ef 93       	push	r30
     370:	ff 93       	push	r31
  INT2_external_interrupt();
     372:	e0 91 86 00 	lds	r30, 0x0086
     376:	f0 91 87 00 	lds	r31, 0x0087
     37a:	09 95       	icall
}
     37c:	ff 91       	pop	r31
     37e:	ef 91       	pop	r30
     380:	bf 91       	pop	r27
     382:	af 91       	pop	r26
     384:	9f 91       	pop	r25
     386:	8f 91       	pop	r24
     388:	7f 91       	pop	r23
     38a:	6f 91       	pop	r22
     38c:	5f 91       	pop	r21
     38e:	4f 91       	pop	r20
     390:	3f 91       	pop	r19
     392:	2f 91       	pop	r18
     394:	0f 90       	pop	r0
     396:	0f be       	out	0x3f, r0	; 63
     398:	0f 90       	pop	r0
     39a:	1f 90       	pop	r1
     39c:	18 95       	reti

0000039e <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     39e:	1f 92       	push	r1
     3a0:	0f 92       	push	r0
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	0f 92       	push	r0
     3a6:	11 24       	eor	r1, r1
     3a8:	2f 93       	push	r18
     3aa:	3f 93       	push	r19
     3ac:	4f 93       	push	r20
     3ae:	5f 93       	push	r21
     3b0:	6f 93       	push	r22
     3b2:	7f 93       	push	r23
     3b4:	8f 93       	push	r24
     3b6:	9f 93       	push	r25
     3b8:	af 93       	push	r26
     3ba:	bf 93       	push	r27
     3bc:	ef 93       	push	r30
     3be:	ff 93       	push	r31
TIMER2COMP();
     3c0:	e0 91 68 00 	lds	r30, 0x0068
     3c4:	f0 91 69 00 	lds	r31, 0x0069
     3c8:	09 95       	icall
}
     3ca:	ff 91       	pop	r31
     3cc:	ef 91       	pop	r30
     3ce:	bf 91       	pop	r27
     3d0:	af 91       	pop	r26
     3d2:	9f 91       	pop	r25
     3d4:	8f 91       	pop	r24
     3d6:	7f 91       	pop	r23
     3d8:	6f 91       	pop	r22
     3da:	5f 91       	pop	r21
     3dc:	4f 91       	pop	r20
     3de:	3f 91       	pop	r19
     3e0:	2f 91       	pop	r18
     3e2:	0f 90       	pop	r0
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	0f 90       	pop	r0
     3e8:	1f 90       	pop	r1
     3ea:	18 95       	reti

000003ec <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     3ec:	1f 92       	push	r1
     3ee:	0f 92       	push	r0
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	0f 92       	push	r0
     3f4:	11 24       	eor	r1, r1
     3f6:	2f 93       	push	r18
     3f8:	3f 93       	push	r19
     3fa:	4f 93       	push	r20
     3fc:	5f 93       	push	r21
     3fe:	6f 93       	push	r22
     400:	7f 93       	push	r23
     402:	8f 93       	push	r24
     404:	9f 93       	push	r25
     406:	af 93       	push	r26
     408:	bf 93       	push	r27
     40a:	ef 93       	push	r30
     40c:	ff 93       	push	r31
  TIMER2OVF();
     40e:	e0 91 66 00 	lds	r30, 0x0066
     412:	f0 91 67 00 	lds	r31, 0x0067
     416:	09 95       	icall
}
     418:	ff 91       	pop	r31
     41a:	ef 91       	pop	r30
     41c:	bf 91       	pop	r27
     41e:	af 91       	pop	r26
     420:	9f 91       	pop	r25
     422:	8f 91       	pop	r24
     424:	7f 91       	pop	r23
     426:	6f 91       	pop	r22
     428:	5f 91       	pop	r21
     42a:	4f 91       	pop	r20
     42c:	3f 91       	pop	r19
     42e:	2f 91       	pop	r18
     430:	0f 90       	pop	r0
     432:	0f be       	out	0x3f, r0	; 63
     434:	0f 90       	pop	r0
     436:	1f 90       	pop	r1
     438:	18 95       	reti

0000043a <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     43a:	1f 92       	push	r1
     43c:	0f 92       	push	r0
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	0f 92       	push	r0
     442:	11 24       	eor	r1, r1
     444:	2f 93       	push	r18
     446:	3f 93       	push	r19
     448:	4f 93       	push	r20
     44a:	5f 93       	push	r21
     44c:	6f 93       	push	r22
     44e:	7f 93       	push	r23
     450:	8f 93       	push	r24
     452:	9f 93       	push	r25
     454:	af 93       	push	r26
     456:	bf 93       	push	r27
     458:	ef 93       	push	r30
     45a:	ff 93       	push	r31
  TIMER1CAPT();
     45c:	e0 91 98 00 	lds	r30, 0x0098
     460:	f0 91 99 00 	lds	r31, 0x0099
     464:	09 95       	icall
}
     466:	ff 91       	pop	r31
     468:	ef 91       	pop	r30
     46a:	bf 91       	pop	r27
     46c:	af 91       	pop	r26
     46e:	9f 91       	pop	r25
     470:	8f 91       	pop	r24
     472:	7f 91       	pop	r23
     474:	6f 91       	pop	r22
     476:	5f 91       	pop	r21
     478:	4f 91       	pop	r20
     47a:	3f 91       	pop	r19
     47c:	2f 91       	pop	r18
     47e:	0f 90       	pop	r0
     480:	0f be       	out	0x3f, r0	; 63
     482:	0f 90       	pop	r0
     484:	1f 90       	pop	r1
     486:	18 95       	reti

00000488 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     488:	1f 92       	push	r1
     48a:	0f 92       	push	r0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	0f 92       	push	r0
     490:	11 24       	eor	r1, r1
     492:	2f 93       	push	r18
     494:	3f 93       	push	r19
     496:	4f 93       	push	r20
     498:	5f 93       	push	r21
     49a:	6f 93       	push	r22
     49c:	7f 93       	push	r23
     49e:	8f 93       	push	r24
     4a0:	9f 93       	push	r25
     4a2:	af 93       	push	r26
     4a4:	bf 93       	push	r27
     4a6:	ef 93       	push	r30
     4a8:	ff 93       	push	r31
TIMER1COMPA();
     4aa:	e0 91 84 00 	lds	r30, 0x0084
     4ae:	f0 91 85 00 	lds	r31, 0x0085
     4b2:	09 95       	icall
}
     4b4:	ff 91       	pop	r31
     4b6:	ef 91       	pop	r30
     4b8:	bf 91       	pop	r27
     4ba:	af 91       	pop	r26
     4bc:	9f 91       	pop	r25
     4be:	8f 91       	pop	r24
     4c0:	7f 91       	pop	r23
     4c2:	6f 91       	pop	r22
     4c4:	5f 91       	pop	r21
     4c6:	4f 91       	pop	r20
     4c8:	3f 91       	pop	r19
     4ca:	2f 91       	pop	r18
     4cc:	0f 90       	pop	r0
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	0f 90       	pop	r0
     4d2:	1f 90       	pop	r1
     4d4:	18 95       	reti

000004d6 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
     4d6:	1f 92       	push	r1
     4d8:	0f 92       	push	r0
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	0f 92       	push	r0
     4de:	11 24       	eor	r1, r1
     4e0:	2f 93       	push	r18
     4e2:	3f 93       	push	r19
     4e4:	4f 93       	push	r20
     4e6:	5f 93       	push	r21
     4e8:	6f 93       	push	r22
     4ea:	7f 93       	push	r23
     4ec:	8f 93       	push	r24
     4ee:	9f 93       	push	r25
     4f0:	af 93       	push	r26
     4f2:	bf 93       	push	r27
     4f4:	ef 93       	push	r30
     4f6:	ff 93       	push	r31
  TIMER1COMPB();
     4f8:	e0 91 82 00 	lds	r30, 0x0082
     4fc:	f0 91 83 00 	lds	r31, 0x0083
     500:	09 95       	icall
}
     502:	ff 91       	pop	r31
     504:	ef 91       	pop	r30
     506:	bf 91       	pop	r27
     508:	af 91       	pop	r26
     50a:	9f 91       	pop	r25
     50c:	8f 91       	pop	r24
     50e:	7f 91       	pop	r23
     510:	6f 91       	pop	r22
     512:	5f 91       	pop	r21
     514:	4f 91       	pop	r20
     516:	3f 91       	pop	r19
     518:	2f 91       	pop	r18
     51a:	0f 90       	pop	r0
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	0f 90       	pop	r0
     520:	1f 90       	pop	r1
     522:	18 95       	reti

00000524 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     524:	1f 92       	push	r1
     526:	0f 92       	push	r0
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	2f 93       	push	r18
     530:	3f 93       	push	r19
     532:	4f 93       	push	r20
     534:	5f 93       	push	r21
     536:	6f 93       	push	r22
     538:	7f 93       	push	r23
     53a:	8f 93       	push	r24
     53c:	9f 93       	push	r25
     53e:	af 93       	push	r26
     540:	bf 93       	push	r27
     542:	ef 93       	push	r30
     544:	ff 93       	push	r31
  TIMER1OVF();
     546:	e0 91 9a 00 	lds	r30, 0x009A
     54a:	f0 91 9b 00 	lds	r31, 0x009B
     54e:	09 95       	icall
}
     550:	ff 91       	pop	r31
     552:	ef 91       	pop	r30
     554:	bf 91       	pop	r27
     556:	af 91       	pop	r26
     558:	9f 91       	pop	r25
     55a:	8f 91       	pop	r24
     55c:	7f 91       	pop	r23
     55e:	6f 91       	pop	r22
     560:	5f 91       	pop	r21
     562:	4f 91       	pop	r20
     564:	3f 91       	pop	r19
     566:	2f 91       	pop	r18
     568:	0f 90       	pop	r0
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	0f 90       	pop	r0
     56e:	1f 90       	pop	r1
     570:	18 95       	reti

00000572 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     572:	1f 92       	push	r1
     574:	0f 92       	push	r0
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	0f 92       	push	r0
     57a:	11 24       	eor	r1, r1
     57c:	2f 93       	push	r18
     57e:	3f 93       	push	r19
     580:	4f 93       	push	r20
     582:	5f 93       	push	r21
     584:	6f 93       	push	r22
     586:	7f 93       	push	r23
     588:	8f 93       	push	r24
     58a:	9f 93       	push	r25
     58c:	af 93       	push	r26
     58e:	bf 93       	push	r27
     590:	ef 93       	push	r30
     592:	ff 93       	push	r31

  TIMER0COMP();
     594:	e0 91 64 00 	lds	r30, 0x0064
     598:	f0 91 65 00 	lds	r31, 0x0065
     59c:	09 95       	icall
}
     59e:	ff 91       	pop	r31
     5a0:	ef 91       	pop	r30
     5a2:	bf 91       	pop	r27
     5a4:	af 91       	pop	r26
     5a6:	9f 91       	pop	r25
     5a8:	8f 91       	pop	r24
     5aa:	7f 91       	pop	r23
     5ac:	6f 91       	pop	r22
     5ae:	5f 91       	pop	r21
     5b0:	4f 91       	pop	r20
     5b2:	3f 91       	pop	r19
     5b4:	2f 91       	pop	r18
     5b6:	0f 90       	pop	r0
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	0f 90       	pop	r0
     5bc:	1f 90       	pop	r1
     5be:	18 95       	reti

000005c0 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     5c0:	1f 92       	push	r1
     5c2:	0f 92       	push	r0
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	0f 92       	push	r0
     5c8:	11 24       	eor	r1, r1
     5ca:	2f 93       	push	r18
     5cc:	3f 93       	push	r19
     5ce:	4f 93       	push	r20
     5d0:	5f 93       	push	r21
     5d2:	6f 93       	push	r22
     5d4:	7f 93       	push	r23
     5d6:	8f 93       	push	r24
     5d8:	9f 93       	push	r25
     5da:	af 93       	push	r26
     5dc:	bf 93       	push	r27
     5de:	ef 93       	push	r30
     5e0:	ff 93       	push	r31

  TIMER0OVF_INT();
     5e2:	e0 91 88 00 	lds	r30, 0x0088
     5e6:	f0 91 89 00 	lds	r31, 0x0089
     5ea:	09 95       	icall
}
     5ec:	ff 91       	pop	r31
     5ee:	ef 91       	pop	r30
     5f0:	bf 91       	pop	r27
     5f2:	af 91       	pop	r26
     5f4:	9f 91       	pop	r25
     5f6:	8f 91       	pop	r24
     5f8:	7f 91       	pop	r23
     5fa:	6f 91       	pop	r22
     5fc:	5f 91       	pop	r21
     5fe:	4f 91       	pop	r20
     600:	3f 91       	pop	r19
     602:	2f 91       	pop	r18
     604:	0f 90       	pop	r0
     606:	0f be       	out	0x3f, r0	; 63
     608:	0f 90       	pop	r0
     60a:	1f 90       	pop	r1
     60c:	18 95       	reti

0000060e <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
     60e:	1f 92       	push	r1
     610:	0f 92       	push	r0
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	0f 92       	push	r0
     616:	11 24       	eor	r1, r1
     618:	2f 93       	push	r18
     61a:	3f 93       	push	r19
     61c:	4f 93       	push	r20
     61e:	5f 93       	push	r21
     620:	6f 93       	push	r22
     622:	7f 93       	push	r23
     624:	8f 93       	push	r24
     626:	9f 93       	push	r25
     628:	af 93       	push	r26
     62a:	bf 93       	push	r27
     62c:	ef 93       	push	r30
     62e:	ff 93       	push	r31
  SPI_STC();
     630:	e0 91 62 00 	lds	r30, 0x0062
     634:	f0 91 63 00 	lds	r31, 0x0063
     638:	09 95       	icall
}
     63a:	ff 91       	pop	r31
     63c:	ef 91       	pop	r30
     63e:	bf 91       	pop	r27
     640:	af 91       	pop	r26
     642:	9f 91       	pop	r25
     644:	8f 91       	pop	r24
     646:	7f 91       	pop	r23
     648:	6f 91       	pop	r22
     64a:	5f 91       	pop	r21
     64c:	4f 91       	pop	r20
     64e:	3f 91       	pop	r19
     650:	2f 91       	pop	r18
     652:	0f 90       	pop	r0
     654:	0f be       	out	0x3f, r0	; 63
     656:	0f 90       	pop	r0
     658:	1f 90       	pop	r1
     65a:	18 95       	reti

0000065c <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     65c:	1f 92       	push	r1
     65e:	0f 92       	push	r0
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	0f 92       	push	r0
     664:	11 24       	eor	r1, r1
     666:	2f 93       	push	r18
     668:	3f 93       	push	r19
     66a:	4f 93       	push	r20
     66c:	5f 93       	push	r21
     66e:	6f 93       	push	r22
     670:	7f 93       	push	r23
     672:	8f 93       	push	r24
     674:	9f 93       	push	r25
     676:	af 93       	push	r26
     678:	bf 93       	push	r27
     67a:	ef 93       	push	r30
     67c:	ff 93       	push	r31
  USART_RXC();
     67e:	e0 91 60 00 	lds	r30, 0x0060
     682:	f0 91 61 00 	lds	r31, 0x0061
     686:	09 95       	icall
}
     688:	ff 91       	pop	r31
     68a:	ef 91       	pop	r30
     68c:	bf 91       	pop	r27
     68e:	af 91       	pop	r26
     690:	9f 91       	pop	r25
     692:	8f 91       	pop	r24
     694:	7f 91       	pop	r23
     696:	6f 91       	pop	r22
     698:	5f 91       	pop	r21
     69a:	4f 91       	pop	r20
     69c:	3f 91       	pop	r19
     69e:	2f 91       	pop	r18
     6a0:	0f 90       	pop	r0
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	0f 90       	pop	r0
     6a6:	1f 90       	pop	r1
     6a8:	18 95       	reti

000006aa <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     6aa:	1f 92       	push	r1
     6ac:	0f 92       	push	r0
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	0f 92       	push	r0
     6b2:	11 24       	eor	r1, r1
     6b4:	2f 93       	push	r18
     6b6:	3f 93       	push	r19
     6b8:	4f 93       	push	r20
     6ba:	5f 93       	push	r21
     6bc:	6f 93       	push	r22
     6be:	7f 93       	push	r23
     6c0:	8f 93       	push	r24
     6c2:	9f 93       	push	r25
     6c4:	af 93       	push	r26
     6c6:	bf 93       	push	r27
     6c8:	ef 93       	push	r30
     6ca:	ff 93       	push	r31
  USART_UDRE();
     6cc:	e0 91 94 00 	lds	r30, 0x0094
     6d0:	f0 91 95 00 	lds	r31, 0x0095
     6d4:	09 95       	icall
}
     6d6:	ff 91       	pop	r31
     6d8:	ef 91       	pop	r30
     6da:	bf 91       	pop	r27
     6dc:	af 91       	pop	r26
     6de:	9f 91       	pop	r25
     6e0:	8f 91       	pop	r24
     6e2:	7f 91       	pop	r23
     6e4:	6f 91       	pop	r22
     6e6:	5f 91       	pop	r21
     6e8:	4f 91       	pop	r20
     6ea:	3f 91       	pop	r19
     6ec:	2f 91       	pop	r18
     6ee:	0f 90       	pop	r0
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	0f 90       	pop	r0
     6f4:	1f 90       	pop	r1
     6f6:	18 95       	reti

000006f8 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     6f8:	1f 92       	push	r1
     6fa:	0f 92       	push	r0
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	0f 92       	push	r0
     700:	11 24       	eor	r1, r1
     702:	2f 93       	push	r18
     704:	3f 93       	push	r19
     706:	4f 93       	push	r20
     708:	5f 93       	push	r21
     70a:	6f 93       	push	r22
     70c:	7f 93       	push	r23
     70e:	8f 93       	push	r24
     710:	9f 93       	push	r25
     712:	af 93       	push	r26
     714:	bf 93       	push	r27
     716:	ef 93       	push	r30
     718:	ff 93       	push	r31
  USART_TXC();
     71a:	e0 91 92 00 	lds	r30, 0x0092
     71e:	f0 91 93 00 	lds	r31, 0x0093
     722:	09 95       	icall
}
     724:	ff 91       	pop	r31
     726:	ef 91       	pop	r30
     728:	bf 91       	pop	r27
     72a:	af 91       	pop	r26
     72c:	9f 91       	pop	r25
     72e:	8f 91       	pop	r24
     730:	7f 91       	pop	r23
     732:	6f 91       	pop	r22
     734:	5f 91       	pop	r21
     736:	4f 91       	pop	r20
     738:	3f 91       	pop	r19
     73a:	2f 91       	pop	r18
     73c:	0f 90       	pop	r0
     73e:	0f be       	out	0x3f, r0	; 63
     740:	0f 90       	pop	r0
     742:	1f 90       	pop	r1
     744:	18 95       	reti

00000746 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
     750:	2f 93       	push	r18
     752:	3f 93       	push	r19
     754:	4f 93       	push	r20
     756:	5f 93       	push	r21
     758:	6f 93       	push	r22
     75a:	7f 93       	push	r23
     75c:	8f 93       	push	r24
     75e:	9f 93       	push	r25
     760:	af 93       	push	r26
     762:	bf 93       	push	r27
     764:	ef 93       	push	r30
     766:	ff 93       	push	r31
  ADC_INT();
     768:	e0 91 8c 00 	lds	r30, 0x008C
     76c:	f0 91 8d 00 	lds	r31, 0x008D
     770:	09 95       	icall
}
     772:	ff 91       	pop	r31
     774:	ef 91       	pop	r30
     776:	bf 91       	pop	r27
     778:	af 91       	pop	r26
     77a:	9f 91       	pop	r25
     77c:	8f 91       	pop	r24
     77e:	7f 91       	pop	r23
     780:	6f 91       	pop	r22
     782:	5f 91       	pop	r21
     784:	4f 91       	pop	r20
     786:	3f 91       	pop	r19
     788:	2f 91       	pop	r18
     78a:	0f 90       	pop	r0
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	0f 90       	pop	r0
     790:	1f 90       	pop	r1
     792:	18 95       	reti

00000794 <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
     794:	1f 92       	push	r1
     796:	0f 92       	push	r0
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	0f 92       	push	r0
     79c:	11 24       	eor	r1, r1
     79e:	2f 93       	push	r18
     7a0:	3f 93       	push	r19
     7a2:	4f 93       	push	r20
     7a4:	5f 93       	push	r21
     7a6:	6f 93       	push	r22
     7a8:	7f 93       	push	r23
     7aa:	8f 93       	push	r24
     7ac:	9f 93       	push	r25
     7ae:	af 93       	push	r26
     7b0:	bf 93       	push	r27
     7b2:	ef 93       	push	r30
     7b4:	ff 93       	push	r31
  EE_RDY();
     7b6:	e0 91 8e 00 	lds	r30, 0x008E
     7ba:	f0 91 8f 00 	lds	r31, 0x008F
     7be:	09 95       	icall
}
     7c0:	ff 91       	pop	r31
     7c2:	ef 91       	pop	r30
     7c4:	bf 91       	pop	r27
     7c6:	af 91       	pop	r26
     7c8:	9f 91       	pop	r25
     7ca:	8f 91       	pop	r24
     7cc:	7f 91       	pop	r23
     7ce:	6f 91       	pop	r22
     7d0:	5f 91       	pop	r21
     7d2:	4f 91       	pop	r20
     7d4:	3f 91       	pop	r19
     7d6:	2f 91       	pop	r18
     7d8:	0f 90       	pop	r0
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	0f 90       	pop	r0
     7de:	1f 90       	pop	r1
     7e0:	18 95       	reti

000007e2 <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
     7e2:	1f 92       	push	r1
     7e4:	0f 92       	push	r0
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	0f 92       	push	r0
     7ea:	11 24       	eor	r1, r1
     7ec:	2f 93       	push	r18
     7ee:	3f 93       	push	r19
     7f0:	4f 93       	push	r20
     7f2:	5f 93       	push	r21
     7f4:	6f 93       	push	r22
     7f6:	7f 93       	push	r23
     7f8:	8f 93       	push	r24
     7fa:	9f 93       	push	r25
     7fc:	af 93       	push	r26
     7fe:	bf 93       	push	r27
     800:	ef 93       	push	r30
     802:	ff 93       	push	r31
  ANA_COMP();
     804:	e0 91 8a 00 	lds	r30, 0x008A
     808:	f0 91 8b 00 	lds	r31, 0x008B
     80c:	09 95       	icall
}
     80e:	ff 91       	pop	r31
     810:	ef 91       	pop	r30
     812:	bf 91       	pop	r27
     814:	af 91       	pop	r26
     816:	9f 91       	pop	r25
     818:	8f 91       	pop	r24
     81a:	7f 91       	pop	r23
     81c:	6f 91       	pop	r22
     81e:	5f 91       	pop	r21
     820:	4f 91       	pop	r20
     822:	3f 91       	pop	r19
     824:	2f 91       	pop	r18
     826:	0f 90       	pop	r0
     828:	0f be       	out	0x3f, r0	; 63
     82a:	0f 90       	pop	r0
     82c:	1f 90       	pop	r1
     82e:	18 95       	reti

00000830 <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
     830:	1f 92       	push	r1
     832:	0f 92       	push	r0
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	0f 92       	push	r0
     838:	11 24       	eor	r1, r1
     83a:	2f 93       	push	r18
     83c:	3f 93       	push	r19
     83e:	4f 93       	push	r20
     840:	5f 93       	push	r21
     842:	6f 93       	push	r22
     844:	7f 93       	push	r23
     846:	8f 93       	push	r24
     848:	9f 93       	push	r25
     84a:	af 93       	push	r26
     84c:	bf 93       	push	r27
     84e:	ef 93       	push	r30
     850:	ff 93       	push	r31
  TWI_I2C();
     852:	e0 91 7e 00 	lds	r30, 0x007E
     856:	f0 91 7f 00 	lds	r31, 0x007F
     85a:	09 95       	icall
}
     85c:	ff 91       	pop	r31
     85e:	ef 91       	pop	r30
     860:	bf 91       	pop	r27
     862:	af 91       	pop	r26
     864:	9f 91       	pop	r25
     866:	8f 91       	pop	r24
     868:	7f 91       	pop	r23
     86a:	6f 91       	pop	r22
     86c:	5f 91       	pop	r21
     86e:	4f 91       	pop	r20
     870:	3f 91       	pop	r19
     872:	2f 91       	pop	r18
     874:	0f 90       	pop	r0
     876:	0f be       	out	0x3f, r0	; 63
     878:	0f 90       	pop	r0
     87a:	1f 90       	pop	r1
     87c:	18 95       	reti

0000087e <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
     87e:	1f 92       	push	r1
     880:	0f 92       	push	r0
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	0f 92       	push	r0
     886:	11 24       	eor	r1, r1
     888:	2f 93       	push	r18
     88a:	3f 93       	push	r19
     88c:	4f 93       	push	r20
     88e:	5f 93       	push	r21
     890:	6f 93       	push	r22
     892:	7f 93       	push	r23
     894:	8f 93       	push	r24
     896:	9f 93       	push	r25
     898:	af 93       	push	r26
     89a:	bf 93       	push	r27
     89c:	ef 93       	push	r30
     89e:	ff 93       	push	r31
  SPM_RDY();
     8a0:	e0 91 80 00 	lds	r30, 0x0080
     8a4:	f0 91 81 00 	lds	r31, 0x0081
     8a8:	09 95       	icall
}
     8aa:	ff 91       	pop	r31
     8ac:	ef 91       	pop	r30
     8ae:	bf 91       	pop	r27
     8b0:	af 91       	pop	r26
     8b2:	9f 91       	pop	r25
     8b4:	8f 91       	pop	r24
     8b6:	7f 91       	pop	r23
     8b8:	6f 91       	pop	r22
     8ba:	5f 91       	pop	r21
     8bc:	4f 91       	pop	r20
     8be:	3f 91       	pop	r19
     8c0:	2f 91       	pop	r18
     8c2:	0f 90       	pop	r0
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	0f 90       	pop	r0
     8c8:	1f 90       	pop	r1
     8ca:	18 95       	reti

000008cc <Led_Init>:
	LED_3

*/
void Led_Init(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     8cc:	81 30       	cpi	r24, 0x01	; 1
     8ce:	69 f0       	breq	.+26     	; 0x8ea <Led_Init+0x1e>
     8d0:	81 30       	cpi	r24, 0x01	; 1
     8d2:	28 f0       	brcs	.+10     	; 0x8de <Led_Init+0x12>
     8d4:	82 30       	cpi	r24, 0x02	; 2
     8d6:	79 f0       	breq	.+30     	; 0x8f6 <Led_Init+0x2a>
     8d8:	83 30       	cpi	r24, 0x03	; 3
     8da:	c1 f4       	brne	.+48     	; 0x90c <Led_Init+0x40>
     8dc:	12 c0       	rjmp	.+36     	; 0x902 <Led_Init+0x36>
{
case LED_0:
gpioPinDirection(LED_0_GPIO,LED_0_BIT,HIGH);
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	60 e1       	ldi	r22, 0x10	; 16
     8e2:	4f ef       	ldi	r20, 0xFF	; 255
     8e4:	0e 94 98 00 	call	0x130	; 0x130 <gpioPinDirection>
break;
     8e8:	08 95       	ret

case LED_1:
gpioPinDirection(LED_1_GPIO,LED_1_BIT,HIGH);
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	60 e2       	ldi	r22, 0x20	; 32
     8ee:	4f ef       	ldi	r20, 0xFF	; 255
     8f0:	0e 94 98 00 	call	0x130	; 0x130 <gpioPinDirection>
break;
     8f4:	08 95       	ret

case LED_2:
gpioPinDirection(LED_2_GPIO,LED_2_BIT,HIGH);
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	60 e4       	ldi	r22, 0x40	; 64
     8fa:	4f ef       	ldi	r20, 0xFF	; 255
     8fc:	0e 94 98 00 	call	0x130	; 0x130 <gpioPinDirection>
break;
     900:	08 95       	ret

case LED_3:
gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	60 e8       	ldi	r22, 0x80	; 128
     906:	4f ef       	ldi	r20, 0xFF	; 255
     908:	0e 94 98 00 	call	0x130	; 0x130 <gpioPinDirection>
     90c:	08 95       	ret

0000090e <Led_On>:
}


void Led_On(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     90e:	81 30       	cpi	r24, 0x01	; 1
     910:	69 f0       	breq	.+26     	; 0x92c <Led_On+0x1e>
     912:	81 30       	cpi	r24, 0x01	; 1
     914:	28 f0       	brcs	.+10     	; 0x920 <Led_On+0x12>
     916:	82 30       	cpi	r24, 0x02	; 2
     918:	79 f0       	breq	.+30     	; 0x938 <Led_On+0x2a>
     91a:	83 30       	cpi	r24, 0x03	; 3
     91c:	c1 f4       	brne	.+48     	; 0x94e <Led_On+0x40>
     91e:	12 c0       	rjmp	.+36     	; 0x944 <Led_On+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,HIGH);
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	60 e1       	ldi	r22, 0x10	; 16
     924:	4f ef       	ldi	r20, 0xFF	; 255
     926:	0e 94 d7 00 	call	0x1ae	; 0x1ae <gpioPinWrite>
break;
     92a:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,HIGH);
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	60 e2       	ldi	r22, 0x20	; 32
     930:	4f ef       	ldi	r20, 0xFF	; 255
     932:	0e 94 d7 00 	call	0x1ae	; 0x1ae <gpioPinWrite>
break;
     936:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,HIGH);
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	60 e4       	ldi	r22, 0x40	; 64
     93c:	4f ef       	ldi	r20, 0xFF	; 255
     93e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <gpioPinWrite>
break;
     942:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,HIGH);
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	60 e8       	ldi	r22, 0x80	; 128
     948:	4f ef       	ldi	r20, 0xFF	; 255
     94a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <gpioPinWrite>
     94e:	08 95       	ret

00000950 <Led_Off>:
}

void Led_Off(En_LedNumber_t en_led_id)
{

switch(en_led_id)
     950:	81 30       	cpi	r24, 0x01	; 1
     952:	69 f0       	breq	.+26     	; 0x96e <Led_Off+0x1e>
     954:	81 30       	cpi	r24, 0x01	; 1
     956:	28 f0       	brcs	.+10     	; 0x962 <Led_Off+0x12>
     958:	82 30       	cpi	r24, 0x02	; 2
     95a:	79 f0       	breq	.+30     	; 0x97a <Led_Off+0x2a>
     95c:	83 30       	cpi	r24, 0x03	; 3
     95e:	c1 f4       	brne	.+48     	; 0x990 <Led_Off+0x40>
     960:	12 c0       	rjmp	.+36     	; 0x986 <Led_Off+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,LOW);
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	60 e1       	ldi	r22, 0x10	; 16
     966:	40 e0       	ldi	r20, 0x00	; 0
     968:	0e 94 d7 00 	call	0x1ae	; 0x1ae <gpioPinWrite>
break;
     96c:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,LOW);
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	60 e2       	ldi	r22, 0x20	; 32
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	0e 94 d7 00 	call	0x1ae	; 0x1ae <gpioPinWrite>
break;
     978:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,LOW);
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	60 e4       	ldi	r22, 0x40	; 64
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	0e 94 d7 00 	call	0x1ae	; 0x1ae <gpioPinWrite>
break;
     984:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,LOW);
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	60 e8       	ldi	r22, 0x80	; 128
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <gpioPinWrite>
     990:	08 95       	ret

00000992 <Led_Toggle>:


}
void Led_Toggle(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     992:	81 30       	cpi	r24, 0x01	; 1
     994:	61 f0       	breq	.+24     	; 0x9ae <Led_Toggle+0x1c>
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	28 f0       	brcs	.+10     	; 0x9a4 <Led_Toggle+0x12>
     99a:	82 30       	cpi	r24, 0x02	; 2
     99c:	69 f0       	breq	.+26     	; 0x9b8 <Led_Toggle+0x26>
     99e:	83 30       	cpi	r24, 0x03	; 3
     9a0:	a1 f4       	brne	.+40     	; 0x9ca <Led_Toggle+0x38>
     9a2:	0f c0       	rjmp	.+30     	; 0x9c2 <Led_Toggle+0x30>
{
case LED_0:
gpioPinToggle(LED_0_GPIO,LED_0_BIT);
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	60 e1       	ldi	r22, 0x10	; 16
     9a8:	0e 94 12 01 	call	0x224	; 0x224 <gpioPinToggle>
break;
     9ac:	08 95       	ret

case LED_1:
gpioPinToggle(LED_1_GPIO,LED_1_BIT);
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	60 e2       	ldi	r22, 0x20	; 32
     9b2:	0e 94 12 01 	call	0x224	; 0x224 <gpioPinToggle>
break;
     9b6:	08 95       	ret

case LED_2:
gpioPinToggle(LED_2_GPIO,LED_2_BIT);
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	60 e4       	ldi	r22, 0x40	; 64
     9bc:	0e 94 12 01 	call	0x224	; 0x224 <gpioPinToggle>
break;
     9c0:	08 95       	ret

case LED_3:
gpioPinToggle(LED_3_GPIO,LED_3_BIT);
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	60 e8       	ldi	r22, 0x80	; 128
     9c6:	0e 94 12 01 	call	0x224	; 0x224 <gpioPinToggle>
     9ca:	08 95       	ret

000009cc <SPI_Init>:

volatile uint8_t data_sent;

extern ST_SPI_Configuration SPI_Config ;
void SPI_Init()
{
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
	 ST_SPI_Configuration *gConfig = & SPI_Config;

	/********************Enable SPI Interrupt ******************/

	//SPCR = SPCR | (SPI_INT_ENABLE<<SPIE);
	SPCR = gConfig->MASTER_SLAVE_MODE | gConfig->DATA_ORDER
     9d0:	ca e6       	ldi	r28, 0x6A	; 106
     9d2:	d0 e0       	ldi	r29, 0x00	; 0
     9d4:	90 91 70 00 	lds	r25, 0x0070
     9d8:	88 81       	ld	r24, Y
     9da:	89 2b       	or	r24, r25
     9dc:	9c 81       	ldd	r25, Y+4	; 0x04
     9de:	89 2b       	or	r24, r25
     9e0:	99 81       	ldd	r25, Y+1	; 0x01
     9e2:	89 2b       	or	r24, r25
     9e4:	9d 81       	ldd	r25, Y+5	; 0x05
     9e6:	89 2b       	or	r24, r25
     9e8:	8d b9       	out	0x0d, r24	; 13
			  | gConfig->OPERATING_LEVEL | gConfig->PRESCALAR
			 | gConfig->SAMPLING_EDGE;

	SPSR |= gConfig->DOUBLE_SPEED;
     9ea:	9e b1       	in	r25, 0x0e	; 14
     9ec:	8b 81       	ldd	r24, Y+3	; 0x03
     9ee:	89 2b       	or	r24, r25
     9f0:	8e b9       	out	0x0e, r24	; 14
			 gpioPinDirection(GPIOB, BIT4 | BIT5 | BIT7, OUTPUT);
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	60 eb       	ldi	r22, 0xB0	; 176
     9f6:	4f ef       	ldi	r20, 0xFF	; 255
     9f8:	0e 94 98 00 	call	0x130	; 0x130 <gpioPinDirection>
			 gpioPinDirection(GPIOB, BIT6, INPUT);
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	60 e4       	ldi	r22, 0x40	; 64
     a00:	40 e0       	ldi	r20, 0x00	; 0
     a02:	0e 94 98 00 	call	0x130	; 0x130 <gpioPinDirection>

		SPCR |=  gConfig->ENABLE;
     a06:	9d b1       	in	r25, 0x0d	; 13
     a08:	8a 81       	ldd	r24, Y+2	; 0x02
     a0a:	89 2b       	or	r24, r25
     a0c:	8d b9       	out	0x0d, r24	; 13



}
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	08 95       	ret

00000a14 <SPI_Transciever_INT>:
void SPI_Transciever_INT(void)
{
	SPDR=5;//data_sent;
     a14:	85 e0       	ldi	r24, 0x05	; 5
     a16:	8f b9       	out	0x0f, r24	; 15
}
     a18:	08 95       	ret

00000a1a <SPI_Send>:
void  SPI_Send(uint8_t u8_data)
{
     /* Start transmission */
     SPDR = u8_data;
     a1a:	8f b9       	out	0x0f, r24	; 15
    if (!(READBIT(SPCR,SPIE)))
     a1c:	6f 99       	sbic	0x0d, 7	; 13
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <SPI_Send+0xa>
    {
	 	/* Wait for transmission complete */
     while(!(SPSR & (1<<SPIF)));
     a20:	77 9b       	sbis	0x0e, 7	; 14
     a22:	fe cf       	rjmp	.-4      	; 0xa20 <SPI_Send+0x6>
     a24:	08 95       	ret

00000a26 <spi_INT_CALLED>:
		}
}


uint8_t spi_INT_CALLED(void){
	return SPDR;
     a26:	8f b1       	in	r24, 0x0f	; 15
}
     a28:	08 95       	ret

00000a2a <SPI_Receive>:

uint8_t  SPI_Receive(void)
{
	if (!(READBIT(SPCR,SPIE)))
     a2a:	6f 99       	sbic	0x0d, 7	; 13
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <SPI_Receive+0x8>
	{
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));
     a2e:	77 9b       	sbis	0x0e, 7	; 14
     a30:	fe cf       	rjmp	.-4      	; 0xa2e <SPI_Receive+0x4>
		//return SPDR ; // Received data
	}
	return SPDR;
     a32:	8f b1       	in	r24, 0x0f	; 15
}
     a34:	08 95       	ret

00000a36 <SPI_Checks_for_collision>:


 uint8_t SPI_Checks_for_collision(void)
{
	 return READBIT(SPSR, WCOL);
     a36:	8e b1       	in	r24, 0x0e	; 14
     a38:	82 95       	swap	r24
     a3a:	86 95       	lsr	r24
     a3c:	86 95       	lsr	r24
     a3e:	83 70       	andi	r24, 0x03	; 3
}
     a40:	81 70       	andi	r24, 0x01	; 1
     a42:	08 95       	ret

00000a44 <timer0Set>:
}

}
void timer0Set(uint8_t u8_value)
{
TCNT0 =	u8_value;
     a44:	82 bf       	out	0x32, r24	; 50
}
     a46:	08 95       	ret

00000a48 <timer0Read>:

uint8_t timer0Read(void)
{
	 return TCNT0;
     a48:	82 b7       	in	r24, 0x32	; 50
}
     a4a:	08 95       	ret

00000a4c <timer0Start>:
Depending on prescaler	x     X    X

*/
void timer0Start(void)
{
	 TCCR0 &= (0xF8);
     a4c:	83 b7       	in	r24, 0x33	; 51
     a4e:	88 7f       	andi	r24, 0xF8	; 248
     a50:	83 bf       	out	0x33, r24	; 51
	 TCCR0 |= Prescaler_Value;
     a52:	93 b7       	in	r25, 0x33	; 51
     a54:	80 91 78 00 	lds	r24, 0x0078
     a58:	89 2b       	or	r24, r25
     a5a:	83 bf       	out	0x33, r24	; 51
}
     a5c:	08 95       	ret

00000a5e <timer0Stop>:
						      0     0    0
*/
void timer0Stop(void)
 {

TCCR0 &= (0xF8);
     a5e:	83 b7       	in	r24, 0x33	; 51
     a60:	88 7f       	andi	r24, 0xF8	; 248
     a62:	83 bf       	out	0x33, r24	; 51

 }
     a64:	08 95       	ret

00000a66 <timer0Init>:
uint8_t Prescaler_Value2=0;
uint8_t u8g_T1_Prescaler=0;
volatile uint8_t pwm_time_on=0,flag=0;

void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal,uint8_t u8_initialValue, uint8_t u8_outputCompare,En_timer0Interrupt_t en_interruptMask)
{
     a66:	ef 92       	push	r14
     a68:	0f 93       	push	r16
if(en_prescal == T0_NO_CLOCK)
     a6a:	44 23       	and	r20, r20
     a6c:	19 f4       	brne	.+6      	; 0xa74 <timer0Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer0Stop();
     a6e:	0e 94 2f 05 	call	0xa5e	; 0xa5e <timer0Stop>
     a72:	48 c0       	rjmp	.+144    	; 0xb04 <timer0Init+0x9e>
}
else
{
TCCR0 |= en_mode|en_prescal;
     a74:	93 b7       	in	r25, 0x33	; 51
     a76:	89 2b       	or	r24, r25
     a78:	84 2b       	or	r24, r20
     a7a:	83 bf       	out	0x33, r24	; 51
Prescaler_Value=en_prescal;
     a7c:	40 93 78 00 	sts	0x0078, r20
TCNT0 = u8_initialValue;
     a80:	22 bf       	out	0x32, r18	; 50
switch(en_OC0){
     a82:	60 31       	cpi	r22, 0x10	; 16
     a84:	71 f0       	breq	.+28     	; 0xaa2 <timer0Init+0x3c>
     a86:	61 31       	cpi	r22, 0x11	; 17
     a88:	18 f4       	brcc	.+6      	; 0xa90 <timer0Init+0x2a>
     a8a:	66 23       	and	r22, r22
     a8c:	31 f0       	breq	.+12     	; 0xa9a <timer0Init+0x34>
     a8e:	14 c0       	rjmp	.+40     	; 0xab8 <timer0Init+0x52>
     a90:	60 32       	cpi	r22, 0x20	; 32
     a92:	59 f0       	breq	.+22     	; 0xaaa <timer0Init+0x44>
     a94:	60 33       	cpi	r22, 0x30	; 48
     a96:	81 f4       	brne	.+32     	; 0xab8 <timer0Init+0x52>
     a98:	0c c0       	rjmp	.+24     	; 0xab2 <timer0Init+0x4c>
	case  T0_OC0_DIS:
	{
	TCCR0 &= 0xCF;
     a9a:	83 b7       	in	r24, 0x33	; 51
     a9c:	8f 7c       	andi	r24, 0xCF	; 207
     a9e:	83 bf       	out	0x33, r24	; 51
		break;
     aa0:	0b c0       	rjmp	.+22     	; 0xab8 <timer0Init+0x52>
	}
	case T0_OC0_TOGGLE:
	{
		TCCR0|=T0_OC0_TOGGLE;
     aa2:	83 b7       	in	r24, 0x33	; 51
     aa4:	80 61       	ori	r24, 0x10	; 16
     aa6:	83 bf       	out	0x33, r24	; 51
		break;
     aa8:	07 c0       	rjmp	.+14     	; 0xab8 <timer0Init+0x52>
	}
	case  T0_OC0_CLEAR:
	{
	TCCR0 |= T0_OC0_CLEAR;
     aaa:	83 b7       	in	r24, 0x33	; 51
     aac:	80 62       	ori	r24, 0x20	; 32
     aae:	83 bf       	out	0x33, r24	; 51

		break;
     ab0:	03 c0       	rjmp	.+6      	; 0xab8 <timer0Init+0x52>
	}
	case T0_OC0_SET:
	{
		TCCR0 |=T0_OC0_SET;
     ab2:	83 b7       	in	r24, 0x33	; 51
     ab4:	80 63       	ori	r24, 0x30	; 48
     ab6:	83 bf       	out	0x33, r24	; 51
		break;
	}

}
OCR0  =u8_outputCompare;
     ab8:	0c bf       	out	0x3c, r16	; 60
switch(en_interruptMask){
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	e8 16       	cp	r14, r24
     abe:	69 f0       	breq	.+26     	; 0xada <timer0Init+0x74>
     ac0:	e8 16       	cp	r14, r24
     ac2:	20 f0       	brcs	.+8      	; 0xacc <timer0Init+0x66>
     ac4:	82 e0       	ldi	r24, 0x02	; 2
     ac6:	e8 16       	cp	r14, r24
     ac8:	e9 f4       	brne	.+58     	; 0xb04 <timer0Init+0x9e>
     aca:	10 c0       	rjmp	.+32     	; 0xaec <timer0Init+0x86>
case  T0_POLLING:{
pooling=0;
     acc:	10 92 77 00 	sts	0x0077, r1
G_interrupt_Disable();
     ad0:	0e 94 56 01 	call	0x2ac	; 0x2ac <G_interrupt_Disable>
TIMSK &= T0_POLLING;
     ad4:	89 b7       	in	r24, 0x39	; 57
     ad6:	19 be       	out	0x39, r1	; 57
break;
     ad8:	15 c0       	rjmp	.+42     	; 0xb04 <timer0Init+0x9e>
}
case T0_INTERRUPT_NORMAL :
{pooling=1;
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	80 93 77 00 	sts	0x0077, r24
G_interrupt_Enable();
     ae0:	0e 94 46 01 	call	0x28c	; 0x28c <G_interrupt_Enable>
TIMSK |= T0_INTERRUPT_NORMAL;
     ae4:	89 b7       	in	r24, 0x39	; 57
     ae6:	81 60       	ori	r24, 0x01	; 1
     ae8:	89 bf       	out	0x39, r24	; 57
break;
     aea:	0c c0       	rjmp	.+24     	; 0xb04 <timer0Init+0x9e>
}
case T0_INTERRUPT_CMP:
{pooling=1;
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	80 93 77 00 	sts	0x0077, r24
//G_interrupt_Enable();
SET_BIT(SREG,7);
     af2:	8f b7       	in	r24, 0x3f	; 63
     af4:	80 68       	ori	r24, 0x80	; 128
     af6:	8f bf       	out	0x3f, r24	; 63
TIMSK |= T0_INTERRUPT_NORMAL;
     af8:	89 b7       	in	r24, 0x39	; 57
     afa:	81 60       	ori	r24, 0x01	; 1
     afc:	89 bf       	out	0x39, r24	; 57
TIMSK |=T0_INTERRUPT_CMP;
     afe:	89 b7       	in	r24, 0x39	; 57
     b00:	82 60       	ori	r24, 0x02	; 2
     b02:	89 bf       	out	0x39, r24	; 57
}
}

}

}
     b04:	0f 91       	pop	r16
     b06:	ef 90       	pop	r14
     b08:	08 95       	ret

00000b0a <timer0DelayMs>:
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
     b0a:	ac 01       	movw	r20, r24
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	41 15       	cp	r20, r1
     b12:	51 05       	cpc	r21, r1
     b14:	61 05       	cpc	r22, r1
     b16:	71 05       	cpc	r23, r1
     b18:	89 f0       	breq	.+34     	; 0xb3c <timer0DelayMs+0x32>
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	dc 01       	movw	r26, r24
{
	while ((TIFR&0x01)==0);
     b20:	08 b6       	in	r0, 0x38	; 56
     b22:	00 fe       	sbrs	r0, 0
     b24:	fd cf       	rjmp	.-6      	; 0xb20 <timer0DelayMs+0x16>
	TIFR |=0x01;
     b26:	28 b7       	in	r18, 0x38	; 56
     b28:	21 60       	ori	r18, 0x01	; 1
     b2a:	28 bf       	out	0x38, r18	; 56
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	a1 1d       	adc	r26, r1
     b30:	b1 1d       	adc	r27, r1
     b32:	84 17       	cp	r24, r20
     b34:	95 07       	cpc	r25, r21
     b36:	a6 07       	cpc	r26, r22
     b38:	b7 07       	cpc	r27, r23
     b3a:	90 f3       	brcs	.-28     	; 0xb20 <timer0DelayMs+0x16>
     b3c:	08 95       	ret

00000b3e <timer0DelayUs>:
 at pooling _no prescaling
 240at TCNT0

 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
     b3e:	dc 01       	movw	r26, r24
     b40:	cb 01       	movw	r24, r22
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
     b42:	00 97       	sbiw	r24, 0x00	; 0
     b44:	a1 05       	cpc	r26, r1
     b46:	b1 05       	cpc	r27, r1
     b48:	31 f0       	breq	.+12     	; 0xb56 <timer0DelayUs+0x18>
	{
	timer0Set(240);
     b4a:	80 ef       	ldi	r24, 0xF0	; 240
     b4c:	0e 94 22 05 	call	0xa44	; 0xa44 <timer0Set>
	while(timer0Read()<=255);
     b50:	0e 94 24 05 	call	0xa48	; 0xa48 <timer0Read>
     b54:	fd cf       	rjmp	.-6      	; 0xb50 <timer0DelayUs+0x12>
	//while(u32_ovf_counter <= (8*u32_delay_in_us/1000));
	}
	TIFR |=(1<<TOV0);/*Clear the flag*/
     b56:	88 b7       	in	r24, 0x38	; 56
     b58:	81 60       	ori	r24, 0x01	; 1
     b5a:	88 bf       	out	0x38, r24	; 56
}/*1*/
     b5c:	08 95       	ret

00000b5e <timer0SwPWM>:
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
     b5e:	cf 92       	push	r12
     b60:	df 92       	push	r13
     b62:	ef 92       	push	r14
     b64:	ff 92       	push	r15
     b66:	cf 93       	push	r28
     b68:	c8 2f       	mov	r28, r24
float dutyReal;
pwm_time_on=MAX_HOLD;
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	80 93 73 00 	sts	0x0073, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
     b70:	60 91 73 00 	lds	r22, 0x0073
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__floatunsisf>
     b7e:	6b 01       	movw	r12, r22
     b80:	7c 01       	movw	r14, r24
}/*1*/
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
     b82:	6c 2f       	mov	r22, r28
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__floatunsisf>
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	48 ec       	ldi	r20, 0xC8	; 200
     b94:	52 e4       	ldi	r21, 0x42	; 66
     b96:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__divsf3>
     b9a:	9b 01       	movw	r18, r22
     b9c:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
     b9e:	c7 01       	movw	r24, r14
     ba0:	b6 01       	movw	r22, r12
     ba2:	0e 94 84 09 	call	0x1308	; 0x1308 <__mulsf3>
     ba6:	0e 94 ca 08 	call	0x1194	; 0x1194 <__fixunssfsi>
     baa:	60 93 73 00 	sts	0x0073, r22
switch(pooling)
     bae:	80 91 77 00 	lds	r24, 0x0077
     bb2:	88 23       	and	r24, r24
     bb4:	19 f0       	breq	.+6      	; 0xbbc <timer0SwPWM+0x5e>
     bb6:	81 30       	cpi	r24, 0x01	; 1
     bb8:	29 f5       	brne	.+74     	; 0xc04 <timer0SwPWM+0xa6>
     bba:	1f c0       	rjmp	.+62     	; 0xbfa <timer0SwPWM+0x9c>
{
	case 0:
	{
	timer0Start();
     bbc:	0e 94 26 05 	call	0xa4c	; 0xa4c <timer0Start>
	timer0Set(pwm_time_on);
     bc0:	80 91 73 00 	lds	r24, 0x0073
     bc4:	0e 94 22 05 	call	0xa44	; 0xa44 <timer0Set>
	//freq 50KHZ is the Max frequency possible
	while ((TIFR&0x01)==0);
     bc8:	08 b6       	in	r0, 0x38	; 56
     bca:	00 fe       	sbrs	r0, 0
     bcc:	fd cf       	rjmp	.-6      	; 0xbc8 <timer0SwPWM+0x6a>
	TIFR |=0x01;
     bce:	88 b7       	in	r24, 0x38	; 56
     bd0:	81 60       	ori	r24, 0x01	; 1
     bd2:	88 bf       	out	0x38, r24	; 56
	PORTC_DATA |=0xff;
     bd4:	85 b3       	in	r24, 0x15	; 21
     bd6:	8f ef       	ldi	r24, 0xFF	; 255
     bd8:	85 bb       	out	0x15, r24	; 21
	timer0Start();
     bda:	0e 94 26 05 	call	0xa4c	; 0xa4c <timer0Start>
	timer0Set(MAX_HOLD-pwm_time_on);
     bde:	80 91 73 00 	lds	r24, 0x0073
     be2:	80 95       	com	r24
     be4:	0e 94 22 05 	call	0xa44	; 0xa44 <timer0Set>
	//freq
	while ((TIFR & 0x01)==0);
     be8:	08 b6       	in	r0, 0x38	; 56
     bea:	00 fe       	sbrs	r0, 0
     bec:	fd cf       	rjmp	.-6      	; 0xbe8 <timer0SwPWM+0x8a>
	TIFR |=0x01;
     bee:	88 b7       	in	r24, 0x38	; 56
     bf0:	81 60       	ori	r24, 0x01	; 1
     bf2:	88 bf       	out	0x38, r24	; 56
	PORTC_DATA &=0x00;
     bf4:	85 b3       	in	r24, 0x15	; 21
     bf6:	15 ba       	out	0x15, r1	; 21

break;
     bf8:	05 c0       	rjmp	.+10     	; 0xc04 <timer0SwPWM+0xa6>
}
case 1:
{
timer0Start();
     bfa:	0e 94 26 05 	call	0xa4c	; 0xa4c <timer0Start>
OCR0=pwm_time_on;
     bfe:	80 91 73 00 	lds	r24, 0x0073
     c02:	8c bf       	out	0x3c, r24	; 60
break;
}

}

}
     c04:	cf 91       	pop	r28
     c06:	ff 90       	pop	r15
     c08:	ef 90       	pop	r14
     c0a:	df 90       	pop	r13
     c0c:	cf 90       	pop	r12
     c0e:	08 95       	ret

00000c10 <Timer_interrupt_COMP_routine>:



void Timer_interrupt_COMP_routine(void)
{
	PORTD_DATA ^=0xff;
     c10:	82 b3       	in	r24, 0x12	; 18
     c12:	80 95       	com	r24
     c14:	82 bb       	out	0x12, r24	; 18

}
     c16:	08 95       	ret

00000c18 <timer1Init>:
 */
void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC,
	En_timer1perscaler_t en_prescal,uint16_t u16_initialValue,
	uint16_t u16_outputCompareA,uint16_t u16_outputCompareB,
	 uint16_t u16_inputCapture,En_timer1Interrupt_t en_interruptMask)
 {
     c18:	af 92       	push	r10
     c1a:	ef 92       	push	r14
     c1c:	ff 92       	push	r15
     c1e:	0f 93       	push	r16
     c20:	1f 93       	push	r17
     c22:	d9 01       	movw	r26, r18
     c24:	2a 2d       	mov	r18, r10
	TCCR1 |= en_mode | en_OC;
     c26:	ee b5       	in	r30, 0x2e	; 46
     c28:	ff b5       	in	r31, 0x2f	; 47
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	86 2b       	or	r24, r22
     c2e:	97 2b       	or	r25, r23
     c30:	8e 2b       	or	r24, r30
     c32:	9f 2b       	or	r25, r31
     c34:	9f bd       	out	0x2f, r25	; 47
     c36:	8e bd       	out	0x2e, r24	; 46
	u8g_T1_Prescaler=en_prescal;
     c38:	40 93 74 00 	sts	0x0074, r20
	OCR1A =u16_outputCompareA;
     c3c:	1b bd       	out	0x2b, r17	; 43
     c3e:	0a bd       	out	0x2a, r16	; 42
	OCR1B =u16_outputCompareB;
     c40:	f9 bc       	out	0x29, r15	; 41
     c42:	e8 bc       	out	0x28, r14	; 40
	TCNT1=u16_initialValue;
     c44:	bd bd       	out	0x2d, r27	; 45
     c46:	ac bd       	out	0x2c, r26	; 44
	switch(en_interruptMask)
     c48:	28 30       	cpi	r18, 0x08	; 8
     c4a:	d1 f0       	breq	.+52     	; 0xc80 <timer1Init+0x68>
     c4c:	29 30       	cpi	r18, 0x09	; 9
     c4e:	28 f4       	brcc	.+10     	; 0xc5a <timer1Init+0x42>
     c50:	aa 20       	and	r10, r10
     c52:	51 f0       	breq	.+20     	; 0xc68 <timer1Init+0x50>
     c54:	24 30       	cpi	r18, 0x04	; 4
     c56:	f9 f4       	brne	.+62     	; 0xc96 <timer1Init+0x7e>
     c58:	0b c0       	rjmp	.+22     	; 0xc70 <timer1Init+0x58>
     c5a:	20 32       	cpi	r18, 0x20	; 32
     c5c:	a9 f0       	breq	.+42     	; 0xc88 <timer1Init+0x70>
     c5e:	2c 33       	cpi	r18, 0x3C	; 60
     c60:	b9 f0       	breq	.+46     	; 0xc90 <timer1Init+0x78>
     c62:	20 31       	cpi	r18, 0x10	; 16
     c64:	c1 f4       	brne	.+48     	; 0xc96 <timer1Init+0x7e>
     c66:	08 c0       	rjmp	.+16     	; 0xc78 <timer1Init+0x60>
	{
		case T1_POLLING:
		{
			TIMSK &=0xC3;
     c68:	89 b7       	in	r24, 0x39	; 57
     c6a:	83 7c       	andi	r24, 0xC3	; 195
     c6c:	89 bf       	out	0x39, r24	; 57
			/*	     OCIE0 ToIE0   ALL INTERRUPT T1    	OCIE0 ToIE0
			TIMSK &=  1     1        0 0 0 0 	           1     1
			All T1 Interrupts enable are cleared
			but other timers interrupt enable are not effected
			*/
		break;
     c6e:	13 c0       	rjmp	.+38     	; 0xc96 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_NORMAL:
		{
			TIMSK |=T1_INTERRUPT_NORMAL;
     c70:	89 b7       	in	r24, 0x39	; 57
     c72:	84 60       	ori	r24, 0x04	; 4
     c74:	89 bf       	out	0x39, r24	; 57
		break;
     c76:	0f c0       	rjmp	.+30     	; 0xc96 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_CMP_1A:
		{
			TIMSK |=T1_INTERRUPT_CMP_1A;
     c78:	89 b7       	in	r24, 0x39	; 57
     c7a:	80 61       	ori	r24, 0x10	; 16
     c7c:	89 bf       	out	0x39, r24	; 57
			break;
     c7e:	0b c0       	rjmp	.+22     	; 0xc96 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_CMP_1B:
		{
			TIMSK |=T1_INTERRUPT_CMP_1B;
     c80:	89 b7       	in	r24, 0x39	; 57
     c82:	88 60       	ori	r24, 0x08	; 8
     c84:	89 bf       	out	0x39, r24	; 57
			break;
     c86:	07 c0       	rjmp	.+14     	; 0xc96 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_ICAPTURE:
		{
			TIMSK |=T1_INTERRUPT_ICAPTURE;
     c88:	89 b7       	in	r24, 0x39	; 57
     c8a:	80 62       	ori	r24, 0x20	; 32
     c8c:	89 bf       	out	0x39, r24	; 57
			break;
     c8e:	03 c0       	rjmp	.+6      	; 0xc96 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_All:
		{
			TIMSK|=T1_INTERRUPT_All;
     c90:	89 b7       	in	r24, 0x39	; 57
     c92:	8c 63       	ori	r24, 0x3C	; 60
     c94:	89 bf       	out	0x39, r24	; 57
	}




	}
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	af 90       	pop	r10
     ca0:	08 95       	ret

00000ca2 <timer1Set>:


void timer1Set(uint16_t u16_value)
{
TCNT1=u16_value;
     ca2:	9d bd       	out	0x2d, r25	; 45
     ca4:	8c bd       	out	0x2c, r24	; 44
}
     ca6:	08 95       	ret

00000ca8 <timer1Read>:
 * Description:
 * @return TCNT1
 */
uint16_t timer1Read(void)
{
return TCNT1;
     ca8:	8c b5       	in	r24, 0x2c	; 44
     caa:	9d b5       	in	r25, 0x2d	; 45
}
     cac:	08 95       	ret

00000cae <timer1Start>:
 * Description:
 * @param
 */
void timer1Start(void)
{
TCCR1|=u8g_T1_Prescaler;
     cae:	2e b5       	in	r18, 0x2e	; 46
     cb0:	3f b5       	in	r19, 0x2f	; 47
     cb2:	80 91 74 00 	lds	r24, 0x0074
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	82 2b       	or	r24, r18
     cba:	93 2b       	or	r25, r19
     cbc:	9f bd       	out	0x2f, r25	; 47
     cbe:	8e bd       	out	0x2e, r24	; 46
}
     cc0:	08 95       	ret

00000cc2 <timer1Stop>:
 * Description:
 * @param
 */
void timer1Stop(void)
{
TCCR1 &=0xfff8;
     cc2:	8e b5       	in	r24, 0x2e	; 46
     cc4:	9f b5       	in	r25, 0x2f	; 47
     cc6:	88 7f       	andi	r24, 0xF8	; 248
     cc8:	9f bd       	out	0x2f, r25	; 47
     cca:	8e bd       	out	0x2e, r24	; 46
/*Keep all sittings as it is and put zeros in cs10,cs11,cs12*/
}
     ccc:	08 95       	ret

00000cce <timer1DelayMs>:
 */
void timer1DelayMs(uint16_t u16_delay_in_ms)
{


}
     cce:	08 95       	ret

00000cd0 <timer1DelayUs>:
 */
void timer1DelayUs(uint32_t u32_delay_in_us)
{


}
     cd0:	08 95       	ret

00000cd2 <timer1SwPWM>:
 */
void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{


}
     cd2:	08 95       	ret

00000cd4 <timer2Set>:
* Description:
* @param value
*/
void timer2Set(uint8_t u8_a_value)
{
TCNT2=u8_a_value;
     cd4:	84 bd       	out	0x24, r24	; 36
}
     cd6:	08 95       	ret

00000cd8 <timer2Read>:
/**
* Description:
* @return
*/
uint8_t timer2Read(void){
return TCNT2;
     cd8:	84 b5       	in	r24, 0x24	; 36
}
     cda:	08 95       	ret

00000cdc <timer2Start>:
/**
* Description:
*/
void timer2Start(void)
{
TCCR2 &= 0xf8;
     cdc:	85 b5       	in	r24, 0x25	; 37
     cde:	88 7f       	andi	r24, 0xF8	; 248
     ce0:	85 bd       	out	0x25, r24	; 37
TCCR2 |= Prescaler_Value2;
     ce2:	95 b5       	in	r25, 0x25	; 37
     ce4:	80 91 75 00 	lds	r24, 0x0075
     ce8:	89 2b       	or	r24, r25
     cea:	85 bd       	out	0x25, r24	; 37
}
     cec:	08 95       	ret

00000cee <timer2Stop>:
/**
* Description:
*/
void timer2Stop(void)
{
TCCR2 &= 0xf8;
     cee:	85 b5       	in	r24, 0x25	; 37
     cf0:	88 7f       	andi	r24, 0xF8	; 248
     cf2:	85 bd       	out	0x25, r24	; 37

}
     cf4:	08 95       	ret

00000cf6 <timer2Init>:


}

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC,En_timer2perscaler_t en_prescal2, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
     cf6:	cf 92       	push	r12
     cf8:	0f 93       	push	r16
if(en_prescal2 == T2_NO_CLOCK)
     cfa:	44 23       	and	r20, r20
     cfc:	19 f4       	brne	.+6      	; 0xd04 <timer2Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer2Stop();
     cfe:	0e 94 77 06 	call	0xcee	; 0xcee <timer2Stop>
     d02:	46 c0       	rjmp	.+140    	; 0xd90 <timer2Init+0x9a>
}
else
{
TCCR2 |= en_mode|en_prescal2 ;
     d04:	95 b5       	in	r25, 0x25	; 37
     d06:	89 2b       	or	r24, r25
     d08:	84 2b       	or	r24, r20
     d0a:	85 bd       	out	0x25, r24	; 37
Prescaler_Value2=en_prescal2;
     d0c:	40 93 75 00 	sts	0x0075, r20
TCNT2 = u8_initialValue;
     d10:	24 bd       	out	0x24, r18	; 36
switch(en_OC){
     d12:	60 31       	cpi	r22, 0x10	; 16
     d14:	71 f0       	breq	.+28     	; 0xd32 <timer2Init+0x3c>
     d16:	61 31       	cpi	r22, 0x11	; 17
     d18:	18 f4       	brcc	.+6      	; 0xd20 <timer2Init+0x2a>
     d1a:	66 23       	and	r22, r22
     d1c:	31 f0       	breq	.+12     	; 0xd2a <timer2Init+0x34>
     d1e:	14 c0       	rjmp	.+40     	; 0xd48 <timer2Init+0x52>
     d20:	60 32       	cpi	r22, 0x20	; 32
     d22:	59 f0       	breq	.+22     	; 0xd3a <timer2Init+0x44>
     d24:	60 33       	cpi	r22, 0x30	; 48
     d26:	81 f4       	brne	.+32     	; 0xd48 <timer2Init+0x52>
     d28:	0c c0       	rjmp	.+24     	; 0xd42 <timer2Init+0x4c>
	case  T2_OC2_DIS:
	{
	TCCR2 &= 0xCF;
     d2a:	85 b5       	in	r24, 0x25	; 37
     d2c:	8f 7c       	andi	r24, 0xCF	; 207
     d2e:	85 bd       	out	0x25, r24	; 37
		break;
     d30:	0b c0       	rjmp	.+22     	; 0xd48 <timer2Init+0x52>
	}
	case T2_OC2_TOGGLE:
	{
		TCCR2 |=T2_OC2_TOGGLE;
     d32:	85 b5       	in	r24, 0x25	; 37
     d34:	80 61       	ori	r24, 0x10	; 16
     d36:	85 bd       	out	0x25, r24	; 37
		break;
     d38:	07 c0       	rjmp	.+14     	; 0xd48 <timer2Init+0x52>
	}
	case  T2_OC2_CLEAR:
	{
	TCCR2 |= T2_OC2_CLEAR;
     d3a:	85 b5       	in	r24, 0x25	; 37
     d3c:	80 62       	ori	r24, 0x20	; 32
     d3e:	85 bd       	out	0x25, r24	; 37

		break;
     d40:	03 c0       	rjmp	.+6      	; 0xd48 <timer2Init+0x52>
	}
	case T2_OC2_SET:
	{
		TCCR2 |=T2_OC2_SET;
     d42:	85 b5       	in	r24, 0x25	; 37
     d44:	80 63       	ori	r24, 0x30	; 48
     d46:	85 bd       	out	0x25, r24	; 37
		break;
	}

}
OCR2  =u8_outputCompare;
     d48:	03 bd       	out	0x23, r16	; 35
switch(en_interruptMask){
     d4a:	80 e4       	ldi	r24, 0x40	; 64
     d4c:	c8 16       	cp	r12, r24
     d4e:	61 f0       	breq	.+24     	; 0xd68 <timer2Init+0x72>
     d50:	80 e8       	ldi	r24, 0x80	; 128
     d52:	c8 16       	cp	r12, r24
     d54:	91 f0       	breq	.+36     	; 0xd7a <timer2Init+0x84>
     d56:	cc 20       	and	r12, r12
     d58:	d9 f4       	brne	.+54     	; 0xd90 <timer2Init+0x9a>
case  T2_POLLING:
pooling_2=0;
     d5a:	10 92 76 00 	sts	0x0076, r1
G_interrupt_Disable();
     d5e:	0e 94 56 01 	call	0x2ac	; 0x2ac <G_interrupt_Disable>
TIMSK &= T2_POLLING;
     d62:	89 b7       	in	r24, 0x39	; 57
     d64:	19 be       	out	0x39, r1	; 57
break;
     d66:	14 c0       	rjmp	.+40     	; 0xd90 <timer2Init+0x9a>
case T2_INTERRUPT_NORMAL :
{
	pooling_2=1;
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	80 93 76 00 	sts	0x0076, r24
G_interrupt_Enable();
     d6e:	0e 94 46 01 	call	0x28c	; 0x28c <G_interrupt_Enable>
TIMSK |= T2_INTERRUPT_NORMAL;
     d72:	89 b7       	in	r24, 0x39	; 57
     d74:	80 64       	ori	r24, 0x40	; 64
     d76:	89 bf       	out	0x39, r24	; 57
break;
     d78:	0b c0       	rjmp	.+22     	; 0xd90 <timer2Init+0x9a>
}
case T2_INTERRUPT_CMP:
{
	pooling_2=1;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	80 93 76 00 	sts	0x0076, r24
G_interrupt_Enable();
     d80:	0e 94 46 01 	call	0x28c	; 0x28c <G_interrupt_Enable>
//SET_BIT(SREG,7);
TIMSK |=T2_INTERRUPT_NORMAL;
     d84:	89 b7       	in	r24, 0x39	; 57
     d86:	80 64       	ori	r24, 0x40	; 64
     d88:	89 bf       	out	0x39, r24	; 57
TIMSK |=T2_INTERRUPT_CMP;
     d8a:	89 b7       	in	r24, 0x39	; 57
     d8c:	80 68       	ori	r24, 0x80	; 128
     d8e:	89 bf       	out	0x39, r24	; 57

}



}
     d90:	0f 91       	pop	r16
     d92:	cf 90       	pop	r12
     d94:	08 95       	ret

00000d96 <timer2DelayMs>:
		Prescalercounst=1;
		break;

		}*/
void timer2DelayMs(uint16_t u16_delay_in_ms)
{
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <timer2DelayMs+0xa>
     da0:	00 d0       	rcall	.+0      	; 0xda2 <timer2DelayMs+0xc>
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	8c 01       	movw	r16, r24
	volatile uint16_t count=0;
     da8:	1a 82       	std	Y+2, r1	; 0x02
     daa:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t Prescalercounst=0,set_timer2=0;
     dac:	1b 82       	std	Y+3, r1	; 0x03
     dae:	1c 82       	std	Y+4, r1	; 0x04
	switch(Prescaler_Value2)
     db0:	80 91 75 00 	lds	r24, 0x0075
     db4:	84 30       	cpi	r24, 0x04	; 4
     db6:	f9 f0       	breq	.+62     	; 0xdf6 <timer2DelayMs+0x60>
     db8:	85 30       	cpi	r24, 0x05	; 5
     dba:	38 f4       	brcc	.+14     	; 0xdca <timer2DelayMs+0x34>
     dbc:	82 30       	cpi	r24, 0x02	; 2
     dbe:	89 f0       	breq	.+34     	; 0xde2 <timer2DelayMs+0x4c>
     dc0:	83 30       	cpi	r24, 0x03	; 3
     dc2:	a0 f4       	brcc	.+40     	; 0xdec <timer2DelayMs+0x56>
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	51 f5       	brne	.+84     	; 0xe1c <timer2DelayMs+0x86>
     dc8:	07 c0       	rjmp	.+14     	; 0xdd8 <timer2DelayMs+0x42>
     dca:	86 30       	cpi	r24, 0x06	; 6
     dcc:	f1 f0       	breq	.+60     	; 0xe0a <timer2DelayMs+0x74>
     dce:	86 30       	cpi	r24, 0x06	; 6
     dd0:	b8 f0       	brcs	.+46     	; 0xe00 <timer2DelayMs+0x6a>
     dd2:	87 30       	cpi	r24, 0x07	; 7
     dd4:	19 f5       	brne	.+70     	; 0xe1c <timer2DelayMs+0x86>
     dd6:	1e c0       	rjmp	.+60     	; 0xe14 <timer2DelayMs+0x7e>
	{
		case T2_PRESCALER_NO:{
		Prescalercounst=58;
     dd8:	8a e3       	ldi	r24, 0x3A	; 58
     dda:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=10;
     ddc:	8a e0       	ldi	r24, 0x0A	; 10
     dde:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     de0:	1d c0       	rjmp	.+58     	; 0xe1c <timer2DelayMs+0x86>
		case T2_PRESCALER_8:
		{Prescalercounst=8;
     de2:	88 e0       	ldi	r24, 0x08	; 8
     de4:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=12;
     de6:	8c e0       	ldi	r24, 0x0C	; 12
     de8:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     dea:	18 c0       	rjmp	.+48     	; 0xe1c <timer2DelayMs+0x86>
		case T2_PRESCALER_32:
		{Prescalercounst=2;
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=8;
     df0:	88 e0       	ldi	r24, 0x08	; 8
     df2:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     df4:	13 c0       	rjmp	.+38     	; 0xe1c <timer2DelayMs+0x86>
		case T2_PRESCALER_64:
		{Prescalercounst=1;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=6;
     dfa:	86 e0       	ldi	r24, 0x06	; 6
     dfc:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     dfe:	0e c0       	rjmp	.+28     	; 0xe1c <timer2DelayMs+0x86>
		case T2_PRESCALER_128:
		{Prescalercounst=1;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=131;
     e04:	83 e8       	ldi	r24, 0x83	; 131
     e06:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     e08:	09 c0       	rjmp	.+18     	; 0xe1c <timer2DelayMs+0x86>
		case T2_PRESCALER_256:
		{Prescalercounst=1;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=194;
     e0e:	82 ec       	ldi	r24, 0xC2	; 194
     e10:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     e12:	04 c0       	rjmp	.+8      	; 0xe1c <timer2DelayMs+0x86>
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=240;
     e18:	80 ef       	ldi	r24, 0xF0	; 240
     e1a:	8c 83       	std	Y+4, r24	; 0x04
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
     e1c:	1a 82       	std	Y+2, r1	; 0x02
     e1e:	19 82       	std	Y+1, r1	; 0x01
     e20:	2b 81       	ldd	r18, Y+3	; 0x03
     e22:	49 81       	ldd	r20, Y+1	; 0x01
     e24:	5a 81       	ldd	r21, Y+2	; 0x02
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	02 9f       	mul	r16, r18
     e2a:	c0 01       	movw	r24, r0
     e2c:	03 9f       	mul	r16, r19
     e2e:	90 0d       	add	r25, r0
     e30:	12 9f       	mul	r17, r18
     e32:	90 0d       	add	r25, r0
     e34:	11 24       	eor	r1, r1
     e36:	48 17       	cp	r20, r24
     e38:	59 07       	cpc	r21, r25
     e3a:	e0 f4       	brcc	.+56     	; 0xe74 <timer2DelayMs+0xde>
	{
		timer2Set(set_timer2);//10 for no prescaler....12 for 8 prescaler .... 8 for 32 prescaler ....6 for prescaler 64 .....
     e3c:	8c 81       	ldd	r24, Y+4	; 0x04
     e3e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <timer2Set>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR & 0x40)==0);
     e42:	08 b6       	in	r0, 0x38	; 56
     e44:	06 fe       	sbrs	r0, 6
     e46:	fd cf       	rjmp	.-6      	; 0xe42 <timer2DelayMs+0xac>
		TIFR |=0x40;
     e48:	88 b7       	in	r24, 0x38	; 56
     e4a:	80 64       	ori	r24, 0x40	; 64
     e4c:	88 bf       	out	0x38, r24	; 56
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
		set_timer2=240;
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	9a 81       	ldd	r25, Y+2	; 0x02
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	9a 83       	std	Y+2, r25	; 0x02
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	2b 81       	ldd	r18, Y+3	; 0x03
     e5a:	49 81       	ldd	r20, Y+1	; 0x01
     e5c:	5a 81       	ldd	r21, Y+2	; 0x02
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	02 9f       	mul	r16, r18
     e62:	c0 01       	movw	r24, r0
     e64:	03 9f       	mul	r16, r19
     e66:	90 0d       	add	r25, r0
     e68:	12 9f       	mul	r17, r18
     e6a:	90 0d       	add	r25, r0
     e6c:	11 24       	eor	r1, r1
     e6e:	48 17       	cp	r20, r24
     e70:	59 07       	cpc	r21, r25
     e72:	20 f3       	brcs	.-56     	; 0xe3c <timer2DelayMs+0xa6>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR & 0x40)==0);
		TIFR |=0x40;

	}
}
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	08 95       	ret

00000e86 <timer2DelayUs>:

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
     e86:	cf 92       	push	r12
     e88:	df 92       	push	r13
     e8a:	ef 92       	push	r14
     e8c:	ff 92       	push	r15
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	00 d0       	rcall	.+0      	; 0xe94 <timer2DelayUs+0xe>
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	6b 01       	movw	r12, r22
     e9a:	7c 01       	movw	r14, r24
	volatile uint16_t count =0;
     e9c:	1a 82       	std	Y+2, r1	; 0x02
     e9e:	19 82       	std	Y+1, r1	; 0x01
	for (count=0;count<u16_delay_in_us;count++)
     ea0:	1a 82       	std	Y+2, r1	; 0x02
     ea2:	19 82       	std	Y+1, r1	; 0x01
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	9a 81       	ldd	r25, Y+2	; 0x02
     ea8:	a0 e0       	ldi	r26, 0x00	; 0
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	8c 15       	cp	r24, r12
     eae:	9d 05       	cpc	r25, r13
     eb0:	ae 05       	cpc	r26, r14
     eb2:	bf 05       	cpc	r27, r15
     eb4:	b8 f4       	brcc	.+46     	; 0xee4 <timer2DelayUs+0x5e>
	{
		timer2Set(254);//254 for no prescaler
     eb6:	8e ef       	ldi	r24, 0xFE	; 254
     eb8:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <timer2Set>
		while ((TIFR & 0x40)==0);
     ebc:	08 b6       	in	r0, 0x38	; 56
     ebe:	06 fe       	sbrs	r0, 6
     ec0:	fd cf       	rjmp	.-6      	; 0xebc <timer2DelayUs+0x36>
		TIFR |=0x40;
     ec2:	88 b7       	in	r24, 0x38	; 56
     ec4:	80 64       	ori	r24, 0x40	; 64
     ec6:	88 bf       	out	0x38, r24	; 56

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
	volatile uint16_t count =0;
	for (count=0;count<u16_delay_in_us;count++)
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	9a 81       	ldd	r25, Y+2	; 0x02
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	9a 81       	ldd	r25, Y+2	; 0x02
     ed6:	a0 e0       	ldi	r26, 0x00	; 0
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	8c 15       	cp	r24, r12
     edc:	9d 05       	cpc	r25, r13
     ede:	ae 05       	cpc	r26, r14
     ee0:	bf 05       	cpc	r27, r15
     ee2:	48 f3       	brcs	.-46     	; 0xeb6 <timer2DelayUs+0x30>
		while ((TIFR & 0x40)==0);
		TIFR |=0x40;

	}

}
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	ff 90       	pop	r15
     eee:	ef 90       	pop	r14
     ef0:	df 90       	pop	r13
     ef2:	cf 90       	pop	r12
     ef4:	08 95       	ret

00000ef6 <timer2SwPWM>:
/**
* Description:
* @param dutyCycle
*/
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
     ef6:	cf 92       	push	r12
     ef8:	df 92       	push	r13
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	cf 93       	push	r28
     f00:	c8 2f       	mov	r28, r24

float dutyReal;
pwm_time_on=MAX_HOLD;
     f02:	8f ef       	ldi	r24, 0xFF	; 255
     f04:	80 93 73 00 	sts	0x0073, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
     f08:	60 91 73 00 	lds	r22, 0x0073
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__floatunsisf>
     f16:	6b 01       	movw	r12, r22
     f18:	7c 01       	movw	r14, r24
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{

float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
     f1a:	6c 2f       	mov	r22, r28
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__floatunsisf>
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	48 ec       	ldi	r20, 0xC8	; 200
     f2c:	52 e4       	ldi	r21, 0x42	; 66
     f2e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__divsf3>
     f32:	9b 01       	movw	r18, r22
     f34:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
     f36:	c7 01       	movw	r24, r14
     f38:	b6 01       	movw	r22, r12
     f3a:	0e 94 84 09 	call	0x1308	; 0x1308 <__mulsf3>
     f3e:	0e 94 ca 08 	call	0x1194	; 0x1194 <__fixunssfsi>
     f42:	60 93 73 00 	sts	0x0073, r22
switch(pooling_2)
     f46:	80 91 76 00 	lds	r24, 0x0076
     f4a:	88 23       	and	r24, r24
     f4c:	19 f0       	breq	.+6      	; 0xf54 <timer2SwPWM+0x5e>
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	29 f5       	brne	.+74     	; 0xf9c <timer2SwPWM+0xa6>
     f52:	1f c0       	rjmp	.+62     	; 0xf92 <timer2SwPWM+0x9c>
{
	case 0:
	{
		timer2Start();
     f54:	0e 94 6e 06 	call	0xcdc	; 0xcdc <timer2Start>
		timer2Set(pwm_time_on);
     f58:	80 91 73 00 	lds	r24, 0x0073
     f5c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <timer2Set>
		//freq 50KHZ is the Max frequency possible
		while ((TIFR&0x04)==0);
     f60:	08 b6       	in	r0, 0x38	; 56
     f62:	02 fe       	sbrs	r0, 2
     f64:	fd cf       	rjmp	.-6      	; 0xf60 <timer2SwPWM+0x6a>
		TIFR |=0x04;
     f66:	88 b7       	in	r24, 0x38	; 56
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	88 bf       	out	0x38, r24	; 56
		PORTC_DATA |=0xff;
     f6c:	85 b3       	in	r24, 0x15	; 21
     f6e:	8f ef       	ldi	r24, 0xFF	; 255
     f70:	85 bb       	out	0x15, r24	; 21
		timer2Start();
     f72:	0e 94 6e 06 	call	0xcdc	; 0xcdc <timer2Start>
		timer2Set(MAX_HOLD-pwm_time_on);
     f76:	80 91 73 00 	lds	r24, 0x0073
     f7a:	80 95       	com	r24
     f7c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <timer2Set>
		//freq
		while ((TIFR & 0x04)==0);
     f80:	08 b6       	in	r0, 0x38	; 56
     f82:	02 fe       	sbrs	r0, 2
     f84:	fd cf       	rjmp	.-6      	; 0xf80 <timer2SwPWM+0x8a>
		TIFR |=0x04;
     f86:	88 b7       	in	r24, 0x38	; 56
     f88:	84 60       	ori	r24, 0x04	; 4
     f8a:	88 bf       	out	0x38, r24	; 56
		PORTC_DATA &=0x00;
     f8c:	85 b3       	in	r24, 0x15	; 21
     f8e:	15 ba       	out	0x15, r1	; 21

		break;
     f90:	05 c0       	rjmp	.+10     	; 0xf9c <timer2SwPWM+0xa6>
	}
	case 1:
	{
		timer2Start();
     f92:	0e 94 6e 06 	call	0xcdc	; 0xcdc <timer2Start>
		OCR2=pwm_time_on;
     f96:	80 91 73 00 	lds	r24, 0x0073
     f9a:	83 bd       	out	0x23, r24	; 35
	}

}


}
     f9c:	cf 91       	pop	r28
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	cf 90       	pop	r12
     fa6:	08 95       	ret

00000fa8 <Timer2_interrupt_COMP_routine>:
void Timer2_interrupt_COMP_routine(void)
{



}
     fa8:	08 95       	ret

00000faa <Timer2_interrupt_routine>:
void Timer2_interrupt_routine(void)
{


}
     faa:	08 95       	ret

00000fac <Uart_Init>:
uint8_t BufferRequested[Buffer_Size];
volatile uint8_t u8_index=0;
volatile uint8_t buf_is_full=0;
void Uart_Init(En_BAUD_Rate Baud_rate,En_Stop_config Stop_bits_num,
  EN_Parity parity_Bit,EN_Data_Size data_num_bits,EN_UartMode uart_mode)
{uint8_t Buffer=0;
     fac:	0f 93       	push	r16
switch (Baud_rate) {
     fae:	83 33       	cpi	r24, 0x33	; 51
     fb0:	71 f0       	breq	.+28     	; 0xfce <Uart_Init+0x22>
     fb2:	84 33       	cpi	r24, 0x34	; 52
     fb4:	18 f4       	brcc	.+6      	; 0xfbc <Uart_Init+0x10>
     fb6:	89 31       	cpi	r24, 0x19	; 25
     fb8:	79 f4       	brne	.+30     	; 0xfd8 <Uart_Init+0x2c>
     fba:	0c c0       	rjmp	.+24     	; 0xfd4 <Uart_Init+0x28>
     fbc:	84 34       	cpi	r24, 0x44	; 68
     fbe:	21 f0       	breq	.+8      	; 0xfc8 <Uart_Init+0x1c>
     fc0:	87 36       	cpi	r24, 0x67	; 103
     fc2:	51 f4       	brne	.+20     	; 0xfd8 <Uart_Init+0x2c>
  case Baud9600:
  UBRRL=Baud9600;
     fc4:	89 b9       	out	0x09, r24	; 9
  break;
     fc6:	08 c0       	rjmp	.+16     	; 0xfd8 <Uart_Init+0x2c>
  case Baud14400:
  UBRRL=Baud14400;
     fc8:	84 e4       	ldi	r24, 0x44	; 68
     fca:	89 b9       	out	0x09, r24	; 9
  break;
     fcc:	05 c0       	rjmp	.+10     	; 0xfd8 <Uart_Init+0x2c>
  case Baud19200:
  UBRRL=Baud19200;
     fce:	83 e3       	ldi	r24, 0x33	; 51
     fd0:	89 b9       	out	0x09, r24	; 9
  break;
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <Uart_Init+0x2c>
  case Baud38400:
  UBRRL=Baud38400;
     fd4:	89 e1       	ldi	r24, 0x19	; 25
     fd6:	89 b9       	out	0x09, r24	; 9
  break;
}
switch (Stop_bits_num) {
     fd8:	66 23       	and	r22, r22
     fda:	31 f0       	breq	.+12     	; 0xfe8 <Uart_Init+0x3c>
     fdc:	61 30       	cpi	r22, 0x01	; 1
     fde:	11 f0       	breq	.+4      	; 0xfe4 <Uart_Init+0x38>
uint8_t BufferRequested[Buffer_Size];
volatile uint8_t u8_index=0;
volatile uint8_t buf_is_full=0;
void Uart_Init(En_BAUD_Rate Baud_rate,En_Stop_config Stop_bits_num,
  EN_Parity parity_Bit,EN_Data_Size data_num_bits,EN_UartMode uart_mode)
{uint8_t Buffer=0;
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	03 c0       	rjmp	.+6      	; 0xfea <Uart_Init+0x3e>
  break;
}
case TwoStopBits:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,USBS);
     fe4:	88 e8       	ldi	r24, 0x88	; 136
  break;
     fe6:	01 c0       	rjmp	.+2      	; 0xfea <Uart_Init+0x3e>
  break;
}
switch (Stop_bits_num) {
case OneStopBit:
{ SET_BIT(Buffer,URSEL);
  CLEAR_BIT(Buffer,USBS);
     fe8:	80 e8       	ldi	r24, 0x80	; 128
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,USBS);
  break;
}
}
switch (data_num_bits)
     fea:	22 30       	cpi	r18, 0x02	; 2
     fec:	a1 f0       	breq	.+40     	; 0x1016 <Uart_Init+0x6a>
     fee:	23 30       	cpi	r18, 0x03	; 3
     ff0:	28 f4       	brcc	.+10     	; 0xffc <Uart_Init+0x50>
     ff2:	22 23       	and	r18, r18
     ff4:	41 f0       	breq	.+16     	; 0x1006 <Uart_Init+0x5a>
     ff6:	21 30       	cpi	r18, 0x01	; 1
     ff8:	b9 f4       	brne	.+46     	; 0x1028 <Uart_Init+0x7c>
     ffa:	09 c0       	rjmp	.+18     	; 0x100e <Uart_Init+0x62>
     ffc:	23 30       	cpi	r18, 0x03	; 3
     ffe:	79 f0       	breq	.+30     	; 0x101e <Uart_Init+0x72>
    1000:	24 30       	cpi	r18, 0x04	; 4
    1002:	91 f4       	brne	.+36     	; 0x1028 <Uart_Init+0x7c>
    1004:	0f c0       	rjmp	.+30     	; 0x1024 <Uart_Init+0x78>
{
case FiveBits:
{
SET_BIT(Buffer,URSEL);
    1006:	80 68       	ori	r24, 0x80	; 128
CLEAR_BIT(Buffer,UCSZ0);
CLEAR_BIT(Buffer,UCSZ1);
    1008:	89 7f       	andi	r24, 0xF9	; 249
CLEAR_BIT(UCSRB,UCSZ2);
    100a:	52 98       	cbi	0x0a, 2	; 10
break;
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <Uart_Init+0x7c>
}
case SexBits:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,UCSZ0);
    100e:	82 68       	ori	r24, 0x82	; 130
  CLEAR_BIT(Buffer,UCSZ1);
    1010:	8b 7f       	andi	r24, 0xFB	; 251
  CLEAR_BIT(UCSRB,UCSZ2);
    1012:	52 98       	cbi	0x0a, 2	; 10
  break;
    1014:	09 c0       	rjmp	.+18     	; 0x1028 <Uart_Init+0x7c>
}
case SevenBits:
{
  SET_BIT(Buffer,URSEL);
  CLEAR_BIT(Buffer,UCSZ0);
    1016:	89 77       	andi	r24, 0x79	; 121
  SET_BIT(Buffer,UCSZ1);
    1018:	84 68       	ori	r24, 0x84	; 132
  CLEAR_BIT(UCSRB,UCSZ2);
    101a:	52 98       	cbi	0x0a, 2	; 10
  break;
    101c:	05 c0       	rjmp	.+10     	; 0x1028 <Uart_Init+0x7c>
}
case EightBits:
{   SET_BIT(Buffer,URSEL);
    SET_BIT(Buffer,UCSZ0);
    SET_BIT(Buffer,UCSZ1);
    101e:	86 68       	ori	r24, 0x86	; 134
    CLEAR_BIT(UCSRB,UCSZ2);
    1020:	52 98       	cbi	0x0a, 2	; 10
break;
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <Uart_Init+0x7c>
}

case NineBits:
{   SET_BIT(Buffer,URSEL);
	SET_BIT(Buffer,UCSZ0);
	SET_BIT(Buffer,UCSZ1);
    1024:	86 68       	ori	r24, 0x86	; 134
	SET_BIT(UCSRB,UCSZ2);
    1026:	52 9a       	sbi	0x0a, 2	; 10
	break;
}

}

switch (uart_mode) {
    1028:	00 23       	and	r16, r16
    102a:	19 f0       	breq	.+6      	; 0x1032 <Uart_Init+0x86>
    102c:	01 30       	cpi	r16, 0x01	; 1
    102e:	29 f4       	brne	.+10     	; 0x103a <Uart_Init+0x8e>
    1030:	03 c0       	rjmp	.+6      	; 0x1038 <Uart_Init+0x8c>
  case ASynchronous:
  {
  SET_BIT(Buffer,URSEL);
    1032:	80 68       	ori	r24, 0x80	; 128
  CLEAR_BIT(Buffer,UMSEL);
    1034:	8f 7b       	andi	r24, 0xBF	; 191
  break;
    1036:	01 c0       	rjmp	.+2      	; 0x103a <Uart_Init+0x8e>
  }
case Synchronous:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,UMSEL);
    1038:	80 6c       	ori	r24, 0xC0	; 192
  break;
}
}
switch (parity_Bit) {
    103a:	41 30       	cpi	r20, 0x01	; 1
    103c:	41 f0       	breq	.+16     	; 0x104e <Uart_Init+0xa2>
    103e:	41 30       	cpi	r20, 0x01	; 1
    1040:	18 f0       	brcs	.+6      	; 0x1048 <Uart_Init+0x9c>
    1042:	42 30       	cpi	r20, 0x02	; 2
    1044:	41 f4       	brne	.+16     	; 0x1056 <Uart_Init+0xaa>
    1046:	06 c0       	rjmp	.+12     	; 0x1054 <Uart_Init+0xa8>
  case NoParity:
{
SET_BIT(Buffer,URSEL);
    1048:	80 68       	ori	r24, 0x80	; 128
CLEAR_BIT(Buffer,UPM0);
CLEAR_BIT(Buffer,UPM1);
    104a:	8f 7c       	andi	r24, 0xCF	; 207
  break;
    104c:	04 c0       	rjmp	.+8      	; 0x1056 <Uart_Init+0xaa>
}
case EvenParity:
{
SET_BIT(Buffer,URSEL);
CLEAR_BIT(Buffer,UPM0);
    104e:	8f 74       	andi	r24, 0x4F	; 79
SET_BIT(Buffer,UPM1);
    1050:	80 6a       	ori	r24, 0xA0	; 160
break;
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <Uart_Init+0xaa>
}
case OddParity:
{
SET_BIT(Buffer,URSEL);
SET_BIT(Buffer,UPM1);
SET_BIT(Buffer,UPM0);
    1054:	80 6b       	ori	r24, 0xB0	; 176
}


}

UCSRC=Buffer;
    1056:	80 bd       	out	0x20, r24	; 32
SET_BIT(UCSRB,TXEN);/*TXEN*/
    1058:	53 9a       	sbi	0x0a, 3	; 10
SET_BIT(UCSRB,RXEN);/*RXEN*/
    105a:	54 9a       	sbi	0x0a, 4	; 10
}
    105c:	0f 91       	pop	r16
    105e:	08 95       	ret

00001060 <UartTransmitPooling>:
void UartTransmitPooling(uint8_t Data)
{
while( !( UCSRA & (1<<UDRE)));
    1060:	5d 9b       	sbis	0x0b, 5	; 11
    1062:	fe cf       	rjmp	.-4      	; 0x1060 <UartTransmitPooling>
UDR=Data;
    1064:	8c b9       	out	0x0c, r24	; 12
}
    1066:	08 95       	ret

00001068 <UartRecievePooling>:
uint8_t UartRecievePooling(void)
{
	uint8_t data=0;
while (!( UCSRA & (1 << RXC)));/* Wait until new data receive*/
    1068:	5f 9b       	sbis	0x0b, 7	; 11
    106a:	fe cf       	rjmp	.-4      	; 0x1068 <UartRecievePooling>
data=UDR;
    106c:	8c b1       	in	r24, 0x0c	; 12
return data;									/* Get and return received data */
}
    106e:	08 95       	ret

00001070 <Enable_communication_interrupt>:


void Enable_communication_interrupt(void)
{
G_interrupt_Enable();
    1070:	0e 94 46 01 	call	0x28c	; 0x28c <G_interrupt_Enable>
SET_BIT(UCSRB,RXCIE);
    1074:	57 9a       	sbi	0x0a, 7	; 10
SET_BIT(UCSRB,TXCIE);
    1076:	56 9a       	sbi	0x0a, 6	; 10
SET_BIT(SPCR,SPIE);
    1078:	6f 9a       	sbi	0x0d, 7	; 13
}
    107a:	08 95       	ret

0000107c <UartRecieveInterrupt>:
//  }
//  else{
//  buf_is_full=1;
//  u16_index=0;
//      }
if(u8_index<Buffer_Size)
    107c:	80 91 7a 00 	lds	r24, 0x007A
    1080:	8a 30       	cpi	r24, 0x0A	; 10
    1082:	90 f4       	brcc	.+36     	; 0x10a8 <UartRecieveInterrupt+0x2c>
{
  gU8_Data_Recieved=UDR;
    1084:	8c b1       	in	r24, 0x0c	; 12
    1086:	80 93 7c 00 	sts	0x007C, r24
  BufferRequested[u8_index]=gU8_Data_Recieved;
    108a:	90 91 7a 00 	lds	r25, 0x007A
    108e:	80 91 7c 00 	lds	r24, 0x007C
    1092:	ed e9       	ldi	r30, 0x9D	; 157
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	e9 0f       	add	r30, r25
    1098:	f1 1d       	adc	r31, r1
    109a:	80 83       	st	Z, r24
  u8_index++;
    109c:	80 91 7a 00 	lds	r24, 0x007A
    10a0:	8f 5f       	subi	r24, 0xFF	; 255
    10a2:	80 93 7a 00 	sts	0x007A, r24
    10a6:	08 95       	ret
}
  else{
    u8_index=0;
    10a8:	10 92 7a 00 	sts	0x007A, r1
    10ac:	08 95       	ret

000010ae <UartTransmitInterrupt>:
 buf_is_full=1;
 u8_index=0;
     }
u8_Notification_TX=TRUE;
*/
UDR = gU8_Data_transmited;
    10ae:	80 91 7b 00 	lds	r24, 0x007B
    10b2:	8c b9       	out	0x0c, r24	; 12
}
    10b4:	08 95       	ret

000010b6 <UartTransmitdataInt>:
void UartTransmitdataInt(uint8_t data_to_transmit)
{

	  gU8_Data_transmited=data_to_transmit;
    10b6:	80 93 7b 00 	sts	0x007B, r24

}
    10ba:	08 95       	ret

000010bc <Uart_tryansmitfirstbyte>:

void Uart_tryansmitfirstbyte(uint8_t data)
{
UDR=data;
    10bc:	8c b9       	out	0x0c, r24	; 12
}
    10be:	08 95       	ret

000010c0 <Uart_recievefirstbyte>:
uint8_t Uart_recievefirstbyte(void)
{
uint8_t data=0;
data = UDR;
    10c0:	8c b1       	in	r24, 0x0c	; 12
  return data;
}
    10c2:	08 95       	ret

000010c4 <__divsf3>:
    10c4:	0c d0       	rcall	.+24     	; 0x10de <__divsf3x>
    10c6:	e6 c0       	rjmp	.+460    	; 0x1294 <__fp_round>
    10c8:	de d0       	rcall	.+444    	; 0x1286 <__fp_pscB>
    10ca:	40 f0       	brcs	.+16     	; 0x10dc <__divsf3+0x18>
    10cc:	d5 d0       	rcall	.+426    	; 0x1278 <__fp_pscA>
    10ce:	30 f0       	brcs	.+12     	; 0x10dc <__divsf3+0x18>
    10d0:	21 f4       	brne	.+8      	; 0x10da <__divsf3+0x16>
    10d2:	5f 3f       	cpi	r21, 0xFF	; 255
    10d4:	19 f0       	breq	.+6      	; 0x10dc <__divsf3+0x18>
    10d6:	c7 c0       	rjmp	.+398    	; 0x1266 <__fp_inf>
    10d8:	51 11       	cpse	r21, r1
    10da:	10 c1       	rjmp	.+544    	; 0x12fc <__fp_szero>
    10dc:	ca c0       	rjmp	.+404    	; 0x1272 <__fp_nan>

000010de <__divsf3x>:
    10de:	eb d0       	rcall	.+470    	; 0x12b6 <__fp_split3>
    10e0:	98 f3       	brcs	.-26     	; 0x10c8 <__divsf3+0x4>

000010e2 <__divsf3_pse>:
    10e2:	99 23       	and	r25, r25
    10e4:	c9 f3       	breq	.-14     	; 0x10d8 <__divsf3+0x14>
    10e6:	55 23       	and	r21, r21
    10e8:	b1 f3       	breq	.-20     	; 0x10d6 <__divsf3+0x12>
    10ea:	95 1b       	sub	r25, r21
    10ec:	55 0b       	sbc	r21, r21
    10ee:	bb 27       	eor	r27, r27
    10f0:	aa 27       	eor	r26, r26
    10f2:	62 17       	cp	r22, r18
    10f4:	73 07       	cpc	r23, r19
    10f6:	84 07       	cpc	r24, r20
    10f8:	38 f0       	brcs	.+14     	; 0x1108 <__divsf3_pse+0x26>
    10fa:	9f 5f       	subi	r25, 0xFF	; 255
    10fc:	5f 4f       	sbci	r21, 0xFF	; 255
    10fe:	22 0f       	add	r18, r18
    1100:	33 1f       	adc	r19, r19
    1102:	44 1f       	adc	r20, r20
    1104:	aa 1f       	adc	r26, r26
    1106:	a9 f3       	breq	.-22     	; 0x10f2 <__divsf3_pse+0x10>
    1108:	33 d0       	rcall	.+102    	; 0x1170 <__divsf3_pse+0x8e>
    110a:	0e 2e       	mov	r0, r30
    110c:	3a f0       	brmi	.+14     	; 0x111c <__divsf3_pse+0x3a>
    110e:	e0 e8       	ldi	r30, 0x80	; 128
    1110:	30 d0       	rcall	.+96     	; 0x1172 <__divsf3_pse+0x90>
    1112:	91 50       	subi	r25, 0x01	; 1
    1114:	50 40       	sbci	r21, 0x00	; 0
    1116:	e6 95       	lsr	r30
    1118:	00 1c       	adc	r0, r0
    111a:	ca f7       	brpl	.-14     	; 0x110e <__divsf3_pse+0x2c>
    111c:	29 d0       	rcall	.+82     	; 0x1170 <__divsf3_pse+0x8e>
    111e:	fe 2f       	mov	r31, r30
    1120:	27 d0       	rcall	.+78     	; 0x1170 <__divsf3_pse+0x8e>
    1122:	66 0f       	add	r22, r22
    1124:	77 1f       	adc	r23, r23
    1126:	88 1f       	adc	r24, r24
    1128:	bb 1f       	adc	r27, r27
    112a:	26 17       	cp	r18, r22
    112c:	37 07       	cpc	r19, r23
    112e:	48 07       	cpc	r20, r24
    1130:	ab 07       	cpc	r26, r27
    1132:	b0 e8       	ldi	r27, 0x80	; 128
    1134:	09 f0       	breq	.+2      	; 0x1138 <__divsf3_pse+0x56>
    1136:	bb 0b       	sbc	r27, r27
    1138:	80 2d       	mov	r24, r0
    113a:	bf 01       	movw	r22, r30
    113c:	ff 27       	eor	r31, r31
    113e:	93 58       	subi	r25, 0x83	; 131
    1140:	5f 4f       	sbci	r21, 0xFF	; 255
    1142:	2a f0       	brmi	.+10     	; 0x114e <__divsf3_pse+0x6c>
    1144:	9e 3f       	cpi	r25, 0xFE	; 254
    1146:	51 05       	cpc	r21, r1
    1148:	68 f0       	brcs	.+26     	; 0x1164 <__divsf3_pse+0x82>
    114a:	8d c0       	rjmp	.+282    	; 0x1266 <__fp_inf>
    114c:	d7 c0       	rjmp	.+430    	; 0x12fc <__fp_szero>
    114e:	5f 3f       	cpi	r21, 0xFF	; 255
    1150:	ec f3       	brlt	.-6      	; 0x114c <__divsf3_pse+0x6a>
    1152:	98 3e       	cpi	r25, 0xE8	; 232
    1154:	dc f3       	brlt	.-10     	; 0x114c <__divsf3_pse+0x6a>
    1156:	86 95       	lsr	r24
    1158:	77 95       	ror	r23
    115a:	67 95       	ror	r22
    115c:	b7 95       	ror	r27
    115e:	f7 95       	ror	r31
    1160:	9f 5f       	subi	r25, 0xFF	; 255
    1162:	c9 f7       	brne	.-14     	; 0x1156 <__divsf3_pse+0x74>
    1164:	88 0f       	add	r24, r24
    1166:	91 1d       	adc	r25, r1
    1168:	96 95       	lsr	r25
    116a:	87 95       	ror	r24
    116c:	97 f9       	bld	r25, 7
    116e:	08 95       	ret
    1170:	e1 e0       	ldi	r30, 0x01	; 1
    1172:	66 0f       	add	r22, r22
    1174:	77 1f       	adc	r23, r23
    1176:	88 1f       	adc	r24, r24
    1178:	bb 1f       	adc	r27, r27
    117a:	62 17       	cp	r22, r18
    117c:	73 07       	cpc	r23, r19
    117e:	84 07       	cpc	r24, r20
    1180:	ba 07       	cpc	r27, r26
    1182:	20 f0       	brcs	.+8      	; 0x118c <__divsf3_pse+0xaa>
    1184:	62 1b       	sub	r22, r18
    1186:	73 0b       	sbc	r23, r19
    1188:	84 0b       	sbc	r24, r20
    118a:	ba 0b       	sbc	r27, r26
    118c:	ee 1f       	adc	r30, r30
    118e:	88 f7       	brcc	.-30     	; 0x1172 <__divsf3_pse+0x90>
    1190:	e0 95       	com	r30
    1192:	08 95       	ret

00001194 <__fixunssfsi>:
    1194:	98 d0       	rcall	.+304    	; 0x12c6 <__fp_splitA>
    1196:	88 f0       	brcs	.+34     	; 0x11ba <__fixunssfsi+0x26>
    1198:	9f 57       	subi	r25, 0x7F	; 127
    119a:	90 f0       	brcs	.+36     	; 0x11c0 <__fixunssfsi+0x2c>
    119c:	b9 2f       	mov	r27, r25
    119e:	99 27       	eor	r25, r25
    11a0:	b7 51       	subi	r27, 0x17	; 23
    11a2:	a0 f0       	brcs	.+40     	; 0x11cc <__fixunssfsi+0x38>
    11a4:	d1 f0       	breq	.+52     	; 0x11da <__fixunssfsi+0x46>
    11a6:	66 0f       	add	r22, r22
    11a8:	77 1f       	adc	r23, r23
    11aa:	88 1f       	adc	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	1a f0       	brmi	.+6      	; 0x11b6 <__fixunssfsi+0x22>
    11b0:	ba 95       	dec	r27
    11b2:	c9 f7       	brne	.-14     	; 0x11a6 <__fixunssfsi+0x12>
    11b4:	12 c0       	rjmp	.+36     	; 0x11da <__fixunssfsi+0x46>
    11b6:	b1 30       	cpi	r27, 0x01	; 1
    11b8:	81 f0       	breq	.+32     	; 0x11da <__fixunssfsi+0x46>
    11ba:	9f d0       	rcall	.+318    	; 0x12fa <__fp_zero>
    11bc:	b1 e0       	ldi	r27, 0x01	; 1
    11be:	08 95       	ret
    11c0:	9c c0       	rjmp	.+312    	; 0x12fa <__fp_zero>
    11c2:	67 2f       	mov	r22, r23
    11c4:	78 2f       	mov	r23, r24
    11c6:	88 27       	eor	r24, r24
    11c8:	b8 5f       	subi	r27, 0xF8	; 248
    11ca:	39 f0       	breq	.+14     	; 0x11da <__fixunssfsi+0x46>
    11cc:	b9 3f       	cpi	r27, 0xF9	; 249
    11ce:	cc f3       	brlt	.-14     	; 0x11c2 <__fixunssfsi+0x2e>
    11d0:	86 95       	lsr	r24
    11d2:	77 95       	ror	r23
    11d4:	67 95       	ror	r22
    11d6:	b3 95       	inc	r27
    11d8:	d9 f7       	brne	.-10     	; 0x11d0 <__fixunssfsi+0x3c>
    11da:	3e f4       	brtc	.+14     	; 0x11ea <__fixunssfsi+0x56>
    11dc:	90 95       	com	r25
    11de:	80 95       	com	r24
    11e0:	70 95       	com	r23
    11e2:	61 95       	neg	r22
    11e4:	7f 4f       	sbci	r23, 0xFF	; 255
    11e6:	8f 4f       	sbci	r24, 0xFF	; 255
    11e8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ea:	08 95       	ret

000011ec <__floatunsisf>:
    11ec:	e8 94       	clt
    11ee:	09 c0       	rjmp	.+18     	; 0x1202 <__floatsisf+0x12>

000011f0 <__floatsisf>:
    11f0:	97 fb       	bst	r25, 7
    11f2:	3e f4       	brtc	.+14     	; 0x1202 <__floatsisf+0x12>
    11f4:	90 95       	com	r25
    11f6:	80 95       	com	r24
    11f8:	70 95       	com	r23
    11fa:	61 95       	neg	r22
    11fc:	7f 4f       	sbci	r23, 0xFF	; 255
    11fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1200:	9f 4f       	sbci	r25, 0xFF	; 255
    1202:	99 23       	and	r25, r25
    1204:	a9 f0       	breq	.+42     	; 0x1230 <__floatsisf+0x40>
    1206:	f9 2f       	mov	r31, r25
    1208:	96 e9       	ldi	r25, 0x96	; 150
    120a:	bb 27       	eor	r27, r27
    120c:	93 95       	inc	r25
    120e:	f6 95       	lsr	r31
    1210:	87 95       	ror	r24
    1212:	77 95       	ror	r23
    1214:	67 95       	ror	r22
    1216:	b7 95       	ror	r27
    1218:	f1 11       	cpse	r31, r1
    121a:	f8 cf       	rjmp	.-16     	; 0x120c <__floatsisf+0x1c>
    121c:	fa f4       	brpl	.+62     	; 0x125c <__floatsisf+0x6c>
    121e:	bb 0f       	add	r27, r27
    1220:	11 f4       	brne	.+4      	; 0x1226 <__floatsisf+0x36>
    1222:	60 ff       	sbrs	r22, 0
    1224:	1b c0       	rjmp	.+54     	; 0x125c <__floatsisf+0x6c>
    1226:	6f 5f       	subi	r22, 0xFF	; 255
    1228:	7f 4f       	sbci	r23, 0xFF	; 255
    122a:	8f 4f       	sbci	r24, 0xFF	; 255
    122c:	9f 4f       	sbci	r25, 0xFF	; 255
    122e:	16 c0       	rjmp	.+44     	; 0x125c <__floatsisf+0x6c>
    1230:	88 23       	and	r24, r24
    1232:	11 f0       	breq	.+4      	; 0x1238 <__floatsisf+0x48>
    1234:	96 e9       	ldi	r25, 0x96	; 150
    1236:	11 c0       	rjmp	.+34     	; 0x125a <__floatsisf+0x6a>
    1238:	77 23       	and	r23, r23
    123a:	21 f0       	breq	.+8      	; 0x1244 <__floatsisf+0x54>
    123c:	9e e8       	ldi	r25, 0x8E	; 142
    123e:	87 2f       	mov	r24, r23
    1240:	76 2f       	mov	r23, r22
    1242:	05 c0       	rjmp	.+10     	; 0x124e <__floatsisf+0x5e>
    1244:	66 23       	and	r22, r22
    1246:	71 f0       	breq	.+28     	; 0x1264 <__floatsisf+0x74>
    1248:	96 e8       	ldi	r25, 0x86	; 134
    124a:	86 2f       	mov	r24, r22
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	2a f0       	brmi	.+10     	; 0x125c <__floatsisf+0x6c>
    1252:	9a 95       	dec	r25
    1254:	66 0f       	add	r22, r22
    1256:	77 1f       	adc	r23, r23
    1258:	88 1f       	adc	r24, r24
    125a:	da f7       	brpl	.-10     	; 0x1252 <__floatsisf+0x62>
    125c:	88 0f       	add	r24, r24
    125e:	96 95       	lsr	r25
    1260:	87 95       	ror	r24
    1262:	97 f9       	bld	r25, 7
    1264:	08 95       	ret

00001266 <__fp_inf>:
    1266:	97 f9       	bld	r25, 7
    1268:	9f 67       	ori	r25, 0x7F	; 127
    126a:	80 e8       	ldi	r24, 0x80	; 128
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	08 95       	ret

00001272 <__fp_nan>:
    1272:	9f ef       	ldi	r25, 0xFF	; 255
    1274:	80 ec       	ldi	r24, 0xC0	; 192
    1276:	08 95       	ret

00001278 <__fp_pscA>:
    1278:	00 24       	eor	r0, r0
    127a:	0a 94       	dec	r0
    127c:	16 16       	cp	r1, r22
    127e:	17 06       	cpc	r1, r23
    1280:	18 06       	cpc	r1, r24
    1282:	09 06       	cpc	r0, r25
    1284:	08 95       	ret

00001286 <__fp_pscB>:
    1286:	00 24       	eor	r0, r0
    1288:	0a 94       	dec	r0
    128a:	12 16       	cp	r1, r18
    128c:	13 06       	cpc	r1, r19
    128e:	14 06       	cpc	r1, r20
    1290:	05 06       	cpc	r0, r21
    1292:	08 95       	ret

00001294 <__fp_round>:
    1294:	09 2e       	mov	r0, r25
    1296:	03 94       	inc	r0
    1298:	00 0c       	add	r0, r0
    129a:	11 f4       	brne	.+4      	; 0x12a0 <__fp_round+0xc>
    129c:	88 23       	and	r24, r24
    129e:	52 f0       	brmi	.+20     	; 0x12b4 <__fp_round+0x20>
    12a0:	bb 0f       	add	r27, r27
    12a2:	40 f4       	brcc	.+16     	; 0x12b4 <__fp_round+0x20>
    12a4:	bf 2b       	or	r27, r31
    12a6:	11 f4       	brne	.+4      	; 0x12ac <__fp_round+0x18>
    12a8:	60 ff       	sbrs	r22, 0
    12aa:	04 c0       	rjmp	.+8      	; 0x12b4 <__fp_round+0x20>
    12ac:	6f 5f       	subi	r22, 0xFF	; 255
    12ae:	7f 4f       	sbci	r23, 0xFF	; 255
    12b0:	8f 4f       	sbci	r24, 0xFF	; 255
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	08 95       	ret

000012b6 <__fp_split3>:
    12b6:	57 fd       	sbrc	r21, 7
    12b8:	90 58       	subi	r25, 0x80	; 128
    12ba:	44 0f       	add	r20, r20
    12bc:	55 1f       	adc	r21, r21
    12be:	59 f0       	breq	.+22     	; 0x12d6 <__fp_splitA+0x10>
    12c0:	5f 3f       	cpi	r21, 0xFF	; 255
    12c2:	71 f0       	breq	.+28     	; 0x12e0 <__fp_splitA+0x1a>
    12c4:	47 95       	ror	r20

000012c6 <__fp_splitA>:
    12c6:	88 0f       	add	r24, r24
    12c8:	97 fb       	bst	r25, 7
    12ca:	99 1f       	adc	r25, r25
    12cc:	61 f0       	breq	.+24     	; 0x12e6 <__fp_splitA+0x20>
    12ce:	9f 3f       	cpi	r25, 0xFF	; 255
    12d0:	79 f0       	breq	.+30     	; 0x12f0 <__fp_splitA+0x2a>
    12d2:	87 95       	ror	r24
    12d4:	08 95       	ret
    12d6:	12 16       	cp	r1, r18
    12d8:	13 06       	cpc	r1, r19
    12da:	14 06       	cpc	r1, r20
    12dc:	55 1f       	adc	r21, r21
    12de:	f2 cf       	rjmp	.-28     	; 0x12c4 <__fp_split3+0xe>
    12e0:	46 95       	lsr	r20
    12e2:	f1 df       	rcall	.-30     	; 0x12c6 <__fp_splitA>
    12e4:	08 c0       	rjmp	.+16     	; 0x12f6 <__fp_splitA+0x30>
    12e6:	16 16       	cp	r1, r22
    12e8:	17 06       	cpc	r1, r23
    12ea:	18 06       	cpc	r1, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	f1 cf       	rjmp	.-30     	; 0x12d2 <__fp_splitA+0xc>
    12f0:	86 95       	lsr	r24
    12f2:	71 05       	cpc	r23, r1
    12f4:	61 05       	cpc	r22, r1
    12f6:	08 94       	sec
    12f8:	08 95       	ret

000012fa <__fp_zero>:
    12fa:	e8 94       	clt

000012fc <__fp_szero>:
    12fc:	bb 27       	eor	r27, r27
    12fe:	66 27       	eor	r22, r22
    1300:	77 27       	eor	r23, r23
    1302:	cb 01       	movw	r24, r22
    1304:	97 f9       	bld	r25, 7
    1306:	08 95       	ret

00001308 <__mulsf3>:
    1308:	0b d0       	rcall	.+22     	; 0x1320 <__mulsf3x>
    130a:	c4 cf       	rjmp	.-120    	; 0x1294 <__fp_round>
    130c:	b5 df       	rcall	.-150    	; 0x1278 <__fp_pscA>
    130e:	28 f0       	brcs	.+10     	; 0x131a <__mulsf3+0x12>
    1310:	ba df       	rcall	.-140    	; 0x1286 <__fp_pscB>
    1312:	18 f0       	brcs	.+6      	; 0x131a <__mulsf3+0x12>
    1314:	95 23       	and	r25, r21
    1316:	09 f0       	breq	.+2      	; 0x131a <__mulsf3+0x12>
    1318:	a6 cf       	rjmp	.-180    	; 0x1266 <__fp_inf>
    131a:	ab cf       	rjmp	.-170    	; 0x1272 <__fp_nan>
    131c:	11 24       	eor	r1, r1
    131e:	ee cf       	rjmp	.-36     	; 0x12fc <__fp_szero>

00001320 <__mulsf3x>:
    1320:	ca df       	rcall	.-108    	; 0x12b6 <__fp_split3>
    1322:	a0 f3       	brcs	.-24     	; 0x130c <__mulsf3+0x4>

00001324 <__mulsf3_pse>:
    1324:	95 9f       	mul	r25, r21
    1326:	d1 f3       	breq	.-12     	; 0x131c <__mulsf3+0x14>
    1328:	95 0f       	add	r25, r21
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	55 1f       	adc	r21, r21
    132e:	62 9f       	mul	r22, r18
    1330:	f0 01       	movw	r30, r0
    1332:	72 9f       	mul	r23, r18
    1334:	bb 27       	eor	r27, r27
    1336:	f0 0d       	add	r31, r0
    1338:	b1 1d       	adc	r27, r1
    133a:	63 9f       	mul	r22, r19
    133c:	aa 27       	eor	r26, r26
    133e:	f0 0d       	add	r31, r0
    1340:	b1 1d       	adc	r27, r1
    1342:	aa 1f       	adc	r26, r26
    1344:	64 9f       	mul	r22, r20
    1346:	66 27       	eor	r22, r22
    1348:	b0 0d       	add	r27, r0
    134a:	a1 1d       	adc	r26, r1
    134c:	66 1f       	adc	r22, r22
    134e:	82 9f       	mul	r24, r18
    1350:	22 27       	eor	r18, r18
    1352:	b0 0d       	add	r27, r0
    1354:	a1 1d       	adc	r26, r1
    1356:	62 1f       	adc	r22, r18
    1358:	73 9f       	mul	r23, r19
    135a:	b0 0d       	add	r27, r0
    135c:	a1 1d       	adc	r26, r1
    135e:	62 1f       	adc	r22, r18
    1360:	83 9f       	mul	r24, r19
    1362:	a0 0d       	add	r26, r0
    1364:	61 1d       	adc	r22, r1
    1366:	22 1f       	adc	r18, r18
    1368:	74 9f       	mul	r23, r20
    136a:	33 27       	eor	r19, r19
    136c:	a0 0d       	add	r26, r0
    136e:	61 1d       	adc	r22, r1
    1370:	23 1f       	adc	r18, r19
    1372:	84 9f       	mul	r24, r20
    1374:	60 0d       	add	r22, r0
    1376:	21 1d       	adc	r18, r1
    1378:	82 2f       	mov	r24, r18
    137a:	76 2f       	mov	r23, r22
    137c:	6a 2f       	mov	r22, r26
    137e:	11 24       	eor	r1, r1
    1380:	9f 57       	subi	r25, 0x7F	; 127
    1382:	50 40       	sbci	r21, 0x00	; 0
    1384:	8a f0       	brmi	.+34     	; 0x13a8 <__mulsf3_pse+0x84>
    1386:	e1 f0       	breq	.+56     	; 0x13c0 <__mulsf3_pse+0x9c>
    1388:	88 23       	and	r24, r24
    138a:	4a f0       	brmi	.+18     	; 0x139e <__mulsf3_pse+0x7a>
    138c:	ee 0f       	add	r30, r30
    138e:	ff 1f       	adc	r31, r31
    1390:	bb 1f       	adc	r27, r27
    1392:	66 1f       	adc	r22, r22
    1394:	77 1f       	adc	r23, r23
    1396:	88 1f       	adc	r24, r24
    1398:	91 50       	subi	r25, 0x01	; 1
    139a:	50 40       	sbci	r21, 0x00	; 0
    139c:	a9 f7       	brne	.-22     	; 0x1388 <__mulsf3_pse+0x64>
    139e:	9e 3f       	cpi	r25, 0xFE	; 254
    13a0:	51 05       	cpc	r21, r1
    13a2:	70 f0       	brcs	.+28     	; 0x13c0 <__mulsf3_pse+0x9c>
    13a4:	60 cf       	rjmp	.-320    	; 0x1266 <__fp_inf>
    13a6:	aa cf       	rjmp	.-172    	; 0x12fc <__fp_szero>
    13a8:	5f 3f       	cpi	r21, 0xFF	; 255
    13aa:	ec f3       	brlt	.-6      	; 0x13a6 <__mulsf3_pse+0x82>
    13ac:	98 3e       	cpi	r25, 0xE8	; 232
    13ae:	dc f3       	brlt	.-10     	; 0x13a6 <__mulsf3_pse+0x82>
    13b0:	86 95       	lsr	r24
    13b2:	77 95       	ror	r23
    13b4:	67 95       	ror	r22
    13b6:	b7 95       	ror	r27
    13b8:	f7 95       	ror	r31
    13ba:	e7 95       	ror	r30
    13bc:	9f 5f       	subi	r25, 0xFF	; 255
    13be:	c1 f7       	brne	.-16     	; 0x13b0 <__mulsf3_pse+0x8c>
    13c0:	fe 2b       	or	r31, r30
    13c2:	88 0f       	add	r24, r24
    13c4:	91 1d       	adc	r25, r1
    13c6:	96 95       	lsr	r25
    13c8:	87 95       	ror	r24
    13ca:	97 f9       	bld	r25, 7
    13cc:	08 95       	ret

000013ce <_exit>:
    13ce:	f8 94       	cli

000013d0 <__stop_program>:
    13d0:	ff cf       	rjmp	.-2      	; 0x13d0 <__stop_program>
