
BCM_Send.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000013da  0000146e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000032  00800074  00800074  00001482  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00001484  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000035d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d78  00000000  00000000  00003718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000790  00000000  00000000  00005490  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000707  00000000  00000000  00005c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bcc  00000000  00000000  00006328  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000eed  00000000  00000000  00006ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c93  00000000  00000000  00007de1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_1>
       8:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_2>
       c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__vector_3>
      10:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__vector_4>
      14:	0c 94 0c 02 	jmp	0x418	; 0x418 <__vector_5>
      18:	0c 94 33 02 	jmp	0x466	; 0x466 <__vector_6>
      1c:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__vector_7>
      20:	0c 94 81 02 	jmp	0x502	; 0x502 <__vector_8>
      24:	0c 94 a8 02 	jmp	0x550	; 0x550 <__vector_9>
      28:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__vector_10>
      2c:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__vector_11>
      30:	0c 94 1d 03 	jmp	0x63a	; 0x63a <__vector_12>
      34:	0c 94 44 03 	jmp	0x688	; 0x688 <__vector_13>
      38:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__vector_14>
      3c:	0c 94 92 03 	jmp	0x724	; 0x724 <__vector_15>
      40:	0c 94 b9 03 	jmp	0x772	; 0x772 <__vector_16>
      44:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__vector_17>
      48:	0c 94 07 04 	jmp	0x80e	; 0x80e <__vector_18>
      4c:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__vector_19>
      50:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3a       	cpi	r26, 0xA6	; 166
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
 */
 #include "BCM_Send.h"
 volatile uint8_t u8_DATA='T';
int main(void)
{
	gpioPinDirection(GPIOB,BIT3,OUTPUT);
      92:	81 e0       	ldi	r24, 0x01	; 1
      94:	68 e0       	ldi	r22, 0x08	; 8
      96:	4f ef       	ldi	r20, 0xFF	; 255
      98:	0e 94 ae 00 	call	0x15c	; 0x15c <gpioPinDirection>
	Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
      9c:	87 e6       	ldi	r24, 0x67	; 103
      9e:	60 e0       	ldi	r22, 0x00	; 0
      a0:	40 e0       	ldi	r20, 0x00	; 0
      a2:	23 e0       	ldi	r18, 0x03	; 3
      a4:	00 e0       	ldi	r16, 0x00	; 0
      a6:	0e 94 ef 07 	call	0xfde	; 0xfde <Uart_Init>
	Enable_communication_interrupt();
      aa:	0e 94 51 08 	call	0x10a2	; 0x10a2 <Enable_communication_interrupt>
	SPI_Init();
      ae:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <SPI_Init>
	Led_On(LED_0);
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	0e 94 9d 04 	call	0x93a	; 0x93a <Led_On>
	//Uart_tryansmitfirstbyte(data_signature);
  //u8_DATA=UDR;
	SPDR=u8_DATA;
      b8:	80 91 60 00 	lds	r24, 0x0060
      bc:	8f b9       	out	0x0f, r24	; 15
      be:	ff cf       	rjmp	.-2      	; 0xbe <main+0x2c>

000000c0 <gpioPortDirection>:
 * @param value: set the port value and takes the following values
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */

switch (u8_port)	
      c0:	81 30       	cpi	r24, 0x01	; 1
      c2:	49 f0       	breq	.+18     	; 0xd6 <gpioPortDirection+0x16>
      c4:	81 30       	cpi	r24, 0x01	; 1
      c6:	28 f0       	brcs	.+10     	; 0xd2 <gpioPortDirection+0x12>
      c8:	82 30       	cpi	r24, 0x02	; 2
      ca:	39 f0       	breq	.+14     	; 0xda <gpioPortDirection+0x1a>
      cc:	83 30       	cpi	r24, 0x03	; 3
      ce:	41 f4       	brne	.+16     	; 0xe0 <gpioPortDirection+0x20>
      d0:	06 c0       	rjmp	.+12     	; 0xde <gpioPortDirection+0x1e>
{	case GPIOA:
	PORTA_DIR = u8_direction;
      d2:	6a bb       	out	0x1a, r22	; 26
	break;
      d4:	08 95       	ret
	case GPIOB:
	PORTB_DIR = u8_direction;
      d6:	67 bb       	out	0x17, r22	; 23
	break;
      d8:	08 95       	ret
	case GPIOC:
	PORTC_DIR = u8_direction;
      da:	64 bb       	out	0x14, r22	; 20
	break;
      dc:	08 95       	ret
	case GPIOD:
	PORTD_DIR = u8_direction;
      de:	61 bb       	out	0x11, r22	; 17
      e0:	08 95       	ret

000000e2 <gpioPortWrite>:
}

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	
switch (u8_port)	
      e2:	81 30       	cpi	r24, 0x01	; 1
      e4:	49 f0       	breq	.+18     	; 0xf8 <gpioPortWrite+0x16>
      e6:	81 30       	cpi	r24, 0x01	; 1
      e8:	28 f0       	brcs	.+10     	; 0xf4 <gpioPortWrite+0x12>
      ea:	82 30       	cpi	r24, 0x02	; 2
      ec:	39 f0       	breq	.+14     	; 0xfc <gpioPortWrite+0x1a>
      ee:	83 30       	cpi	r24, 0x03	; 3
      f0:	41 f4       	brne	.+16     	; 0x102 <gpioPortWrite+0x20>
      f2:	06 c0       	rjmp	.+12     	; 0x100 <gpioPortWrite+0x1e>
{	case GPIOA:
	PORTA_DATA = u8_value;
      f4:	6b bb       	out	0x1b, r22	; 27
	break;
      f6:	08 95       	ret
	case GPIOB:
	PORTB_DATA = u8_value;
      f8:	68 bb       	out	0x18, r22	; 24
	break;
      fa:	08 95       	ret
	case GPIOC:
	PORTC_DATA = u8_value;
      fc:	65 bb       	out	0x15, r22	; 21
	break;
      fe:	08 95       	ret
	case GPIOD:
	PORTD_DATA = u8_value;
     100:	62 bb       	out	0x12, r22	; 18
     102:	08 95       	ret

00000104 <gpioPortToggle>:
	
}
void gpioPortToggle(uint8_t u8_port)
{
	
switch (u8_port)	
     104:	81 30       	cpi	r24, 0x01	; 1
     106:	59 f0       	breq	.+22     	; 0x11e <gpioPortToggle+0x1a>
     108:	81 30       	cpi	r24, 0x01	; 1
     10a:	28 f0       	brcs	.+10     	; 0x116 <gpioPortToggle+0x12>
     10c:	82 30       	cpi	r24, 0x02	; 2
     10e:	59 f0       	breq	.+22     	; 0x126 <gpioPortToggle+0x22>
     110:	83 30       	cpi	r24, 0x03	; 3
     112:	81 f4       	brne	.+32     	; 0x134 <gpioPortToggle+0x30>
     114:	0c c0       	rjmp	.+24     	; 0x12e <gpioPortToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^= HIGH;
     116:	8b b3       	in	r24, 0x1b	; 27
     118:	80 95       	com	r24
     11a:	8b bb       	out	0x1b, r24	; 27
	break;
     11c:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^= HIGH;
     11e:	88 b3       	in	r24, 0x18	; 24
     120:	80 95       	com	r24
     122:	88 bb       	out	0x18, r24	; 24
	break;
     124:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^= HIGH;
     126:	85 b3       	in	r24, 0x15	; 21
     128:	80 95       	com	r24
     12a:	85 bb       	out	0x15, r24	; 21
	break;
     12c:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^= HIGH;
     12e:	82 b3       	in	r24, 0x12	; 18
     130:	80 95       	com	r24
     132:	82 bb       	out	0x12, r24	; 18
     134:	08 95       	ret

00000136 <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
	
switch (u8_port)	
     136:	81 30       	cpi	r24, 0x01	; 1
     138:	49 f0       	breq	.+18     	; 0x14c <gpioPortRead+0x16>
     13a:	81 30       	cpi	r24, 0x01	; 1
     13c:	28 f0       	brcs	.+10     	; 0x148 <gpioPortRead+0x12>
     13e:	82 30       	cpi	r24, 0x02	; 2
     140:	39 f0       	breq	.+14     	; 0x150 <gpioPortRead+0x1a>
     142:	83 30       	cpi	r24, 0x03	; 3
     144:	49 f4       	brne	.+18     	; 0x158 <gpioPortRead+0x22>
     146:	06 c0       	rjmp	.+12     	; 0x154 <gpioPortRead+0x1e>
{	case GPIOA:
	U8_ret_Port_data=PORTA_DATA & HIGH;
     148:	8b b3       	in	r24, 0x1b	; 27
	break;
     14a:	08 95       	ret
	case GPIOB:
	U8_ret_Port_data=PORTB_DATA & HIGH;
     14c:	88 b3       	in	r24, 0x18	; 24
	break;
     14e:	08 95       	ret
	case GPIOC:
	U8_ret_Port_data=PORTC_DATA & HIGH;
     150:	85 b3       	in	r24, 0x15	; 21
	break;
     152:	08 95       	ret
	case GPIOD:
	U8_ret_Port_data=PORTD_DATA & HIGH;
     154:	82 b3       	in	r24, 0x12	; 18
	break;
     156:	08 95       	ret
	
}

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
     158:	80 e0       	ldi	r24, 0x00	; 0
	break;
	
}

return 	U8_ret_Port_data;
}
     15a:	08 95       	ret

0000015c <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
switch(u8_direction){
     15c:	44 23       	and	r20, r20
     15e:	19 f0       	breq	.+6      	; 0x166 <gpioPinDirection+0xa>
     160:	4f 3f       	cpi	r20, 0xFF	; 255
     162:	d1 f5       	brne	.+116    	; 0x1d8 <gpioPinDirection+0x7c>
     164:	21 c0       	rjmp	.+66     	; 0x1a8 <gpioPinDirection+0x4c>
case INPUT:
{
switch (u8_port)	
     166:	81 30       	cpi	r24, 0x01	; 1
     168:	69 f0       	breq	.+26     	; 0x184 <gpioPinDirection+0x28>
     16a:	81 30       	cpi	r24, 0x01	; 1
     16c:	28 f0       	brcs	.+10     	; 0x178 <gpioPinDirection+0x1c>
     16e:	82 30       	cpi	r24, 0x02	; 2
     170:	79 f0       	breq	.+30     	; 0x190 <gpioPinDirection+0x34>
     172:	83 30       	cpi	r24, 0x03	; 3
     174:	c9 f4       	brne	.+50     	; 0x1a8 <gpioPinDirection+0x4c>
     176:	12 c0       	rjmp	.+36     	; 0x19c <gpioPinDirection+0x40>
{	case GPIOA:
	PORTA_DIR &=(~u8_pins);   // 0b01111111
     178:	8a b3       	in	r24, 0x1a	; 26
     17a:	96 2f       	mov	r25, r22
     17c:	90 95       	com	r25
     17e:	89 23       	and	r24, r25
     180:	8a bb       	out	0x1a, r24	; 26
     182:	1b c0       	rjmp	.+54     	; 0x1ba <gpioPinDirection+0x5e>
	break;
	case GPIOB:
	PORTB_DIR &=(~u8_pins);
     184:	87 b3       	in	r24, 0x17	; 23
     186:	96 2f       	mov	r25, r22
     188:	90 95       	com	r25
     18a:	89 23       	and	r24, r25
     18c:	87 bb       	out	0x17, r24	; 23
     18e:	19 c0       	rjmp	.+50     	; 0x1c2 <gpioPinDirection+0x66>
	break;
	case GPIOC:
	PORTC_DIR &=(~u8_pins);
     190:	84 b3       	in	r24, 0x14	; 20
     192:	96 2f       	mov	r25, r22
     194:	90 95       	com	r25
     196:	89 23       	and	r24, r25
     198:	84 bb       	out	0x14, r24	; 20
     19a:	17 c0       	rjmp	.+46     	; 0x1ca <gpioPinDirection+0x6e>
	break;
	case GPIOD:
	PORTD_DIR &=(~u8_pins);
     19c:	81 b3       	in	r24, 0x11	; 17
     19e:	96 2f       	mov	r25, r22
     1a0:	90 95       	com	r25
     1a2:	89 23       	and	r24, r25
     1a4:	81 bb       	out	0x11, r24	; 17
     1a6:	15 c0       	rjmp	.+42     	; 0x1d2 <gpioPinDirection+0x76>
	break;
	
}
}
case OUTPUT:{
switch (u8_port)	
     1a8:	81 30       	cpi	r24, 0x01	; 1
     1aa:	59 f0       	breq	.+22     	; 0x1c2 <gpioPinDirection+0x66>
     1ac:	81 30       	cpi	r24, 0x01	; 1
     1ae:	28 f0       	brcs	.+10     	; 0x1ba <gpioPinDirection+0x5e>
     1b0:	82 30       	cpi	r24, 0x02	; 2
     1b2:	59 f0       	breq	.+22     	; 0x1ca <gpioPinDirection+0x6e>
     1b4:	83 30       	cpi	r24, 0x03	; 3
     1b6:	81 f4       	brne	.+32     	; 0x1d8 <gpioPinDirection+0x7c>
     1b8:	0c c0       	rjmp	.+24     	; 0x1d2 <gpioPinDirection+0x76>
{	case GPIOA:
	PORTA_DIR |=(u8_pins);
     1ba:	8a b3       	in	r24, 0x1a	; 26
     1bc:	68 2b       	or	r22, r24
     1be:	6a bb       	out	0x1a, r22	; 26
	break;
     1c0:	08 95       	ret
	case GPIOB:
	PORTB_DIR |=(u8_pins);
     1c2:	87 b3       	in	r24, 0x17	; 23
     1c4:	68 2b       	or	r22, r24
     1c6:	67 bb       	out	0x17, r22	; 23
	break;
     1c8:	08 95       	ret
	case GPIOC:
	PORTC_DIR |=(u8_pins);
     1ca:	84 b3       	in	r24, 0x14	; 20
     1cc:	68 2b       	or	r22, r24
     1ce:	64 bb       	out	0x14, r22	; 20
	break;
     1d0:	08 95       	ret
	case GPIOD:
	PORTD_DIR |=(u8_pins);
     1d2:	81 b3       	in	r24, 0x11	; 17
     1d4:	68 2b       	or	r22, r24
     1d6:	61 bb       	out	0x11, r22	; 17
     1d8:	08 95       	ret

000001da <gpioPinWrite>:
	
	
}

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{switch(u8_value){
     1da:	44 23       	and	r20, r20
     1dc:	19 f0       	breq	.+6      	; 0x1e4 <gpioPinWrite+0xa>
     1de:	4f 3f       	cpi	r20, 0xFF	; 255
     1e0:	b1 f5       	brne	.+108    	; 0x24e <gpioPinWrite+0x74>
     1e2:	1d c0       	rjmp	.+58     	; 0x21e <gpioPinWrite+0x44>
case LOW:
{
switch (u8_port)	
     1e4:	81 30       	cpi	r24, 0x01	; 1
     1e6:	61 f0       	breq	.+24     	; 0x200 <gpioPinWrite+0x26>
     1e8:	81 30       	cpi	r24, 0x01	; 1
     1ea:	28 f0       	brcs	.+10     	; 0x1f6 <gpioPinWrite+0x1c>
     1ec:	82 30       	cpi	r24, 0x02	; 2
     1ee:	69 f0       	breq	.+26     	; 0x20a <gpioPinWrite+0x30>
     1f0:	83 30       	cpi	r24, 0x03	; 3
     1f2:	69 f5       	brne	.+90     	; 0x24e <gpioPinWrite+0x74>
     1f4:	0f c0       	rjmp	.+30     	; 0x214 <gpioPinWrite+0x3a>
{	case GPIOA:
	PORTA_DATA &= ~(u8_pins);   // 0b01111111
     1f6:	8b b3       	in	r24, 0x1b	; 27
     1f8:	60 95       	com	r22
     1fa:	68 23       	and	r22, r24
     1fc:	6b bb       	out	0x1b, r22	; 27
	break;
     1fe:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(u8_pins);
     200:	88 b3       	in	r24, 0x18	; 24
     202:	60 95       	com	r22
     204:	68 23       	and	r22, r24
     206:	68 bb       	out	0x18, r22	; 24
	break;
     208:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(u8_pins);
     20a:	85 b3       	in	r24, 0x15	; 21
     20c:	60 95       	com	r22
     20e:	68 23       	and	r22, r24
     210:	65 bb       	out	0x15, r22	; 21
	break;
     212:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(u8_pins);
     214:	82 b3       	in	r24, 0x12	; 18
     216:	60 95       	com	r22
     218:	68 23       	and	r22, r24
     21a:	62 bb       	out	0x12, r22	; 18
	break;
     21c:	08 95       	ret
	
}
break;
}
case HIGH:{
switch (u8_port)	
     21e:	81 30       	cpi	r24, 0x01	; 1
     220:	59 f0       	breq	.+22     	; 0x238 <gpioPinWrite+0x5e>
     222:	81 30       	cpi	r24, 0x01	; 1
     224:	28 f0       	brcs	.+10     	; 0x230 <gpioPinWrite+0x56>
     226:	82 30       	cpi	r24, 0x02	; 2
     228:	59 f0       	breq	.+22     	; 0x240 <gpioPinWrite+0x66>
     22a:	83 30       	cpi	r24, 0x03	; 3
     22c:	81 f4       	brne	.+32     	; 0x24e <gpioPinWrite+0x74>
     22e:	0c c0       	rjmp	.+24     	; 0x248 <gpioPinWrite+0x6e>
{	case GPIOA:
	PORTA_DATA |=(u8_pins);
     230:	8b b3       	in	r24, 0x1b	; 27
     232:	68 2b       	or	r22, r24
     234:	6b bb       	out	0x1b, r22	; 27
	break;
     236:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(u8_pins);
     238:	88 b3       	in	r24, 0x18	; 24
     23a:	68 2b       	or	r22, r24
     23c:	68 bb       	out	0x18, r22	; 24
	break;
     23e:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(u8_pins);
     240:	85 b3       	in	r24, 0x15	; 21
     242:	68 2b       	or	r22, r24
     244:	65 bb       	out	0x15, r22	; 21
	break;
     246:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(u8_pins);
     248:	82 b3       	in	r24, 0x12	; 18
     24a:	68 2b       	or	r22, r24
     24c:	62 bb       	out	0x12, r22	; 18
     24e:	08 95       	ret

00000250 <gpioPinToggle>:
}

}
void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
switch (u8_port)	
     250:	81 30       	cpi	r24, 0x01	; 1
     252:	59 f0       	breq	.+22     	; 0x26a <gpioPinToggle+0x1a>
     254:	81 30       	cpi	r24, 0x01	; 1
     256:	28 f0       	brcs	.+10     	; 0x262 <gpioPinToggle+0x12>
     258:	82 30       	cpi	r24, 0x02	; 2
     25a:	59 f0       	breq	.+22     	; 0x272 <gpioPinToggle+0x22>
     25c:	83 30       	cpi	r24, 0x03	; 3
     25e:	81 f4       	brne	.+32     	; 0x280 <gpioPinToggle+0x30>
     260:	0c c0       	rjmp	.+24     	; 0x27a <gpioPinToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^=(u8_pins);
     262:	8b b3       	in	r24, 0x1b	; 27
     264:	68 27       	eor	r22, r24
     266:	6b bb       	out	0x1b, r22	; 27
	break;
     268:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^=(u8_pins);
     26a:	88 b3       	in	r24, 0x18	; 24
     26c:	68 27       	eor	r22, r24
     26e:	68 bb       	out	0x18, r22	; 24
	break;
     270:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^=(u8_pins);
     272:	85 b3       	in	r24, 0x15	; 21
     274:	68 27       	eor	r22, r24
     276:	65 bb       	out	0x15, r22	; 21
	break;
     278:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^=(u8_pins);
     27a:	82 b3       	in	r24, 0x12	; 18
     27c:	68 27       	eor	r22, r24
     27e:	62 bb       	out	0x12, r22	; 18
     280:	08 95       	ret

00000282 <gpioPinRead>:
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
switch (u8_port)	
     282:	81 30       	cpi	r24, 0x01	; 1
     284:	51 f0       	breq	.+20     	; 0x29a <gpioPinRead+0x18>
     286:	81 30       	cpi	r24, 0x01	; 1
     288:	28 f0       	brcs	.+10     	; 0x294 <gpioPinRead+0x12>
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	49 f0       	breq	.+18     	; 0x2a0 <gpioPinRead+0x1e>
     28e:	83 30       	cpi	r24, 0x03	; 3
     290:	69 f4       	brne	.+26     	; 0x2ac <gpioPinRead+0x2a>
     292:	09 c0       	rjmp	.+18     	; 0x2a6 <gpioPinRead+0x24>
{	case GPIOA:
	U8_ret_BIT_data=(PORTA_PIN & u8_pin);
     294:	89 b3       	in	r24, 0x19	; 25
     296:	68 23       	and	r22, r24
	break;
     298:	0a c0       	rjmp	.+20     	; 0x2ae <gpioPinRead+0x2c>
	case GPIOB:
	U8_ret_BIT_data=(PORTB_PIN & u8_pin);
     29a:	86 b3       	in	r24, 0x16	; 22
     29c:	68 23       	and	r22, r24
	break;
     29e:	07 c0       	rjmp	.+14     	; 0x2ae <gpioPinRead+0x2c>
	case GPIOC:
	U8_ret_BIT_data=(PORTC_PIN & u8_pin);
     2a0:	83 b3       	in	r24, 0x13	; 19
     2a2:	68 23       	and	r22, r24
	break;
     2a4:	04 c0       	rjmp	.+8      	; 0x2ae <gpioPinRead+0x2c>
	case GPIOD:
	U8_ret_BIT_data=(PORTD_PIN & u8_pin);
     2a6:	80 b3       	in	r24, 0x10	; 16
     2a8:	68 23       	and	r22, r24
	break;
     2aa:	01 c0       	rjmp	.+2      	; 0x2ae <gpioPinRead+0x2c>
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
     2ac:	60 e0       	ldi	r22, 0x00	; 0
}
	
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	66 23       	and	r22, r22
     2b2:	09 f4       	brne	.+2      	; 0x2b6 <gpioPinRead+0x34>
     2b4:	80 e0       	ldi	r24, 0x00	; 0
if(U8_ret_BIT_data > 0)
{
	U8_ret_BIT_data = 1;
}
return U8_ret_BIT_data;
     2b6:	08 95       	ret

000002b8 <G_interrupt_Enable>:
ptr_to_Fun SPM_RDY;

void G_interrupt_Enable(void)
{
//	sei();
 SREG |=(0x80);
     2b8:	8f b7       	in	r24, 0x3f	; 63
     2ba:	80 68       	ori	r24, 0x80	; 128
     2bc:	8f bf       	out	0x3f, r24	; 63
}
     2be:	08 95       	ret

000002c0 <EX_interrupt_enable2>:
void EX_interrupt_enable2(void)
{
gpioPinDirection(GPIOB,BIT2,LOW);
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	64 e0       	ldi	r22, 0x04	; 4
     2c4:	40 e0       	ldi	r20, 0x00	; 0
     2c6:	0e 94 ae 00 	call	0x15c	; 0x15c <gpioPinDirection>
SET_BIT(GICR,INT2);
     2ca:	8b b7       	in	r24, 0x3b	; 59
     2cc:	80 62       	ori	r24, 0x20	; 32
     2ce:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCSR,6);
     2d0:	84 b7       	in	r24, 0x34	; 52
     2d2:	80 64       	ori	r24, 0x40	; 64
     2d4:	84 bf       	out	0x34, r24	; 52
}
     2d6:	08 95       	ret

000002d8 <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     2d8:	8f b7       	in	r24, 0x3f	; 63
     2da:	8f 77       	andi	r24, 0x7F	; 127
     2dc:	8f bf       	out	0x3f, r24	; 63
}
     2de:	08 95       	ret

000002e0 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     2e0:	1f 92       	push	r1
     2e2:	0f 92       	push	r0
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	0f 92       	push	r0
     2e8:	11 24       	eor	r1, r1
     2ea:	2f 93       	push	r18
     2ec:	3f 93       	push	r19
     2ee:	4f 93       	push	r20
     2f0:	5f 93       	push	r21
     2f2:	6f 93       	push	r22
     2f4:	7f 93       	push	r23
     2f6:	8f 93       	push	r24
     2f8:	9f 93       	push	r25
     2fa:	af 93       	push	r26
     2fc:	bf 93       	push	r27
     2fe:	ef 93       	push	r30
     300:	ff 93       	push	r31
  INT0_external_interrupt();
     302:	e0 91 90 00 	lds	r30, 0x0090
     306:	f0 91 91 00 	lds	r31, 0x0091
     30a:	09 95       	icall
}
     30c:	ff 91       	pop	r31
     30e:	ef 91       	pop	r30
     310:	bf 91       	pop	r27
     312:	af 91       	pop	r26
     314:	9f 91       	pop	r25
     316:	8f 91       	pop	r24
     318:	7f 91       	pop	r23
     31a:	6f 91       	pop	r22
     31c:	5f 91       	pop	r21
     31e:	4f 91       	pop	r20
     320:	3f 91       	pop	r19
     322:	2f 91       	pop	r18
     324:	0f 90       	pop	r0
     326:	0f be       	out	0x3f, r0	; 63
     328:	0f 90       	pop	r0
     32a:	1f 90       	pop	r1
     32c:	18 95       	reti

0000032e <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
     32e:	1f 92       	push	r1
     330:	0f 92       	push	r0
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	0f 92       	push	r0
     336:	11 24       	eor	r1, r1
     338:	2f 93       	push	r18
     33a:	3f 93       	push	r19
     33c:	4f 93       	push	r20
     33e:	5f 93       	push	r21
     340:	6f 93       	push	r22
     342:	7f 93       	push	r23
     344:	8f 93       	push	r24
     346:	9f 93       	push	r25
     348:	af 93       	push	r26
     34a:	bf 93       	push	r27
     34c:	ef 93       	push	r30
     34e:	ff 93       	push	r31
  INT1_external_interrupt();
     350:	e0 91 96 00 	lds	r30, 0x0096
     354:	f0 91 97 00 	lds	r31, 0x0097
     358:	09 95       	icall
}
     35a:	ff 91       	pop	r31
     35c:	ef 91       	pop	r30
     35e:	bf 91       	pop	r27
     360:	af 91       	pop	r26
     362:	9f 91       	pop	r25
     364:	8f 91       	pop	r24
     366:	7f 91       	pop	r23
     368:	6f 91       	pop	r22
     36a:	5f 91       	pop	r21
     36c:	4f 91       	pop	r20
     36e:	3f 91       	pop	r19
     370:	2f 91       	pop	r18
     372:	0f 90       	pop	r0
     374:	0f be       	out	0x3f, r0	; 63
     376:	0f 90       	pop	r0
     378:	1f 90       	pop	r1
     37a:	18 95       	reti

0000037c <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     37c:	1f 92       	push	r1
     37e:	0f 92       	push	r0
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	0f 92       	push	r0
     384:	11 24       	eor	r1, r1
     386:	2f 93       	push	r18
     388:	3f 93       	push	r19
     38a:	4f 93       	push	r20
     38c:	5f 93       	push	r21
     38e:	6f 93       	push	r22
     390:	7f 93       	push	r23
     392:	8f 93       	push	r24
     394:	9f 93       	push	r25
     396:	af 93       	push	r26
     398:	bf 93       	push	r27
     39a:	ef 93       	push	r30
     39c:	ff 93       	push	r31
  INT2_external_interrupt();
     39e:	e0 91 86 00 	lds	r30, 0x0086
     3a2:	f0 91 87 00 	lds	r31, 0x0087
     3a6:	09 95       	icall
}
     3a8:	ff 91       	pop	r31
     3aa:	ef 91       	pop	r30
     3ac:	bf 91       	pop	r27
     3ae:	af 91       	pop	r26
     3b0:	9f 91       	pop	r25
     3b2:	8f 91       	pop	r24
     3b4:	7f 91       	pop	r23
     3b6:	6f 91       	pop	r22
     3b8:	5f 91       	pop	r21
     3ba:	4f 91       	pop	r20
     3bc:	3f 91       	pop	r19
     3be:	2f 91       	pop	r18
     3c0:	0f 90       	pop	r0
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	0f 90       	pop	r0
     3c6:	1f 90       	pop	r1
     3c8:	18 95       	reti

000003ca <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     3ca:	1f 92       	push	r1
     3cc:	0f 92       	push	r0
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	0f 92       	push	r0
     3d2:	11 24       	eor	r1, r1
     3d4:	2f 93       	push	r18
     3d6:	3f 93       	push	r19
     3d8:	4f 93       	push	r20
     3da:	5f 93       	push	r21
     3dc:	6f 93       	push	r22
     3de:	7f 93       	push	r23
     3e0:	8f 93       	push	r24
     3e2:	9f 93       	push	r25
     3e4:	af 93       	push	r26
     3e6:	bf 93       	push	r27
     3e8:	ef 93       	push	r30
     3ea:	ff 93       	push	r31
TIMER2COMP();
     3ec:	e0 91 69 00 	lds	r30, 0x0069
     3f0:	f0 91 6a 00 	lds	r31, 0x006A
     3f4:	09 95       	icall
}
     3f6:	ff 91       	pop	r31
     3f8:	ef 91       	pop	r30
     3fa:	bf 91       	pop	r27
     3fc:	af 91       	pop	r26
     3fe:	9f 91       	pop	r25
     400:	8f 91       	pop	r24
     402:	7f 91       	pop	r23
     404:	6f 91       	pop	r22
     406:	5f 91       	pop	r21
     408:	4f 91       	pop	r20
     40a:	3f 91       	pop	r19
     40c:	2f 91       	pop	r18
     40e:	0f 90       	pop	r0
     410:	0f be       	out	0x3f, r0	; 63
     412:	0f 90       	pop	r0
     414:	1f 90       	pop	r1
     416:	18 95       	reti

00000418 <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     418:	1f 92       	push	r1
     41a:	0f 92       	push	r0
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	0f 92       	push	r0
     420:	11 24       	eor	r1, r1
     422:	2f 93       	push	r18
     424:	3f 93       	push	r19
     426:	4f 93       	push	r20
     428:	5f 93       	push	r21
     42a:	6f 93       	push	r22
     42c:	7f 93       	push	r23
     42e:	8f 93       	push	r24
     430:	9f 93       	push	r25
     432:	af 93       	push	r26
     434:	bf 93       	push	r27
     436:	ef 93       	push	r30
     438:	ff 93       	push	r31
  TIMER2OVF();
     43a:	e0 91 67 00 	lds	r30, 0x0067
     43e:	f0 91 68 00 	lds	r31, 0x0068
     442:	09 95       	icall
}
     444:	ff 91       	pop	r31
     446:	ef 91       	pop	r30
     448:	bf 91       	pop	r27
     44a:	af 91       	pop	r26
     44c:	9f 91       	pop	r25
     44e:	8f 91       	pop	r24
     450:	7f 91       	pop	r23
     452:	6f 91       	pop	r22
     454:	5f 91       	pop	r21
     456:	4f 91       	pop	r20
     458:	3f 91       	pop	r19
     45a:	2f 91       	pop	r18
     45c:	0f 90       	pop	r0
     45e:	0f be       	out	0x3f, r0	; 63
     460:	0f 90       	pop	r0
     462:	1f 90       	pop	r1
     464:	18 95       	reti

00000466 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     466:	1f 92       	push	r1
     468:	0f 92       	push	r0
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	0f 92       	push	r0
     46e:	11 24       	eor	r1, r1
     470:	2f 93       	push	r18
     472:	3f 93       	push	r19
     474:	4f 93       	push	r20
     476:	5f 93       	push	r21
     478:	6f 93       	push	r22
     47a:	7f 93       	push	r23
     47c:	8f 93       	push	r24
     47e:	9f 93       	push	r25
     480:	af 93       	push	r26
     482:	bf 93       	push	r27
     484:	ef 93       	push	r30
     486:	ff 93       	push	r31
  TIMER1CAPT();
     488:	e0 91 98 00 	lds	r30, 0x0098
     48c:	f0 91 99 00 	lds	r31, 0x0099
     490:	09 95       	icall
}
     492:	ff 91       	pop	r31
     494:	ef 91       	pop	r30
     496:	bf 91       	pop	r27
     498:	af 91       	pop	r26
     49a:	9f 91       	pop	r25
     49c:	8f 91       	pop	r24
     49e:	7f 91       	pop	r23
     4a0:	6f 91       	pop	r22
     4a2:	5f 91       	pop	r21
     4a4:	4f 91       	pop	r20
     4a6:	3f 91       	pop	r19
     4a8:	2f 91       	pop	r18
     4aa:	0f 90       	pop	r0
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	0f 90       	pop	r0
     4b0:	1f 90       	pop	r1
     4b2:	18 95       	reti

000004b4 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     4b4:	1f 92       	push	r1
     4b6:	0f 92       	push	r0
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	0f 92       	push	r0
     4bc:	11 24       	eor	r1, r1
     4be:	2f 93       	push	r18
     4c0:	3f 93       	push	r19
     4c2:	4f 93       	push	r20
     4c4:	5f 93       	push	r21
     4c6:	6f 93       	push	r22
     4c8:	7f 93       	push	r23
     4ca:	8f 93       	push	r24
     4cc:	9f 93       	push	r25
     4ce:	af 93       	push	r26
     4d0:	bf 93       	push	r27
     4d2:	ef 93       	push	r30
     4d4:	ff 93       	push	r31
TIMER1COMPA();
     4d6:	e0 91 84 00 	lds	r30, 0x0084
     4da:	f0 91 85 00 	lds	r31, 0x0085
     4de:	09 95       	icall
}
     4e0:	ff 91       	pop	r31
     4e2:	ef 91       	pop	r30
     4e4:	bf 91       	pop	r27
     4e6:	af 91       	pop	r26
     4e8:	9f 91       	pop	r25
     4ea:	8f 91       	pop	r24
     4ec:	7f 91       	pop	r23
     4ee:	6f 91       	pop	r22
     4f0:	5f 91       	pop	r21
     4f2:	4f 91       	pop	r20
     4f4:	3f 91       	pop	r19
     4f6:	2f 91       	pop	r18
     4f8:	0f 90       	pop	r0
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	0f 90       	pop	r0
     4fe:	1f 90       	pop	r1
     500:	18 95       	reti

00000502 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
     502:	1f 92       	push	r1
     504:	0f 92       	push	r0
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	0f 92       	push	r0
     50a:	11 24       	eor	r1, r1
     50c:	2f 93       	push	r18
     50e:	3f 93       	push	r19
     510:	4f 93       	push	r20
     512:	5f 93       	push	r21
     514:	6f 93       	push	r22
     516:	7f 93       	push	r23
     518:	8f 93       	push	r24
     51a:	9f 93       	push	r25
     51c:	af 93       	push	r26
     51e:	bf 93       	push	r27
     520:	ef 93       	push	r30
     522:	ff 93       	push	r31
  TIMER1COMPB();
     524:	e0 91 82 00 	lds	r30, 0x0082
     528:	f0 91 83 00 	lds	r31, 0x0083
     52c:	09 95       	icall
}
     52e:	ff 91       	pop	r31
     530:	ef 91       	pop	r30
     532:	bf 91       	pop	r27
     534:	af 91       	pop	r26
     536:	9f 91       	pop	r25
     538:	8f 91       	pop	r24
     53a:	7f 91       	pop	r23
     53c:	6f 91       	pop	r22
     53e:	5f 91       	pop	r21
     540:	4f 91       	pop	r20
     542:	3f 91       	pop	r19
     544:	2f 91       	pop	r18
     546:	0f 90       	pop	r0
     548:	0f be       	out	0x3f, r0	; 63
     54a:	0f 90       	pop	r0
     54c:	1f 90       	pop	r1
     54e:	18 95       	reti

00000550 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     550:	1f 92       	push	r1
     552:	0f 92       	push	r0
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	0f 92       	push	r0
     558:	11 24       	eor	r1, r1
     55a:	2f 93       	push	r18
     55c:	3f 93       	push	r19
     55e:	4f 93       	push	r20
     560:	5f 93       	push	r21
     562:	6f 93       	push	r22
     564:	7f 93       	push	r23
     566:	8f 93       	push	r24
     568:	9f 93       	push	r25
     56a:	af 93       	push	r26
     56c:	bf 93       	push	r27
     56e:	ef 93       	push	r30
     570:	ff 93       	push	r31
  TIMER1OVF();
     572:	e0 91 9a 00 	lds	r30, 0x009A
     576:	f0 91 9b 00 	lds	r31, 0x009B
     57a:	09 95       	icall
}
     57c:	ff 91       	pop	r31
     57e:	ef 91       	pop	r30
     580:	bf 91       	pop	r27
     582:	af 91       	pop	r26
     584:	9f 91       	pop	r25
     586:	8f 91       	pop	r24
     588:	7f 91       	pop	r23
     58a:	6f 91       	pop	r22
     58c:	5f 91       	pop	r21
     58e:	4f 91       	pop	r20
     590:	3f 91       	pop	r19
     592:	2f 91       	pop	r18
     594:	0f 90       	pop	r0
     596:	0f be       	out	0x3f, r0	; 63
     598:	0f 90       	pop	r0
     59a:	1f 90       	pop	r1
     59c:	18 95       	reti

0000059e <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     59e:	1f 92       	push	r1
     5a0:	0f 92       	push	r0
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	0f 92       	push	r0
     5a6:	11 24       	eor	r1, r1
     5a8:	2f 93       	push	r18
     5aa:	3f 93       	push	r19
     5ac:	4f 93       	push	r20
     5ae:	5f 93       	push	r21
     5b0:	6f 93       	push	r22
     5b2:	7f 93       	push	r23
     5b4:	8f 93       	push	r24
     5b6:	9f 93       	push	r25
     5b8:	af 93       	push	r26
     5ba:	bf 93       	push	r27
     5bc:	ef 93       	push	r30
     5be:	ff 93       	push	r31

  TIMER0COMP();
     5c0:	e0 91 65 00 	lds	r30, 0x0065
     5c4:	f0 91 66 00 	lds	r31, 0x0066
     5c8:	09 95       	icall
}
     5ca:	ff 91       	pop	r31
     5cc:	ef 91       	pop	r30
     5ce:	bf 91       	pop	r27
     5d0:	af 91       	pop	r26
     5d2:	9f 91       	pop	r25
     5d4:	8f 91       	pop	r24
     5d6:	7f 91       	pop	r23
     5d8:	6f 91       	pop	r22
     5da:	5f 91       	pop	r21
     5dc:	4f 91       	pop	r20
     5de:	3f 91       	pop	r19
     5e0:	2f 91       	pop	r18
     5e2:	0f 90       	pop	r0
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	0f 90       	pop	r0
     5e8:	1f 90       	pop	r1
     5ea:	18 95       	reti

000005ec <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     5ec:	1f 92       	push	r1
     5ee:	0f 92       	push	r0
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	0f 92       	push	r0
     5f4:	11 24       	eor	r1, r1
     5f6:	2f 93       	push	r18
     5f8:	3f 93       	push	r19
     5fa:	4f 93       	push	r20
     5fc:	5f 93       	push	r21
     5fe:	6f 93       	push	r22
     600:	7f 93       	push	r23
     602:	8f 93       	push	r24
     604:	9f 93       	push	r25
     606:	af 93       	push	r26
     608:	bf 93       	push	r27
     60a:	ef 93       	push	r30
     60c:	ff 93       	push	r31

  TIMER0OVF_INT();
     60e:	e0 91 88 00 	lds	r30, 0x0088
     612:	f0 91 89 00 	lds	r31, 0x0089
     616:	09 95       	icall
}
     618:	ff 91       	pop	r31
     61a:	ef 91       	pop	r30
     61c:	bf 91       	pop	r27
     61e:	af 91       	pop	r26
     620:	9f 91       	pop	r25
     622:	8f 91       	pop	r24
     624:	7f 91       	pop	r23
     626:	6f 91       	pop	r22
     628:	5f 91       	pop	r21
     62a:	4f 91       	pop	r20
     62c:	3f 91       	pop	r19
     62e:	2f 91       	pop	r18
     630:	0f 90       	pop	r0
     632:	0f be       	out	0x3f, r0	; 63
     634:	0f 90       	pop	r0
     636:	1f 90       	pop	r1
     638:	18 95       	reti

0000063a <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
     63a:	1f 92       	push	r1
     63c:	0f 92       	push	r0
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	0f 92       	push	r0
     642:	11 24       	eor	r1, r1
     644:	2f 93       	push	r18
     646:	3f 93       	push	r19
     648:	4f 93       	push	r20
     64a:	5f 93       	push	r21
     64c:	6f 93       	push	r22
     64e:	7f 93       	push	r23
     650:	8f 93       	push	r24
     652:	9f 93       	push	r25
     654:	af 93       	push	r26
     656:	bf 93       	push	r27
     658:	ef 93       	push	r30
     65a:	ff 93       	push	r31
  SPI_STC();
     65c:	e0 91 63 00 	lds	r30, 0x0063
     660:	f0 91 64 00 	lds	r31, 0x0064
     664:	09 95       	icall
}
     666:	ff 91       	pop	r31
     668:	ef 91       	pop	r30
     66a:	bf 91       	pop	r27
     66c:	af 91       	pop	r26
     66e:	9f 91       	pop	r25
     670:	8f 91       	pop	r24
     672:	7f 91       	pop	r23
     674:	6f 91       	pop	r22
     676:	5f 91       	pop	r21
     678:	4f 91       	pop	r20
     67a:	3f 91       	pop	r19
     67c:	2f 91       	pop	r18
     67e:	0f 90       	pop	r0
     680:	0f be       	out	0x3f, r0	; 63
     682:	0f 90       	pop	r0
     684:	1f 90       	pop	r1
     686:	18 95       	reti

00000688 <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     688:	1f 92       	push	r1
     68a:	0f 92       	push	r0
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	0f 92       	push	r0
     690:	11 24       	eor	r1, r1
     692:	2f 93       	push	r18
     694:	3f 93       	push	r19
     696:	4f 93       	push	r20
     698:	5f 93       	push	r21
     69a:	6f 93       	push	r22
     69c:	7f 93       	push	r23
     69e:	8f 93       	push	r24
     6a0:	9f 93       	push	r25
     6a2:	af 93       	push	r26
     6a4:	bf 93       	push	r27
     6a6:	ef 93       	push	r30
     6a8:	ff 93       	push	r31
  USART_RXC();
     6aa:	e0 91 61 00 	lds	r30, 0x0061
     6ae:	f0 91 62 00 	lds	r31, 0x0062
     6b2:	09 95       	icall
}
     6b4:	ff 91       	pop	r31
     6b6:	ef 91       	pop	r30
     6b8:	bf 91       	pop	r27
     6ba:	af 91       	pop	r26
     6bc:	9f 91       	pop	r25
     6be:	8f 91       	pop	r24
     6c0:	7f 91       	pop	r23
     6c2:	6f 91       	pop	r22
     6c4:	5f 91       	pop	r21
     6c6:	4f 91       	pop	r20
     6c8:	3f 91       	pop	r19
     6ca:	2f 91       	pop	r18
     6cc:	0f 90       	pop	r0
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	0f 90       	pop	r0
     6d2:	1f 90       	pop	r1
     6d4:	18 95       	reti

000006d6 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     6d6:	1f 92       	push	r1
     6d8:	0f 92       	push	r0
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	0f 92       	push	r0
     6de:	11 24       	eor	r1, r1
     6e0:	2f 93       	push	r18
     6e2:	3f 93       	push	r19
     6e4:	4f 93       	push	r20
     6e6:	5f 93       	push	r21
     6e8:	6f 93       	push	r22
     6ea:	7f 93       	push	r23
     6ec:	8f 93       	push	r24
     6ee:	9f 93       	push	r25
     6f0:	af 93       	push	r26
     6f2:	bf 93       	push	r27
     6f4:	ef 93       	push	r30
     6f6:	ff 93       	push	r31
  USART_UDRE();
     6f8:	e0 91 94 00 	lds	r30, 0x0094
     6fc:	f0 91 95 00 	lds	r31, 0x0095
     700:	09 95       	icall
}
     702:	ff 91       	pop	r31
     704:	ef 91       	pop	r30
     706:	bf 91       	pop	r27
     708:	af 91       	pop	r26
     70a:	9f 91       	pop	r25
     70c:	8f 91       	pop	r24
     70e:	7f 91       	pop	r23
     710:	6f 91       	pop	r22
     712:	5f 91       	pop	r21
     714:	4f 91       	pop	r20
     716:	3f 91       	pop	r19
     718:	2f 91       	pop	r18
     71a:	0f 90       	pop	r0
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	0f 90       	pop	r0
     720:	1f 90       	pop	r1
     722:	18 95       	reti

00000724 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     724:	1f 92       	push	r1
     726:	0f 92       	push	r0
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	0f 92       	push	r0
     72c:	11 24       	eor	r1, r1
     72e:	2f 93       	push	r18
     730:	3f 93       	push	r19
     732:	4f 93       	push	r20
     734:	5f 93       	push	r21
     736:	6f 93       	push	r22
     738:	7f 93       	push	r23
     73a:	8f 93       	push	r24
     73c:	9f 93       	push	r25
     73e:	af 93       	push	r26
     740:	bf 93       	push	r27
     742:	ef 93       	push	r30
     744:	ff 93       	push	r31
  USART_TXC();
     746:	e0 91 92 00 	lds	r30, 0x0092
     74a:	f0 91 93 00 	lds	r31, 0x0093
     74e:	09 95       	icall
}
     750:	ff 91       	pop	r31
     752:	ef 91       	pop	r30
     754:	bf 91       	pop	r27
     756:	af 91       	pop	r26
     758:	9f 91       	pop	r25
     75a:	8f 91       	pop	r24
     75c:	7f 91       	pop	r23
     75e:	6f 91       	pop	r22
     760:	5f 91       	pop	r21
     762:	4f 91       	pop	r20
     764:	3f 91       	pop	r19
     766:	2f 91       	pop	r18
     768:	0f 90       	pop	r0
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	0f 90       	pop	r0
     76e:	1f 90       	pop	r1
     770:	18 95       	reti

00000772 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     772:	1f 92       	push	r1
     774:	0f 92       	push	r0
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	0f 92       	push	r0
     77a:	11 24       	eor	r1, r1
     77c:	2f 93       	push	r18
     77e:	3f 93       	push	r19
     780:	4f 93       	push	r20
     782:	5f 93       	push	r21
     784:	6f 93       	push	r22
     786:	7f 93       	push	r23
     788:	8f 93       	push	r24
     78a:	9f 93       	push	r25
     78c:	af 93       	push	r26
     78e:	bf 93       	push	r27
     790:	ef 93       	push	r30
     792:	ff 93       	push	r31
  ADC_INT();
     794:	e0 91 8c 00 	lds	r30, 0x008C
     798:	f0 91 8d 00 	lds	r31, 0x008D
     79c:	09 95       	icall
}
     79e:	ff 91       	pop	r31
     7a0:	ef 91       	pop	r30
     7a2:	bf 91       	pop	r27
     7a4:	af 91       	pop	r26
     7a6:	9f 91       	pop	r25
     7a8:	8f 91       	pop	r24
     7aa:	7f 91       	pop	r23
     7ac:	6f 91       	pop	r22
     7ae:	5f 91       	pop	r21
     7b0:	4f 91       	pop	r20
     7b2:	3f 91       	pop	r19
     7b4:	2f 91       	pop	r18
     7b6:	0f 90       	pop	r0
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	0f 90       	pop	r0
     7bc:	1f 90       	pop	r1
     7be:	18 95       	reti

000007c0 <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
     7c0:	1f 92       	push	r1
     7c2:	0f 92       	push	r0
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	0f 92       	push	r0
     7c8:	11 24       	eor	r1, r1
     7ca:	2f 93       	push	r18
     7cc:	3f 93       	push	r19
     7ce:	4f 93       	push	r20
     7d0:	5f 93       	push	r21
     7d2:	6f 93       	push	r22
     7d4:	7f 93       	push	r23
     7d6:	8f 93       	push	r24
     7d8:	9f 93       	push	r25
     7da:	af 93       	push	r26
     7dc:	bf 93       	push	r27
     7de:	ef 93       	push	r30
     7e0:	ff 93       	push	r31
  EE_RDY();
     7e2:	e0 91 8e 00 	lds	r30, 0x008E
     7e6:	f0 91 8f 00 	lds	r31, 0x008F
     7ea:	09 95       	icall
}
     7ec:	ff 91       	pop	r31
     7ee:	ef 91       	pop	r30
     7f0:	bf 91       	pop	r27
     7f2:	af 91       	pop	r26
     7f4:	9f 91       	pop	r25
     7f6:	8f 91       	pop	r24
     7f8:	7f 91       	pop	r23
     7fa:	6f 91       	pop	r22
     7fc:	5f 91       	pop	r21
     7fe:	4f 91       	pop	r20
     800:	3f 91       	pop	r19
     802:	2f 91       	pop	r18
     804:	0f 90       	pop	r0
     806:	0f be       	out	0x3f, r0	; 63
     808:	0f 90       	pop	r0
     80a:	1f 90       	pop	r1
     80c:	18 95       	reti

0000080e <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
     80e:	1f 92       	push	r1
     810:	0f 92       	push	r0
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	0f 92       	push	r0
     816:	11 24       	eor	r1, r1
     818:	2f 93       	push	r18
     81a:	3f 93       	push	r19
     81c:	4f 93       	push	r20
     81e:	5f 93       	push	r21
     820:	6f 93       	push	r22
     822:	7f 93       	push	r23
     824:	8f 93       	push	r24
     826:	9f 93       	push	r25
     828:	af 93       	push	r26
     82a:	bf 93       	push	r27
     82c:	ef 93       	push	r30
     82e:	ff 93       	push	r31
  ANA_COMP();
     830:	e0 91 8a 00 	lds	r30, 0x008A
     834:	f0 91 8b 00 	lds	r31, 0x008B
     838:	09 95       	icall
}
     83a:	ff 91       	pop	r31
     83c:	ef 91       	pop	r30
     83e:	bf 91       	pop	r27
     840:	af 91       	pop	r26
     842:	9f 91       	pop	r25
     844:	8f 91       	pop	r24
     846:	7f 91       	pop	r23
     848:	6f 91       	pop	r22
     84a:	5f 91       	pop	r21
     84c:	4f 91       	pop	r20
     84e:	3f 91       	pop	r19
     850:	2f 91       	pop	r18
     852:	0f 90       	pop	r0
     854:	0f be       	out	0x3f, r0	; 63
     856:	0f 90       	pop	r0
     858:	1f 90       	pop	r1
     85a:	18 95       	reti

0000085c <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
     85c:	1f 92       	push	r1
     85e:	0f 92       	push	r0
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	0f 92       	push	r0
     864:	11 24       	eor	r1, r1
     866:	2f 93       	push	r18
     868:	3f 93       	push	r19
     86a:	4f 93       	push	r20
     86c:	5f 93       	push	r21
     86e:	6f 93       	push	r22
     870:	7f 93       	push	r23
     872:	8f 93       	push	r24
     874:	9f 93       	push	r25
     876:	af 93       	push	r26
     878:	bf 93       	push	r27
     87a:	ef 93       	push	r30
     87c:	ff 93       	push	r31
  TWI_I2C();
     87e:	e0 91 7e 00 	lds	r30, 0x007E
     882:	f0 91 7f 00 	lds	r31, 0x007F
     886:	09 95       	icall
}
     888:	ff 91       	pop	r31
     88a:	ef 91       	pop	r30
     88c:	bf 91       	pop	r27
     88e:	af 91       	pop	r26
     890:	9f 91       	pop	r25
     892:	8f 91       	pop	r24
     894:	7f 91       	pop	r23
     896:	6f 91       	pop	r22
     898:	5f 91       	pop	r21
     89a:	4f 91       	pop	r20
     89c:	3f 91       	pop	r19
     89e:	2f 91       	pop	r18
     8a0:	0f 90       	pop	r0
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	0f 90       	pop	r0
     8a6:	1f 90       	pop	r1
     8a8:	18 95       	reti

000008aa <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
     8aa:	1f 92       	push	r1
     8ac:	0f 92       	push	r0
     8ae:	0f b6       	in	r0, 0x3f	; 63
     8b0:	0f 92       	push	r0
     8b2:	11 24       	eor	r1, r1
     8b4:	2f 93       	push	r18
     8b6:	3f 93       	push	r19
     8b8:	4f 93       	push	r20
     8ba:	5f 93       	push	r21
     8bc:	6f 93       	push	r22
     8be:	7f 93       	push	r23
     8c0:	8f 93       	push	r24
     8c2:	9f 93       	push	r25
     8c4:	af 93       	push	r26
     8c6:	bf 93       	push	r27
     8c8:	ef 93       	push	r30
     8ca:	ff 93       	push	r31
  SPM_RDY();
     8cc:	e0 91 80 00 	lds	r30, 0x0080
     8d0:	f0 91 81 00 	lds	r31, 0x0081
     8d4:	09 95       	icall
}
     8d6:	ff 91       	pop	r31
     8d8:	ef 91       	pop	r30
     8da:	bf 91       	pop	r27
     8dc:	af 91       	pop	r26
     8de:	9f 91       	pop	r25
     8e0:	8f 91       	pop	r24
     8e2:	7f 91       	pop	r23
     8e4:	6f 91       	pop	r22
     8e6:	5f 91       	pop	r21
     8e8:	4f 91       	pop	r20
     8ea:	3f 91       	pop	r19
     8ec:	2f 91       	pop	r18
     8ee:	0f 90       	pop	r0
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	0f 90       	pop	r0
     8f4:	1f 90       	pop	r1
     8f6:	18 95       	reti

000008f8 <Led_Init>:
	LED_3

*/
void Led_Init(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     8f8:	81 30       	cpi	r24, 0x01	; 1
     8fa:	69 f0       	breq	.+26     	; 0x916 <Led_Init+0x1e>
     8fc:	81 30       	cpi	r24, 0x01	; 1
     8fe:	28 f0       	brcs	.+10     	; 0x90a <Led_Init+0x12>
     900:	82 30       	cpi	r24, 0x02	; 2
     902:	79 f0       	breq	.+30     	; 0x922 <Led_Init+0x2a>
     904:	83 30       	cpi	r24, 0x03	; 3
     906:	c1 f4       	brne	.+48     	; 0x938 <Led_Init+0x40>
     908:	12 c0       	rjmp	.+36     	; 0x92e <Led_Init+0x36>
{
case LED_0:
gpioPinDirection(LED_0_GPIO,LED_0_BIT,HIGH);
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	60 e1       	ldi	r22, 0x10	; 16
     90e:	4f ef       	ldi	r20, 0xFF	; 255
     910:	0e 94 ae 00 	call	0x15c	; 0x15c <gpioPinDirection>
break;
     914:	08 95       	ret

case LED_1:
gpioPinDirection(LED_1_GPIO,LED_1_BIT,HIGH);
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	60 e2       	ldi	r22, 0x20	; 32
     91a:	4f ef       	ldi	r20, 0xFF	; 255
     91c:	0e 94 ae 00 	call	0x15c	; 0x15c <gpioPinDirection>
break;
     920:	08 95       	ret

case LED_2:
gpioPinDirection(LED_2_GPIO,LED_2_BIT,HIGH);
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	60 e4       	ldi	r22, 0x40	; 64
     926:	4f ef       	ldi	r20, 0xFF	; 255
     928:	0e 94 ae 00 	call	0x15c	; 0x15c <gpioPinDirection>
break;
     92c:	08 95       	ret

case LED_3:
gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	60 e8       	ldi	r22, 0x80	; 128
     932:	4f ef       	ldi	r20, 0xFF	; 255
     934:	0e 94 ae 00 	call	0x15c	; 0x15c <gpioPinDirection>
     938:	08 95       	ret

0000093a <Led_On>:
}


void Led_On(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     93a:	81 30       	cpi	r24, 0x01	; 1
     93c:	69 f0       	breq	.+26     	; 0x958 <Led_On+0x1e>
     93e:	81 30       	cpi	r24, 0x01	; 1
     940:	28 f0       	brcs	.+10     	; 0x94c <Led_On+0x12>
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	79 f0       	breq	.+30     	; 0x964 <Led_On+0x2a>
     946:	83 30       	cpi	r24, 0x03	; 3
     948:	c1 f4       	brne	.+48     	; 0x97a <Led_On+0x40>
     94a:	12 c0       	rjmp	.+36     	; 0x970 <Led_On+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,HIGH);
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	60 e1       	ldi	r22, 0x10	; 16
     950:	4f ef       	ldi	r20, 0xFF	; 255
     952:	0e 94 ed 00 	call	0x1da	; 0x1da <gpioPinWrite>
break;
     956:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,HIGH);
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	60 e2       	ldi	r22, 0x20	; 32
     95c:	4f ef       	ldi	r20, 0xFF	; 255
     95e:	0e 94 ed 00 	call	0x1da	; 0x1da <gpioPinWrite>
break;
     962:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,HIGH);
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	60 e4       	ldi	r22, 0x40	; 64
     968:	4f ef       	ldi	r20, 0xFF	; 255
     96a:	0e 94 ed 00 	call	0x1da	; 0x1da <gpioPinWrite>
break;
     96e:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,HIGH);
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	60 e8       	ldi	r22, 0x80	; 128
     974:	4f ef       	ldi	r20, 0xFF	; 255
     976:	0e 94 ed 00 	call	0x1da	; 0x1da <gpioPinWrite>
     97a:	08 95       	ret

0000097c <Led_Off>:
}

void Led_Off(En_LedNumber_t en_led_id)
{

switch(en_led_id)
     97c:	81 30       	cpi	r24, 0x01	; 1
     97e:	69 f0       	breq	.+26     	; 0x99a <Led_Off+0x1e>
     980:	81 30       	cpi	r24, 0x01	; 1
     982:	28 f0       	brcs	.+10     	; 0x98e <Led_Off+0x12>
     984:	82 30       	cpi	r24, 0x02	; 2
     986:	79 f0       	breq	.+30     	; 0x9a6 <Led_Off+0x2a>
     988:	83 30       	cpi	r24, 0x03	; 3
     98a:	c1 f4       	brne	.+48     	; 0x9bc <Led_Off+0x40>
     98c:	12 c0       	rjmp	.+36     	; 0x9b2 <Led_Off+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,LOW);
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	60 e1       	ldi	r22, 0x10	; 16
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	0e 94 ed 00 	call	0x1da	; 0x1da <gpioPinWrite>
break;
     998:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,LOW);
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	60 e2       	ldi	r22, 0x20	; 32
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	0e 94 ed 00 	call	0x1da	; 0x1da <gpioPinWrite>
break;
     9a4:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,LOW);
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	60 e4       	ldi	r22, 0x40	; 64
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	0e 94 ed 00 	call	0x1da	; 0x1da <gpioPinWrite>
break;
     9b0:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,LOW);
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	60 e8       	ldi	r22, 0x80	; 128
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	0e 94 ed 00 	call	0x1da	; 0x1da <gpioPinWrite>
     9bc:	08 95       	ret

000009be <Led_Toggle>:


}
void Led_Toggle(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     9be:	81 30       	cpi	r24, 0x01	; 1
     9c0:	61 f0       	breq	.+24     	; 0x9da <Led_Toggle+0x1c>
     9c2:	81 30       	cpi	r24, 0x01	; 1
     9c4:	28 f0       	brcs	.+10     	; 0x9d0 <Led_Toggle+0x12>
     9c6:	82 30       	cpi	r24, 0x02	; 2
     9c8:	69 f0       	breq	.+26     	; 0x9e4 <Led_Toggle+0x26>
     9ca:	83 30       	cpi	r24, 0x03	; 3
     9cc:	a1 f4       	brne	.+40     	; 0x9f6 <Led_Toggle+0x38>
     9ce:	0f c0       	rjmp	.+30     	; 0x9ee <Led_Toggle+0x30>
{
case LED_0:
gpioPinToggle(LED_0_GPIO,LED_0_BIT);
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	60 e1       	ldi	r22, 0x10	; 16
     9d4:	0e 94 28 01 	call	0x250	; 0x250 <gpioPinToggle>
break;
     9d8:	08 95       	ret

case LED_1:
gpioPinToggle(LED_1_GPIO,LED_1_BIT);
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	60 e2       	ldi	r22, 0x20	; 32
     9de:	0e 94 28 01 	call	0x250	; 0x250 <gpioPinToggle>
break;
     9e2:	08 95       	ret

case LED_2:
gpioPinToggle(LED_2_GPIO,LED_2_BIT);
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	60 e4       	ldi	r22, 0x40	; 64
     9e8:	0e 94 28 01 	call	0x250	; 0x250 <gpioPinToggle>
break;
     9ec:	08 95       	ret

case LED_3:
gpioPinToggle(LED_3_GPIO,LED_3_BIT);
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	60 e8       	ldi	r22, 0x80	; 128
     9f2:	0e 94 28 01 	call	0x250	; 0x250 <gpioPinToggle>
     9f6:	08 95       	ret

000009f8 <SPI_Init>:
#include "gpio.h"
extern ST_SPI_Configuration SPI_Config ;
extern volatile uint8_t u8_DATA;

void SPI_Init()
{
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
	 ST_SPI_Configuration *gConfig = & SPI_Config;

	/********************Enable SPI Interrupt ******************/

	//SPCR = SPCR | (SPI_INT_ENABLE<<SPIE);
	SPCR = gConfig->MASTER_SLAVE_MODE | gConfig->DATA_ORDER
     9fc:	cb e6       	ldi	r28, 0x6B	; 107
     9fe:	d0 e0       	ldi	r29, 0x00	; 0
     a00:	90 91 72 00 	lds	r25, 0x0072
     a04:	88 81       	ld	r24, Y
     a06:	89 2b       	or	r24, r25
     a08:	9c 81       	ldd	r25, Y+4	; 0x04
     a0a:	89 2b       	or	r24, r25
     a0c:	99 81       	ldd	r25, Y+1	; 0x01
     a0e:	89 2b       	or	r24, r25
     a10:	9d 81       	ldd	r25, Y+5	; 0x05
     a12:	89 2b       	or	r24, r25
     a14:	9e 81       	ldd	r25, Y+6	; 0x06
     a16:	89 2b       	or	r24, r25
     a18:	8d b9       	out	0x0d, r24	; 13
			  | gConfig->OPERATING_LEVEL | gConfig->PRESCALAR
			 | gConfig->SAMPLING_EDGE | gConfig ->INT_ENABLE;

	SPSR |= gConfig->DOUBLE_SPEED;
     a1a:	9e b1       	in	r25, 0x0e	; 14
     a1c:	8b 81       	ldd	r24, Y+3	; 0x03
     a1e:	89 2b       	or	r24, r25
     a20:	8e b9       	out	0x0e, r24	; 14
			 gpioPinDirection(GPIOB, BIT4 | BIT5 | BIT7, OUTPUT);
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	60 eb       	ldi	r22, 0xB0	; 176
     a26:	4f ef       	ldi	r20, 0xFF	; 255
     a28:	0e 94 ae 00 	call	0x15c	; 0x15c <gpioPinDirection>
			 gpioPinDirection(GPIOB, BIT6, INPUT);
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	60 e4       	ldi	r22, 0x40	; 64
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	0e 94 ae 00 	call	0x15c	; 0x15c <gpioPinDirection>

		SPCR |=  gConfig->ENABLE;
     a36:	9d b1       	in	r25, 0x0d	; 13
     a38:	8a 81       	ldd	r24, Y+2	; 0x02
     a3a:	89 2b       	or	r24, r25
     a3c:	8d b9       	out	0x0d, r24	; 13



}
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <SPI_Transciever_INT>:
void SPI_Transciever_INT(void)
{
	SPDR=u8_DATA;
     a44:	80 91 60 00 	lds	r24, 0x0060
     a48:	8f b9       	out	0x0f, r24	; 15
}
     a4a:	08 95       	ret

00000a4c <SPI_Send>:
void  SPI_Send(uint8_t u8_data)
{
     /* Start transmission */
     SPDR = u8_data;
     a4c:	8f b9       	out	0x0f, r24	; 15
    if (!(READBIT(SPCR,SPIE)))
     a4e:	6f 99       	sbic	0x0d, 7	; 13
     a50:	02 c0       	rjmp	.+4      	; 0xa56 <SPI_Send+0xa>
    {
	 	/* Wait for transmission complete */
     while(!(SPSR & (1<<SPIF)));
     a52:	77 9b       	sbis	0x0e, 7	; 14
     a54:	fe cf       	rjmp	.-4      	; 0xa52 <SPI_Send+0x6>
     a56:	08 95       	ret

00000a58 <spi_INT_CALLED>:
		}
}


uint8_t spi_INT_CALLED(void){
	return SPDR;
     a58:	8f b1       	in	r24, 0x0f	; 15
}
     a5a:	08 95       	ret

00000a5c <SPI_Receive>:

uint8_t  SPI_Receive(void)
{
	if (!(READBIT(SPCR,SPIE)))
     a5c:	6f 99       	sbic	0x0d, 7	; 13
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <SPI_Receive+0x8>
	{
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));
     a60:	77 9b       	sbis	0x0e, 7	; 14
     a62:	fe cf       	rjmp	.-4      	; 0xa60 <SPI_Receive+0x4>
		//return SPDR ; // Received data
	}
	return SPDR;
     a64:	8f b1       	in	r24, 0x0f	; 15
}
     a66:	08 95       	ret

00000a68 <SPI_Checks_for_collision>:


 uint8_t SPI_Checks_for_collision(void)
{
	 return READBIT(SPSR, WCOL);
     a68:	8e b1       	in	r24, 0x0e	; 14
     a6a:	82 95       	swap	r24
     a6c:	86 95       	lsr	r24
     a6e:	86 95       	lsr	r24
     a70:	83 70       	andi	r24, 0x03	; 3
}
     a72:	81 70       	andi	r24, 0x01	; 1
     a74:	08 95       	ret

00000a76 <timer0Set>:
}

}
void timer0Set(uint8_t u8_value)
{
TCNT0 =	u8_value;
     a76:	82 bf       	out	0x32, r24	; 50
}
     a78:	08 95       	ret

00000a7a <timer0Read>:

uint8_t timer0Read(void)
{
	 return TCNT0;
     a7a:	82 b7       	in	r24, 0x32	; 50
}
     a7c:	08 95       	ret

00000a7e <timer0Start>:
Depending on prescaler	x     X    X

*/
void timer0Start(void)
{
	 TCCR0 &= (0xF8);
     a7e:	83 b7       	in	r24, 0x33	; 51
     a80:	88 7f       	andi	r24, 0xF8	; 248
     a82:	83 bf       	out	0x33, r24	; 51
	 TCCR0 |= Prescaler_Value;
     a84:	93 b7       	in	r25, 0x33	; 51
     a86:	80 91 7a 00 	lds	r24, 0x007A
     a8a:	89 2b       	or	r24, r25
     a8c:	83 bf       	out	0x33, r24	; 51
}
     a8e:	08 95       	ret

00000a90 <timer0Stop>:
						      0     0    0
*/
void timer0Stop(void)
 {

TCCR0 &= (0xF8);
     a90:	83 b7       	in	r24, 0x33	; 51
     a92:	88 7f       	andi	r24, 0xF8	; 248
     a94:	83 bf       	out	0x33, r24	; 51

 }
     a96:	08 95       	ret

00000a98 <timer0Init>:
uint8_t Prescaler_Value2=0;
uint8_t u8g_T1_Prescaler=0;
volatile uint8_t pwm_time_on=0,flag=0;

void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal,uint8_t u8_initialValue, uint8_t u8_outputCompare,En_timer0Interrupt_t en_interruptMask)
{
     a98:	ef 92       	push	r14
     a9a:	0f 93       	push	r16
if(en_prescal == T0_NO_CLOCK)
     a9c:	44 23       	and	r20, r20
     a9e:	19 f4       	brne	.+6      	; 0xaa6 <timer0Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer0Stop();
     aa0:	0e 94 48 05 	call	0xa90	; 0xa90 <timer0Stop>
     aa4:	48 c0       	rjmp	.+144    	; 0xb36 <timer0Init+0x9e>
}
else
{
TCCR0 |= en_mode|en_prescal;
     aa6:	93 b7       	in	r25, 0x33	; 51
     aa8:	89 2b       	or	r24, r25
     aaa:	84 2b       	or	r24, r20
     aac:	83 bf       	out	0x33, r24	; 51
Prescaler_Value=en_prescal;
     aae:	40 93 7a 00 	sts	0x007A, r20
TCNT0 = u8_initialValue;
     ab2:	22 bf       	out	0x32, r18	; 50
switch(en_OC0){
     ab4:	60 31       	cpi	r22, 0x10	; 16
     ab6:	71 f0       	breq	.+28     	; 0xad4 <timer0Init+0x3c>
     ab8:	61 31       	cpi	r22, 0x11	; 17
     aba:	18 f4       	brcc	.+6      	; 0xac2 <timer0Init+0x2a>
     abc:	66 23       	and	r22, r22
     abe:	31 f0       	breq	.+12     	; 0xacc <timer0Init+0x34>
     ac0:	14 c0       	rjmp	.+40     	; 0xaea <timer0Init+0x52>
     ac2:	60 32       	cpi	r22, 0x20	; 32
     ac4:	59 f0       	breq	.+22     	; 0xadc <timer0Init+0x44>
     ac6:	60 33       	cpi	r22, 0x30	; 48
     ac8:	81 f4       	brne	.+32     	; 0xaea <timer0Init+0x52>
     aca:	0c c0       	rjmp	.+24     	; 0xae4 <timer0Init+0x4c>
	case  T0_OC0_DIS:
	{
	TCCR0 &= 0xCF;
     acc:	83 b7       	in	r24, 0x33	; 51
     ace:	8f 7c       	andi	r24, 0xCF	; 207
     ad0:	83 bf       	out	0x33, r24	; 51
		break;
     ad2:	0b c0       	rjmp	.+22     	; 0xaea <timer0Init+0x52>
	}
	case T0_OC0_TOGGLE:
	{
		TCCR0|=T0_OC0_TOGGLE;
     ad4:	83 b7       	in	r24, 0x33	; 51
     ad6:	80 61       	ori	r24, 0x10	; 16
     ad8:	83 bf       	out	0x33, r24	; 51
		break;
     ada:	07 c0       	rjmp	.+14     	; 0xaea <timer0Init+0x52>
	}
	case  T0_OC0_CLEAR:
	{
	TCCR0 |= T0_OC0_CLEAR;
     adc:	83 b7       	in	r24, 0x33	; 51
     ade:	80 62       	ori	r24, 0x20	; 32
     ae0:	83 bf       	out	0x33, r24	; 51

		break;
     ae2:	03 c0       	rjmp	.+6      	; 0xaea <timer0Init+0x52>
	}
	case T0_OC0_SET:
	{
		TCCR0 |=T0_OC0_SET;
     ae4:	83 b7       	in	r24, 0x33	; 51
     ae6:	80 63       	ori	r24, 0x30	; 48
     ae8:	83 bf       	out	0x33, r24	; 51
		break;
	}

}
OCR0  =u8_outputCompare;
     aea:	0c bf       	out	0x3c, r16	; 60
switch(en_interruptMask){
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	e8 16       	cp	r14, r24
     af0:	69 f0       	breq	.+26     	; 0xb0c <timer0Init+0x74>
     af2:	e8 16       	cp	r14, r24
     af4:	20 f0       	brcs	.+8      	; 0xafe <timer0Init+0x66>
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	e8 16       	cp	r14, r24
     afa:	e9 f4       	brne	.+58     	; 0xb36 <timer0Init+0x9e>
     afc:	10 c0       	rjmp	.+32     	; 0xb1e <timer0Init+0x86>
case  T0_POLLING:{
pooling=0;
     afe:	10 92 79 00 	sts	0x0079, r1
G_interrupt_Disable();
     b02:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <G_interrupt_Disable>
TIMSK &= T0_POLLING;
     b06:	89 b7       	in	r24, 0x39	; 57
     b08:	19 be       	out	0x39, r1	; 57
break;
     b0a:	15 c0       	rjmp	.+42     	; 0xb36 <timer0Init+0x9e>
}
case T0_INTERRUPT_NORMAL :
{pooling=1;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	80 93 79 00 	sts	0x0079, r24
G_interrupt_Enable();
     b12:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <G_interrupt_Enable>
TIMSK |= T0_INTERRUPT_NORMAL;
     b16:	89 b7       	in	r24, 0x39	; 57
     b18:	81 60       	ori	r24, 0x01	; 1
     b1a:	89 bf       	out	0x39, r24	; 57
break;
     b1c:	0c c0       	rjmp	.+24     	; 0xb36 <timer0Init+0x9e>
}
case T0_INTERRUPT_CMP:
{pooling=1;
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	80 93 79 00 	sts	0x0079, r24
//G_interrupt_Enable();
SET_BIT(SREG,7);
     b24:	8f b7       	in	r24, 0x3f	; 63
     b26:	80 68       	ori	r24, 0x80	; 128
     b28:	8f bf       	out	0x3f, r24	; 63
TIMSK |= T0_INTERRUPT_NORMAL;
     b2a:	89 b7       	in	r24, 0x39	; 57
     b2c:	81 60       	ori	r24, 0x01	; 1
     b2e:	89 bf       	out	0x39, r24	; 57
TIMSK |=T0_INTERRUPT_CMP;
     b30:	89 b7       	in	r24, 0x39	; 57
     b32:	82 60       	ori	r24, 0x02	; 2
     b34:	89 bf       	out	0x39, r24	; 57
}
}

}

}
     b36:	0f 91       	pop	r16
     b38:	ef 90       	pop	r14
     b3a:	08 95       	ret

00000b3c <timer0DelayMs>:
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
     b3c:	ac 01       	movw	r20, r24
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	41 15       	cp	r20, r1
     b44:	51 05       	cpc	r21, r1
     b46:	61 05       	cpc	r22, r1
     b48:	71 05       	cpc	r23, r1
     b4a:	89 f0       	breq	.+34     	; 0xb6e <timer0DelayMs+0x32>
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	dc 01       	movw	r26, r24
{
	while ((TIFR&0x01)==0);
     b52:	08 b6       	in	r0, 0x38	; 56
     b54:	00 fe       	sbrs	r0, 0
     b56:	fd cf       	rjmp	.-6      	; 0xb52 <timer0DelayMs+0x16>
	TIFR |=0x01;
     b58:	28 b7       	in	r18, 0x38	; 56
     b5a:	21 60       	ori	r18, 0x01	; 1
     b5c:	28 bf       	out	0x38, r18	; 56
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	a1 1d       	adc	r26, r1
     b62:	b1 1d       	adc	r27, r1
     b64:	84 17       	cp	r24, r20
     b66:	95 07       	cpc	r25, r21
     b68:	a6 07       	cpc	r26, r22
     b6a:	b7 07       	cpc	r27, r23
     b6c:	90 f3       	brcs	.-28     	; 0xb52 <timer0DelayMs+0x16>
     b6e:	08 95       	ret

00000b70 <timer0DelayUs>:
 at pooling _no prescaling
 240at TCNT0

 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
     b70:	dc 01       	movw	r26, r24
     b72:	cb 01       	movw	r24, r22
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
     b74:	00 97       	sbiw	r24, 0x00	; 0
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	31 f0       	breq	.+12     	; 0xb88 <timer0DelayUs+0x18>
	{
	timer0Set(240);
     b7c:	80 ef       	ldi	r24, 0xF0	; 240
     b7e:	0e 94 3b 05 	call	0xa76	; 0xa76 <timer0Set>
	while(timer0Read()<=255);
     b82:	0e 94 3d 05 	call	0xa7a	; 0xa7a <timer0Read>
     b86:	fd cf       	rjmp	.-6      	; 0xb82 <timer0DelayUs+0x12>
	//while(u32_ovf_counter <= (8*u32_delay_in_us/1000));
	}
	TIFR |=(1<<TOV0);/*Clear the flag*/
     b88:	88 b7       	in	r24, 0x38	; 56
     b8a:	81 60       	ori	r24, 0x01	; 1
     b8c:	88 bf       	out	0x38, r24	; 56
}/*1*/
     b8e:	08 95       	ret

00000b90 <timer0SwPWM>:
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
     b90:	cf 92       	push	r12
     b92:	df 92       	push	r13
     b94:	ef 92       	push	r14
     b96:	ff 92       	push	r15
     b98:	cf 93       	push	r28
     b9a:	c8 2f       	mov	r28, r24
float dutyReal;
pwm_time_on=MAX_HOLD;
     b9c:	8f ef       	ldi	r24, 0xFF	; 255
     b9e:	80 93 75 00 	sts	0x0075, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
     ba2:	60 91 75 00 	lds	r22, 0x0075
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__floatunsisf>
     bb0:	6b 01       	movw	r12, r22
     bb2:	7c 01       	movw	r14, r24
}/*1*/
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
     bb4:	6c 2f       	mov	r22, r28
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__floatunsisf>
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	48 ec       	ldi	r20, 0xC8	; 200
     bc6:	52 e4       	ldi	r21, 0x42	; 66
     bc8:	0e 94 66 08 	call	0x10cc	; 0x10cc <__divsf3>
     bcc:	9b 01       	movw	r18, r22
     bce:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
     bd0:	c7 01       	movw	r24, r14
     bd2:	b6 01       	movw	r22, r12
     bd4:	0e 94 88 09 	call	0x1310	; 0x1310 <__mulsf3>
     bd8:	0e 94 ce 08 	call	0x119c	; 0x119c <__fixunssfsi>
     bdc:	60 93 75 00 	sts	0x0075, r22
switch(pooling)
     be0:	80 91 79 00 	lds	r24, 0x0079
     be4:	88 23       	and	r24, r24
     be6:	19 f0       	breq	.+6      	; 0xbee <timer0SwPWM+0x5e>
     be8:	81 30       	cpi	r24, 0x01	; 1
     bea:	29 f5       	brne	.+74     	; 0xc36 <timer0SwPWM+0xa6>
     bec:	1f c0       	rjmp	.+62     	; 0xc2c <timer0SwPWM+0x9c>
{
	case 0:
	{
	timer0Start();
     bee:	0e 94 3f 05 	call	0xa7e	; 0xa7e <timer0Start>
	timer0Set(pwm_time_on);
     bf2:	80 91 75 00 	lds	r24, 0x0075
     bf6:	0e 94 3b 05 	call	0xa76	; 0xa76 <timer0Set>
	//freq 50KHZ is the Max frequency possible
	while ((TIFR&0x01)==0);
     bfa:	08 b6       	in	r0, 0x38	; 56
     bfc:	00 fe       	sbrs	r0, 0
     bfe:	fd cf       	rjmp	.-6      	; 0xbfa <timer0SwPWM+0x6a>
	TIFR |=0x01;
     c00:	88 b7       	in	r24, 0x38	; 56
     c02:	81 60       	ori	r24, 0x01	; 1
     c04:	88 bf       	out	0x38, r24	; 56
	PORTC_DATA |=0xff;
     c06:	85 b3       	in	r24, 0x15	; 21
     c08:	8f ef       	ldi	r24, 0xFF	; 255
     c0a:	85 bb       	out	0x15, r24	; 21
	timer0Start();
     c0c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <timer0Start>
	timer0Set(MAX_HOLD-pwm_time_on);
     c10:	80 91 75 00 	lds	r24, 0x0075
     c14:	80 95       	com	r24
     c16:	0e 94 3b 05 	call	0xa76	; 0xa76 <timer0Set>
	//freq
	while ((TIFR & 0x01)==0);
     c1a:	08 b6       	in	r0, 0x38	; 56
     c1c:	00 fe       	sbrs	r0, 0
     c1e:	fd cf       	rjmp	.-6      	; 0xc1a <timer0SwPWM+0x8a>
	TIFR |=0x01;
     c20:	88 b7       	in	r24, 0x38	; 56
     c22:	81 60       	ori	r24, 0x01	; 1
     c24:	88 bf       	out	0x38, r24	; 56
	PORTC_DATA &=0x00;
     c26:	85 b3       	in	r24, 0x15	; 21
     c28:	15 ba       	out	0x15, r1	; 21

break;
     c2a:	05 c0       	rjmp	.+10     	; 0xc36 <timer0SwPWM+0xa6>
}
case 1:
{
timer0Start();
     c2c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <timer0Start>
OCR0=pwm_time_on;
     c30:	80 91 75 00 	lds	r24, 0x0075
     c34:	8c bf       	out	0x3c, r24	; 60
break;
}

}

}
     c36:	cf 91       	pop	r28
     c38:	ff 90       	pop	r15
     c3a:	ef 90       	pop	r14
     c3c:	df 90       	pop	r13
     c3e:	cf 90       	pop	r12
     c40:	08 95       	ret

00000c42 <Timer_interrupt_COMP_routine>:



void Timer_interrupt_COMP_routine(void)
{
	PORTD_DATA ^=0xff;
     c42:	82 b3       	in	r24, 0x12	; 18
     c44:	80 95       	com	r24
     c46:	82 bb       	out	0x12, r24	; 18

}
     c48:	08 95       	ret

00000c4a <timer1Init>:
 */
void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC,
	En_timer1perscaler_t en_prescal,uint16_t u16_initialValue,
	uint16_t u16_outputCompareA,uint16_t u16_outputCompareB,
	 uint16_t u16_inputCapture,En_timer1Interrupt_t en_interruptMask)
 {
     c4a:	af 92       	push	r10
     c4c:	ef 92       	push	r14
     c4e:	ff 92       	push	r15
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	d9 01       	movw	r26, r18
     c56:	2a 2d       	mov	r18, r10
	TCCR1 |= en_mode | en_OC;
     c58:	ee b5       	in	r30, 0x2e	; 46
     c5a:	ff b5       	in	r31, 0x2f	; 47
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	86 2b       	or	r24, r22
     c60:	97 2b       	or	r25, r23
     c62:	8e 2b       	or	r24, r30
     c64:	9f 2b       	or	r25, r31
     c66:	9f bd       	out	0x2f, r25	; 47
     c68:	8e bd       	out	0x2e, r24	; 46
	u8g_T1_Prescaler=en_prescal;
     c6a:	40 93 76 00 	sts	0x0076, r20
	OCR1A =u16_outputCompareA;
     c6e:	1b bd       	out	0x2b, r17	; 43
     c70:	0a bd       	out	0x2a, r16	; 42
	OCR1B =u16_outputCompareB;
     c72:	f9 bc       	out	0x29, r15	; 41
     c74:	e8 bc       	out	0x28, r14	; 40
	TCNT1=u16_initialValue;
     c76:	bd bd       	out	0x2d, r27	; 45
     c78:	ac bd       	out	0x2c, r26	; 44
	switch(en_interruptMask)
     c7a:	28 30       	cpi	r18, 0x08	; 8
     c7c:	d1 f0       	breq	.+52     	; 0xcb2 <timer1Init+0x68>
     c7e:	29 30       	cpi	r18, 0x09	; 9
     c80:	28 f4       	brcc	.+10     	; 0xc8c <timer1Init+0x42>
     c82:	aa 20       	and	r10, r10
     c84:	51 f0       	breq	.+20     	; 0xc9a <timer1Init+0x50>
     c86:	24 30       	cpi	r18, 0x04	; 4
     c88:	f9 f4       	brne	.+62     	; 0xcc8 <timer1Init+0x7e>
     c8a:	0b c0       	rjmp	.+22     	; 0xca2 <timer1Init+0x58>
     c8c:	20 32       	cpi	r18, 0x20	; 32
     c8e:	a9 f0       	breq	.+42     	; 0xcba <timer1Init+0x70>
     c90:	2c 33       	cpi	r18, 0x3C	; 60
     c92:	b9 f0       	breq	.+46     	; 0xcc2 <timer1Init+0x78>
     c94:	20 31       	cpi	r18, 0x10	; 16
     c96:	c1 f4       	brne	.+48     	; 0xcc8 <timer1Init+0x7e>
     c98:	08 c0       	rjmp	.+16     	; 0xcaa <timer1Init+0x60>
	{
		case T1_POLLING:
		{
			TIMSK &=0xC3;
     c9a:	89 b7       	in	r24, 0x39	; 57
     c9c:	83 7c       	andi	r24, 0xC3	; 195
     c9e:	89 bf       	out	0x39, r24	; 57
			/*	     OCIE0 ToIE0   ALL INTERRUPT T1    	OCIE0 ToIE0
			TIMSK &=  1     1        0 0 0 0 	           1     1
			All T1 Interrupts enable are cleared
			but other timers interrupt enable are not effected
			*/
		break;
     ca0:	13 c0       	rjmp	.+38     	; 0xcc8 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_NORMAL:
		{
			TIMSK |=T1_INTERRUPT_NORMAL;
     ca2:	89 b7       	in	r24, 0x39	; 57
     ca4:	84 60       	ori	r24, 0x04	; 4
     ca6:	89 bf       	out	0x39, r24	; 57
		break;
     ca8:	0f c0       	rjmp	.+30     	; 0xcc8 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_CMP_1A:
		{
			TIMSK |=T1_INTERRUPT_CMP_1A;
     caa:	89 b7       	in	r24, 0x39	; 57
     cac:	80 61       	ori	r24, 0x10	; 16
     cae:	89 bf       	out	0x39, r24	; 57
			break;
     cb0:	0b c0       	rjmp	.+22     	; 0xcc8 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_CMP_1B:
		{
			TIMSK |=T1_INTERRUPT_CMP_1B;
     cb2:	89 b7       	in	r24, 0x39	; 57
     cb4:	88 60       	ori	r24, 0x08	; 8
     cb6:	89 bf       	out	0x39, r24	; 57
			break;
     cb8:	07 c0       	rjmp	.+14     	; 0xcc8 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_ICAPTURE:
		{
			TIMSK |=T1_INTERRUPT_ICAPTURE;
     cba:	89 b7       	in	r24, 0x39	; 57
     cbc:	80 62       	ori	r24, 0x20	; 32
     cbe:	89 bf       	out	0x39, r24	; 57
			break;
     cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_All:
		{
			TIMSK|=T1_INTERRUPT_All;
     cc2:	89 b7       	in	r24, 0x39	; 57
     cc4:	8c 63       	ori	r24, 0x3C	; 60
     cc6:	89 bf       	out	0x39, r24	; 57
	}




	}
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	ff 90       	pop	r15
     cce:	ef 90       	pop	r14
     cd0:	af 90       	pop	r10
     cd2:	08 95       	ret

00000cd4 <timer1Set>:


void timer1Set(uint16_t u16_value)
{
TCNT1=u16_value;
     cd4:	9d bd       	out	0x2d, r25	; 45
     cd6:	8c bd       	out	0x2c, r24	; 44
}
     cd8:	08 95       	ret

00000cda <timer1Read>:
 * Description:
 * @return TCNT1
 */
uint16_t timer1Read(void)
{
return TCNT1;
     cda:	8c b5       	in	r24, 0x2c	; 44
     cdc:	9d b5       	in	r25, 0x2d	; 45
}
     cde:	08 95       	ret

00000ce0 <timer1Start>:
 * Description:
 * @param
 */
void timer1Start(void)
{
TCCR1|=u8g_T1_Prescaler;
     ce0:	2e b5       	in	r18, 0x2e	; 46
     ce2:	3f b5       	in	r19, 0x2f	; 47
     ce4:	80 91 76 00 	lds	r24, 0x0076
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	82 2b       	or	r24, r18
     cec:	93 2b       	or	r25, r19
     cee:	9f bd       	out	0x2f, r25	; 47
     cf0:	8e bd       	out	0x2e, r24	; 46
}
     cf2:	08 95       	ret

00000cf4 <timer1Stop>:
 * Description:
 * @param
 */
void timer1Stop(void)
{
TCCR1 &=0xfff8;
     cf4:	8e b5       	in	r24, 0x2e	; 46
     cf6:	9f b5       	in	r25, 0x2f	; 47
     cf8:	88 7f       	andi	r24, 0xF8	; 248
     cfa:	9f bd       	out	0x2f, r25	; 47
     cfc:	8e bd       	out	0x2e, r24	; 46
/*Keep all sittings as it is and put zeros in cs10,cs11,cs12*/
}
     cfe:	08 95       	ret

00000d00 <timer1DelayMs>:
 */
void timer1DelayMs(uint16_t u16_delay_in_ms)
{


}
     d00:	08 95       	ret

00000d02 <timer1DelayUs>:
 */
void timer1DelayUs(uint32_t u32_delay_in_us)
{


}
     d02:	08 95       	ret

00000d04 <timer1SwPWM>:
 */
void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{


}
     d04:	08 95       	ret

00000d06 <timer2Set>:
* Description:
* @param value
*/
void timer2Set(uint8_t u8_a_value)
{
TCNT2=u8_a_value;
     d06:	84 bd       	out	0x24, r24	; 36
}
     d08:	08 95       	ret

00000d0a <timer2Read>:
/**
* Description:
* @return
*/
uint8_t timer2Read(void){
return TCNT2;
     d0a:	84 b5       	in	r24, 0x24	; 36
}
     d0c:	08 95       	ret

00000d0e <timer2Start>:
/**
* Description:
*/
void timer2Start(void)
{
TCCR2 &= 0xf8;
     d0e:	85 b5       	in	r24, 0x25	; 37
     d10:	88 7f       	andi	r24, 0xF8	; 248
     d12:	85 bd       	out	0x25, r24	; 37
TCCR2 |= Prescaler_Value2;
     d14:	95 b5       	in	r25, 0x25	; 37
     d16:	80 91 77 00 	lds	r24, 0x0077
     d1a:	89 2b       	or	r24, r25
     d1c:	85 bd       	out	0x25, r24	; 37
}
     d1e:	08 95       	ret

00000d20 <timer2Stop>:
/**
* Description:
*/
void timer2Stop(void)
{
TCCR2 &= 0xf8;
     d20:	85 b5       	in	r24, 0x25	; 37
     d22:	88 7f       	andi	r24, 0xF8	; 248
     d24:	85 bd       	out	0x25, r24	; 37

}
     d26:	08 95       	ret

00000d28 <timer2Init>:


}

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC,En_timer2perscaler_t en_prescal2, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
     d28:	cf 92       	push	r12
     d2a:	0f 93       	push	r16
if(en_prescal2 == T2_NO_CLOCK)
     d2c:	44 23       	and	r20, r20
     d2e:	19 f4       	brne	.+6      	; 0xd36 <timer2Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer2Stop();
     d30:	0e 94 90 06 	call	0xd20	; 0xd20 <timer2Stop>
     d34:	46 c0       	rjmp	.+140    	; 0xdc2 <timer2Init+0x9a>
}
else
{
TCCR2 |= en_mode|en_prescal2 ;
     d36:	95 b5       	in	r25, 0x25	; 37
     d38:	89 2b       	or	r24, r25
     d3a:	84 2b       	or	r24, r20
     d3c:	85 bd       	out	0x25, r24	; 37
Prescaler_Value2=en_prescal2;
     d3e:	40 93 77 00 	sts	0x0077, r20
TCNT2 = u8_initialValue;
     d42:	24 bd       	out	0x24, r18	; 36
switch(en_OC){
     d44:	60 31       	cpi	r22, 0x10	; 16
     d46:	71 f0       	breq	.+28     	; 0xd64 <timer2Init+0x3c>
     d48:	61 31       	cpi	r22, 0x11	; 17
     d4a:	18 f4       	brcc	.+6      	; 0xd52 <timer2Init+0x2a>
     d4c:	66 23       	and	r22, r22
     d4e:	31 f0       	breq	.+12     	; 0xd5c <timer2Init+0x34>
     d50:	14 c0       	rjmp	.+40     	; 0xd7a <timer2Init+0x52>
     d52:	60 32       	cpi	r22, 0x20	; 32
     d54:	59 f0       	breq	.+22     	; 0xd6c <timer2Init+0x44>
     d56:	60 33       	cpi	r22, 0x30	; 48
     d58:	81 f4       	brne	.+32     	; 0xd7a <timer2Init+0x52>
     d5a:	0c c0       	rjmp	.+24     	; 0xd74 <timer2Init+0x4c>
	case  T2_OC2_DIS:
	{
	TCCR2 &= 0xCF;
     d5c:	85 b5       	in	r24, 0x25	; 37
     d5e:	8f 7c       	andi	r24, 0xCF	; 207
     d60:	85 bd       	out	0x25, r24	; 37
		break;
     d62:	0b c0       	rjmp	.+22     	; 0xd7a <timer2Init+0x52>
	}
	case T2_OC2_TOGGLE:
	{
		TCCR2 |=T2_OC2_TOGGLE;
     d64:	85 b5       	in	r24, 0x25	; 37
     d66:	80 61       	ori	r24, 0x10	; 16
     d68:	85 bd       	out	0x25, r24	; 37
		break;
     d6a:	07 c0       	rjmp	.+14     	; 0xd7a <timer2Init+0x52>
	}
	case  T2_OC2_CLEAR:
	{
	TCCR2 |= T2_OC2_CLEAR;
     d6c:	85 b5       	in	r24, 0x25	; 37
     d6e:	80 62       	ori	r24, 0x20	; 32
     d70:	85 bd       	out	0x25, r24	; 37

		break;
     d72:	03 c0       	rjmp	.+6      	; 0xd7a <timer2Init+0x52>
	}
	case T2_OC2_SET:
	{
		TCCR2 |=T2_OC2_SET;
     d74:	85 b5       	in	r24, 0x25	; 37
     d76:	80 63       	ori	r24, 0x30	; 48
     d78:	85 bd       	out	0x25, r24	; 37
		break;
	}

}
OCR2  =u8_outputCompare;
     d7a:	03 bd       	out	0x23, r16	; 35
switch(en_interruptMask){
     d7c:	80 e4       	ldi	r24, 0x40	; 64
     d7e:	c8 16       	cp	r12, r24
     d80:	61 f0       	breq	.+24     	; 0xd9a <timer2Init+0x72>
     d82:	80 e8       	ldi	r24, 0x80	; 128
     d84:	c8 16       	cp	r12, r24
     d86:	91 f0       	breq	.+36     	; 0xdac <timer2Init+0x84>
     d88:	cc 20       	and	r12, r12
     d8a:	d9 f4       	brne	.+54     	; 0xdc2 <timer2Init+0x9a>
case  T2_POLLING:
pooling_2=0;
     d8c:	10 92 78 00 	sts	0x0078, r1
G_interrupt_Disable();
     d90:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <G_interrupt_Disable>
TIMSK &= T2_POLLING;
     d94:	89 b7       	in	r24, 0x39	; 57
     d96:	19 be       	out	0x39, r1	; 57
break;
     d98:	14 c0       	rjmp	.+40     	; 0xdc2 <timer2Init+0x9a>
case T2_INTERRUPT_NORMAL :
{
	pooling_2=1;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	80 93 78 00 	sts	0x0078, r24
G_interrupt_Enable();
     da0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <G_interrupt_Enable>
TIMSK |= T2_INTERRUPT_NORMAL;
     da4:	89 b7       	in	r24, 0x39	; 57
     da6:	80 64       	ori	r24, 0x40	; 64
     da8:	89 bf       	out	0x39, r24	; 57
break;
     daa:	0b c0       	rjmp	.+22     	; 0xdc2 <timer2Init+0x9a>
}
case T2_INTERRUPT_CMP:
{
	pooling_2=1;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	80 93 78 00 	sts	0x0078, r24
G_interrupt_Enable();
     db2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <G_interrupt_Enable>
//SET_BIT(SREG,7);
TIMSK |=T2_INTERRUPT_NORMAL;
     db6:	89 b7       	in	r24, 0x39	; 57
     db8:	80 64       	ori	r24, 0x40	; 64
     dba:	89 bf       	out	0x39, r24	; 57
TIMSK |=T2_INTERRUPT_CMP;
     dbc:	89 b7       	in	r24, 0x39	; 57
     dbe:	80 68       	ori	r24, 0x80	; 128
     dc0:	89 bf       	out	0x39, r24	; 57

}



}
     dc2:	0f 91       	pop	r16
     dc4:	cf 90       	pop	r12
     dc6:	08 95       	ret

00000dc8 <timer2DelayMs>:
		Prescalercounst=1;
		break;

		}*/
void timer2DelayMs(uint16_t u16_delay_in_ms)
{
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <timer2DelayMs+0xa>
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <timer2DelayMs+0xc>
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	8c 01       	movw	r16, r24
	volatile uint16_t count=0;
     dda:	1a 82       	std	Y+2, r1	; 0x02
     ddc:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t Prescalercounst=0,set_timer2=0;
     dde:	1b 82       	std	Y+3, r1	; 0x03
     de0:	1c 82       	std	Y+4, r1	; 0x04
	switch(Prescaler_Value2)
     de2:	80 91 77 00 	lds	r24, 0x0077
     de6:	84 30       	cpi	r24, 0x04	; 4
     de8:	f9 f0       	breq	.+62     	; 0xe28 <timer2DelayMs+0x60>
     dea:	85 30       	cpi	r24, 0x05	; 5
     dec:	38 f4       	brcc	.+14     	; 0xdfc <timer2DelayMs+0x34>
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	89 f0       	breq	.+34     	; 0xe14 <timer2DelayMs+0x4c>
     df2:	83 30       	cpi	r24, 0x03	; 3
     df4:	a0 f4       	brcc	.+40     	; 0xe1e <timer2DelayMs+0x56>
     df6:	81 30       	cpi	r24, 0x01	; 1
     df8:	51 f5       	brne	.+84     	; 0xe4e <timer2DelayMs+0x86>
     dfa:	07 c0       	rjmp	.+14     	; 0xe0a <timer2DelayMs+0x42>
     dfc:	86 30       	cpi	r24, 0x06	; 6
     dfe:	f1 f0       	breq	.+60     	; 0xe3c <timer2DelayMs+0x74>
     e00:	86 30       	cpi	r24, 0x06	; 6
     e02:	b8 f0       	brcs	.+46     	; 0xe32 <timer2DelayMs+0x6a>
     e04:	87 30       	cpi	r24, 0x07	; 7
     e06:	19 f5       	brne	.+70     	; 0xe4e <timer2DelayMs+0x86>
     e08:	1e c0       	rjmp	.+60     	; 0xe46 <timer2DelayMs+0x7e>
	{
		case T2_PRESCALER_NO:{
		Prescalercounst=58;
     e0a:	8a e3       	ldi	r24, 0x3A	; 58
     e0c:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=10;
     e0e:	8a e0       	ldi	r24, 0x0A	; 10
     e10:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     e12:	1d c0       	rjmp	.+58     	; 0xe4e <timer2DelayMs+0x86>
		case T2_PRESCALER_8:
		{Prescalercounst=8;
     e14:	88 e0       	ldi	r24, 0x08	; 8
     e16:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=12;
     e18:	8c e0       	ldi	r24, 0x0C	; 12
     e1a:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     e1c:	18 c0       	rjmp	.+48     	; 0xe4e <timer2DelayMs+0x86>
		case T2_PRESCALER_32:
		{Prescalercounst=2;
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=8;
     e22:	88 e0       	ldi	r24, 0x08	; 8
     e24:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     e26:	13 c0       	rjmp	.+38     	; 0xe4e <timer2DelayMs+0x86>
		case T2_PRESCALER_64:
		{Prescalercounst=1;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=6;
     e2c:	86 e0       	ldi	r24, 0x06	; 6
     e2e:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     e30:	0e c0       	rjmp	.+28     	; 0xe4e <timer2DelayMs+0x86>
		case T2_PRESCALER_128:
		{Prescalercounst=1;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=131;
     e36:	83 e8       	ldi	r24, 0x83	; 131
     e38:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     e3a:	09 c0       	rjmp	.+18     	; 0xe4e <timer2DelayMs+0x86>
		case T2_PRESCALER_256:
		{Prescalercounst=1;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=194;
     e40:	82 ec       	ldi	r24, 0xC2	; 194
     e42:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     e44:	04 c0       	rjmp	.+8      	; 0xe4e <timer2DelayMs+0x86>
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=240;
     e4a:	80 ef       	ldi	r24, 0xF0	; 240
     e4c:	8c 83       	std	Y+4, r24	; 0x04
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
     e4e:	1a 82       	std	Y+2, r1	; 0x02
     e50:	19 82       	std	Y+1, r1	; 0x01
     e52:	2b 81       	ldd	r18, Y+3	; 0x03
     e54:	49 81       	ldd	r20, Y+1	; 0x01
     e56:	5a 81       	ldd	r21, Y+2	; 0x02
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	02 9f       	mul	r16, r18
     e5c:	c0 01       	movw	r24, r0
     e5e:	03 9f       	mul	r16, r19
     e60:	90 0d       	add	r25, r0
     e62:	12 9f       	mul	r17, r18
     e64:	90 0d       	add	r25, r0
     e66:	11 24       	eor	r1, r1
     e68:	48 17       	cp	r20, r24
     e6a:	59 07       	cpc	r21, r25
     e6c:	e0 f4       	brcc	.+56     	; 0xea6 <timer2DelayMs+0xde>
	{
		timer2Set(set_timer2);//10 for no prescaler....12 for 8 prescaler .... 8 for 32 prescaler ....6 for prescaler 64 .....
     e6e:	8c 81       	ldd	r24, Y+4	; 0x04
     e70:	0e 94 83 06 	call	0xd06	; 0xd06 <timer2Set>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR & 0x40)==0);
     e74:	08 b6       	in	r0, 0x38	; 56
     e76:	06 fe       	sbrs	r0, 6
     e78:	fd cf       	rjmp	.-6      	; 0xe74 <timer2DelayMs+0xac>
		TIFR |=0x40;
     e7a:	88 b7       	in	r24, 0x38	; 56
     e7c:	80 64       	ori	r24, 0x40	; 64
     e7e:	88 bf       	out	0x38, r24	; 56
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
		set_timer2=240;
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	9a 81       	ldd	r25, Y+2	; 0x02
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	9a 83       	std	Y+2, r25	; 0x02
     e88:	89 83       	std	Y+1, r24	; 0x01
     e8a:	2b 81       	ldd	r18, Y+3	; 0x03
     e8c:	49 81       	ldd	r20, Y+1	; 0x01
     e8e:	5a 81       	ldd	r21, Y+2	; 0x02
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	02 9f       	mul	r16, r18
     e94:	c0 01       	movw	r24, r0
     e96:	03 9f       	mul	r16, r19
     e98:	90 0d       	add	r25, r0
     e9a:	12 9f       	mul	r17, r18
     e9c:	90 0d       	add	r25, r0
     e9e:	11 24       	eor	r1, r1
     ea0:	48 17       	cp	r20, r24
     ea2:	59 07       	cpc	r21, r25
     ea4:	20 f3       	brcs	.-56     	; 0xe6e <timer2DelayMs+0xa6>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR & 0x40)==0);
		TIFR |=0x40;

	}
}
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	08 95       	ret

00000eb8 <timer2DelayUs>:

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
     eb8:	cf 92       	push	r12
     eba:	df 92       	push	r13
     ebc:	ef 92       	push	r14
     ebe:	ff 92       	push	r15
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <timer2DelayUs+0xe>
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	6b 01       	movw	r12, r22
     ecc:	7c 01       	movw	r14, r24
	volatile uint16_t count =0;
     ece:	1a 82       	std	Y+2, r1	; 0x02
     ed0:	19 82       	std	Y+1, r1	; 0x01
	for (count=0;count<u16_delay_in_us;count++)
     ed2:	1a 82       	std	Y+2, r1	; 0x02
     ed4:	19 82       	std	Y+1, r1	; 0x01
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	a0 e0       	ldi	r26, 0x00	; 0
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	8c 15       	cp	r24, r12
     ee0:	9d 05       	cpc	r25, r13
     ee2:	ae 05       	cpc	r26, r14
     ee4:	bf 05       	cpc	r27, r15
     ee6:	b8 f4       	brcc	.+46     	; 0xf16 <timer2DelayUs+0x5e>
	{
		timer2Set(254);//254 for no prescaler
     ee8:	8e ef       	ldi	r24, 0xFE	; 254
     eea:	0e 94 83 06 	call	0xd06	; 0xd06 <timer2Set>
		while ((TIFR & 0x40)==0);
     eee:	08 b6       	in	r0, 0x38	; 56
     ef0:	06 fe       	sbrs	r0, 6
     ef2:	fd cf       	rjmp	.-6      	; 0xeee <timer2DelayUs+0x36>
		TIFR |=0x40;
     ef4:	88 b7       	in	r24, 0x38	; 56
     ef6:	80 64       	ori	r24, 0x40	; 64
     ef8:	88 bf       	out	0x38, r24	; 56

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
	volatile uint16_t count =0;
	for (count=0;count<u16_delay_in_us;count++)
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	01 96       	adiw	r24, 0x01	; 1
     f00:	9a 83       	std	Y+2, r25	; 0x02
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	9a 81       	ldd	r25, Y+2	; 0x02
     f08:	a0 e0       	ldi	r26, 0x00	; 0
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	8c 15       	cp	r24, r12
     f0e:	9d 05       	cpc	r25, r13
     f10:	ae 05       	cpc	r26, r14
     f12:	bf 05       	cpc	r27, r15
     f14:	48 f3       	brcs	.-46     	; 0xee8 <timer2DelayUs+0x30>
		while ((TIFR & 0x40)==0);
		TIFR |=0x40;

	}

}
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	ff 90       	pop	r15
     f20:	ef 90       	pop	r14
     f22:	df 90       	pop	r13
     f24:	cf 90       	pop	r12
     f26:	08 95       	ret

00000f28 <timer2SwPWM>:
/**
* Description:
* @param dutyCycle
*/
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
     f28:	cf 92       	push	r12
     f2a:	df 92       	push	r13
     f2c:	ef 92       	push	r14
     f2e:	ff 92       	push	r15
     f30:	cf 93       	push	r28
     f32:	c8 2f       	mov	r28, r24

float dutyReal;
pwm_time_on=MAX_HOLD;
     f34:	8f ef       	ldi	r24, 0xFF	; 255
     f36:	80 93 75 00 	sts	0x0075, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
     f3a:	60 91 75 00 	lds	r22, 0x0075
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__floatunsisf>
     f48:	6b 01       	movw	r12, r22
     f4a:	7c 01       	movw	r14, r24
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{

float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
     f4c:	6c 2f       	mov	r22, r28
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__floatunsisf>
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	48 ec       	ldi	r20, 0xC8	; 200
     f5e:	52 e4       	ldi	r21, 0x42	; 66
     f60:	0e 94 66 08 	call	0x10cc	; 0x10cc <__divsf3>
     f64:	9b 01       	movw	r18, r22
     f66:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
     f68:	c7 01       	movw	r24, r14
     f6a:	b6 01       	movw	r22, r12
     f6c:	0e 94 88 09 	call	0x1310	; 0x1310 <__mulsf3>
     f70:	0e 94 ce 08 	call	0x119c	; 0x119c <__fixunssfsi>
     f74:	60 93 75 00 	sts	0x0075, r22
switch(pooling_2)
     f78:	80 91 78 00 	lds	r24, 0x0078
     f7c:	88 23       	and	r24, r24
     f7e:	19 f0       	breq	.+6      	; 0xf86 <timer2SwPWM+0x5e>
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	29 f5       	brne	.+74     	; 0xfce <timer2SwPWM+0xa6>
     f84:	1f c0       	rjmp	.+62     	; 0xfc4 <timer2SwPWM+0x9c>
{
	case 0:
	{
		timer2Start();
     f86:	0e 94 87 06 	call	0xd0e	; 0xd0e <timer2Start>
		timer2Set(pwm_time_on);
     f8a:	80 91 75 00 	lds	r24, 0x0075
     f8e:	0e 94 83 06 	call	0xd06	; 0xd06 <timer2Set>
		//freq 50KHZ is the Max frequency possible
		while ((TIFR&0x04)==0);
     f92:	08 b6       	in	r0, 0x38	; 56
     f94:	02 fe       	sbrs	r0, 2
     f96:	fd cf       	rjmp	.-6      	; 0xf92 <timer2SwPWM+0x6a>
		TIFR |=0x04;
     f98:	88 b7       	in	r24, 0x38	; 56
     f9a:	84 60       	ori	r24, 0x04	; 4
     f9c:	88 bf       	out	0x38, r24	; 56
		PORTC_DATA |=0xff;
     f9e:	85 b3       	in	r24, 0x15	; 21
     fa0:	8f ef       	ldi	r24, 0xFF	; 255
     fa2:	85 bb       	out	0x15, r24	; 21
		timer2Start();
     fa4:	0e 94 87 06 	call	0xd0e	; 0xd0e <timer2Start>
		timer2Set(MAX_HOLD-pwm_time_on);
     fa8:	80 91 75 00 	lds	r24, 0x0075
     fac:	80 95       	com	r24
     fae:	0e 94 83 06 	call	0xd06	; 0xd06 <timer2Set>
		//freq
		while ((TIFR & 0x04)==0);
     fb2:	08 b6       	in	r0, 0x38	; 56
     fb4:	02 fe       	sbrs	r0, 2
     fb6:	fd cf       	rjmp	.-6      	; 0xfb2 <timer2SwPWM+0x8a>
		TIFR |=0x04;
     fb8:	88 b7       	in	r24, 0x38	; 56
     fba:	84 60       	ori	r24, 0x04	; 4
     fbc:	88 bf       	out	0x38, r24	; 56
		PORTC_DATA &=0x00;
     fbe:	85 b3       	in	r24, 0x15	; 21
     fc0:	15 ba       	out	0x15, r1	; 21

		break;
     fc2:	05 c0       	rjmp	.+10     	; 0xfce <timer2SwPWM+0xa6>
	}
	case 1:
	{
		timer2Start();
     fc4:	0e 94 87 06 	call	0xd0e	; 0xd0e <timer2Start>
		OCR2=pwm_time_on;
     fc8:	80 91 75 00 	lds	r24, 0x0075
     fcc:	83 bd       	out	0x23, r24	; 35
	}

}


}
     fce:	cf 91       	pop	r28
     fd0:	ff 90       	pop	r15
     fd2:	ef 90       	pop	r14
     fd4:	df 90       	pop	r13
     fd6:	cf 90       	pop	r12
     fd8:	08 95       	ret

00000fda <Timer2_interrupt_COMP_routine>:
void Timer2_interrupt_COMP_routine(void)
{



}
     fda:	08 95       	ret

00000fdc <Timer2_interrupt_routine>:
void Timer2_interrupt_routine(void)
{


}
     fdc:	08 95       	ret

00000fde <Uart_Init>:
uint8_t BufferRequested[Buffer_Size];
volatile uint8_t u8_index=0;
volatile uint8_t buf_is_full=0;
void Uart_Init(En_BAUD_Rate Baud_rate,En_Stop_config Stop_bits_num,
  EN_Parity parity_Bit,EN_Data_Size data_num_bits,EN_UartMode uart_mode)
{uint8_t Buffer=0;
     fde:	0f 93       	push	r16
switch (Baud_rate) {
     fe0:	83 33       	cpi	r24, 0x33	; 51
     fe2:	71 f0       	breq	.+28     	; 0x1000 <Uart_Init+0x22>
     fe4:	84 33       	cpi	r24, 0x34	; 52
     fe6:	18 f4       	brcc	.+6      	; 0xfee <Uart_Init+0x10>
     fe8:	89 31       	cpi	r24, 0x19	; 25
     fea:	79 f4       	brne	.+30     	; 0x100a <Uart_Init+0x2c>
     fec:	0c c0       	rjmp	.+24     	; 0x1006 <Uart_Init+0x28>
     fee:	84 34       	cpi	r24, 0x44	; 68
     ff0:	21 f0       	breq	.+8      	; 0xffa <Uart_Init+0x1c>
     ff2:	87 36       	cpi	r24, 0x67	; 103
     ff4:	51 f4       	brne	.+20     	; 0x100a <Uart_Init+0x2c>
  case Baud9600:
  UBRRL=Baud9600;
     ff6:	89 b9       	out	0x09, r24	; 9
  break;
     ff8:	08 c0       	rjmp	.+16     	; 0x100a <Uart_Init+0x2c>
  case Baud14400:
  UBRRL=Baud14400;
     ffa:	84 e4       	ldi	r24, 0x44	; 68
     ffc:	89 b9       	out	0x09, r24	; 9
  break;
     ffe:	05 c0       	rjmp	.+10     	; 0x100a <Uart_Init+0x2c>
  case Baud19200:
  UBRRL=Baud19200;
    1000:	83 e3       	ldi	r24, 0x33	; 51
    1002:	89 b9       	out	0x09, r24	; 9
  break;
    1004:	02 c0       	rjmp	.+4      	; 0x100a <Uart_Init+0x2c>
  case Baud38400:
  UBRRL=Baud38400;
    1006:	89 e1       	ldi	r24, 0x19	; 25
    1008:	89 b9       	out	0x09, r24	; 9
  break;
}
switch (Stop_bits_num) {
    100a:	66 23       	and	r22, r22
    100c:	31 f0       	breq	.+12     	; 0x101a <Uart_Init+0x3c>
    100e:	61 30       	cpi	r22, 0x01	; 1
    1010:	11 f0       	breq	.+4      	; 0x1016 <Uart_Init+0x38>
uint8_t BufferRequested[Buffer_Size];
volatile uint8_t u8_index=0;
volatile uint8_t buf_is_full=0;
void Uart_Init(En_BAUD_Rate Baud_rate,En_Stop_config Stop_bits_num,
  EN_Parity parity_Bit,EN_Data_Size data_num_bits,EN_UartMode uart_mode)
{uint8_t Buffer=0;
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	03 c0       	rjmp	.+6      	; 0x101c <Uart_Init+0x3e>
  break;
}
case TwoStopBits:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,USBS);
    1016:	88 e8       	ldi	r24, 0x88	; 136
  break;
    1018:	01 c0       	rjmp	.+2      	; 0x101c <Uart_Init+0x3e>
  break;
}
switch (Stop_bits_num) {
case OneStopBit:
{ SET_BIT(Buffer,URSEL);
  CLEAR_BIT(Buffer,USBS);
    101a:	80 e8       	ldi	r24, 0x80	; 128
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,USBS);
  break;
}
}
switch (data_num_bits)
    101c:	22 30       	cpi	r18, 0x02	; 2
    101e:	a1 f0       	breq	.+40     	; 0x1048 <Uart_Init+0x6a>
    1020:	23 30       	cpi	r18, 0x03	; 3
    1022:	28 f4       	brcc	.+10     	; 0x102e <Uart_Init+0x50>
    1024:	22 23       	and	r18, r18
    1026:	41 f0       	breq	.+16     	; 0x1038 <Uart_Init+0x5a>
    1028:	21 30       	cpi	r18, 0x01	; 1
    102a:	b9 f4       	brne	.+46     	; 0x105a <Uart_Init+0x7c>
    102c:	09 c0       	rjmp	.+18     	; 0x1040 <Uart_Init+0x62>
    102e:	23 30       	cpi	r18, 0x03	; 3
    1030:	79 f0       	breq	.+30     	; 0x1050 <Uart_Init+0x72>
    1032:	24 30       	cpi	r18, 0x04	; 4
    1034:	91 f4       	brne	.+36     	; 0x105a <Uart_Init+0x7c>
    1036:	0f c0       	rjmp	.+30     	; 0x1056 <Uart_Init+0x78>
{
case FiveBits:
{
SET_BIT(Buffer,URSEL);
    1038:	80 68       	ori	r24, 0x80	; 128
CLEAR_BIT(Buffer,UCSZ0);
CLEAR_BIT(Buffer,UCSZ1);
    103a:	89 7f       	andi	r24, 0xF9	; 249
CLEAR_BIT(UCSRB,UCSZ2);
    103c:	52 98       	cbi	0x0a, 2	; 10
break;
    103e:	0d c0       	rjmp	.+26     	; 0x105a <Uart_Init+0x7c>
}
case SexBits:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,UCSZ0);
    1040:	82 68       	ori	r24, 0x82	; 130
  CLEAR_BIT(Buffer,UCSZ1);
    1042:	8b 7f       	andi	r24, 0xFB	; 251
  CLEAR_BIT(UCSRB,UCSZ2);
    1044:	52 98       	cbi	0x0a, 2	; 10
  break;
    1046:	09 c0       	rjmp	.+18     	; 0x105a <Uart_Init+0x7c>
}
case SevenBits:
{
  SET_BIT(Buffer,URSEL);
  CLEAR_BIT(Buffer,UCSZ0);
    1048:	89 77       	andi	r24, 0x79	; 121
  SET_BIT(Buffer,UCSZ1);
    104a:	84 68       	ori	r24, 0x84	; 132
  CLEAR_BIT(UCSRB,UCSZ2);
    104c:	52 98       	cbi	0x0a, 2	; 10
  break;
    104e:	05 c0       	rjmp	.+10     	; 0x105a <Uart_Init+0x7c>
}
case EightBits:
{   SET_BIT(Buffer,URSEL);
    SET_BIT(Buffer,UCSZ0);
    SET_BIT(Buffer,UCSZ1);
    1050:	86 68       	ori	r24, 0x86	; 134
    CLEAR_BIT(UCSRB,UCSZ2);
    1052:	52 98       	cbi	0x0a, 2	; 10
break;
    1054:	02 c0       	rjmp	.+4      	; 0x105a <Uart_Init+0x7c>
}

case NineBits:
{   SET_BIT(Buffer,URSEL);
	SET_BIT(Buffer,UCSZ0);
	SET_BIT(Buffer,UCSZ1);
    1056:	86 68       	ori	r24, 0x86	; 134
	SET_BIT(UCSRB,UCSZ2);
    1058:	52 9a       	sbi	0x0a, 2	; 10
	break;
}

}

switch (uart_mode) {
    105a:	00 23       	and	r16, r16
    105c:	19 f0       	breq	.+6      	; 0x1064 <Uart_Init+0x86>
    105e:	01 30       	cpi	r16, 0x01	; 1
    1060:	29 f4       	brne	.+10     	; 0x106c <Uart_Init+0x8e>
    1062:	03 c0       	rjmp	.+6      	; 0x106a <Uart_Init+0x8c>
  case ASynchronous:
  {
  SET_BIT(Buffer,URSEL);
    1064:	80 68       	ori	r24, 0x80	; 128
  CLEAR_BIT(Buffer,UMSEL);
    1066:	8f 7b       	andi	r24, 0xBF	; 191
  break;
    1068:	01 c0       	rjmp	.+2      	; 0x106c <Uart_Init+0x8e>
  }
case Synchronous:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,UMSEL);
    106a:	80 6c       	ori	r24, 0xC0	; 192
  break;
}
}
switch (parity_Bit) {
    106c:	41 30       	cpi	r20, 0x01	; 1
    106e:	41 f0       	breq	.+16     	; 0x1080 <Uart_Init+0xa2>
    1070:	41 30       	cpi	r20, 0x01	; 1
    1072:	18 f0       	brcs	.+6      	; 0x107a <Uart_Init+0x9c>
    1074:	42 30       	cpi	r20, 0x02	; 2
    1076:	41 f4       	brne	.+16     	; 0x1088 <Uart_Init+0xaa>
    1078:	06 c0       	rjmp	.+12     	; 0x1086 <Uart_Init+0xa8>
  case NoParity:
{
SET_BIT(Buffer,URSEL);
    107a:	80 68       	ori	r24, 0x80	; 128
CLEAR_BIT(Buffer,UPM0);
CLEAR_BIT(Buffer,UPM1);
    107c:	8f 7c       	andi	r24, 0xCF	; 207
  break;
    107e:	04 c0       	rjmp	.+8      	; 0x1088 <Uart_Init+0xaa>
}
case EvenParity:
{
SET_BIT(Buffer,URSEL);
CLEAR_BIT(Buffer,UPM0);
    1080:	8f 74       	andi	r24, 0x4F	; 79
SET_BIT(Buffer,UPM1);
    1082:	80 6a       	ori	r24, 0xA0	; 160
break;
    1084:	01 c0       	rjmp	.+2      	; 0x1088 <Uart_Init+0xaa>
}
case OddParity:
{
SET_BIT(Buffer,URSEL);
SET_BIT(Buffer,UPM1);
SET_BIT(Buffer,UPM0);
    1086:	80 6b       	ori	r24, 0xB0	; 176
}


}

UCSRC=Buffer;
    1088:	80 bd       	out	0x20, r24	; 32
SET_BIT(UCSRB,TXEN);/*TXEN*/
    108a:	53 9a       	sbi	0x0a, 3	; 10
SET_BIT(UCSRB,RXEN);/*RXEN*/
    108c:	54 9a       	sbi	0x0a, 4	; 10
}
    108e:	0f 91       	pop	r16
    1090:	08 95       	ret

00001092 <UartTransmitPooling>:
void UartTransmitPooling(uint8_t Data)
{
while( !( UCSRA & (1<<UDRE)));
    1092:	5d 9b       	sbis	0x0b, 5	; 11
    1094:	fe cf       	rjmp	.-4      	; 0x1092 <UartTransmitPooling>
UDR=Data;
    1096:	8c b9       	out	0x0c, r24	; 12
}
    1098:	08 95       	ret

0000109a <UartRecievePooling>:
uint8_t UartRecievePooling(void)
{
	uint8_t data=0;
while (!( UCSRA & (1 << RXC)));/* Wait until new data receive*/
    109a:	5f 9b       	sbis	0x0b, 7	; 11
    109c:	fe cf       	rjmp	.-4      	; 0x109a <UartRecievePooling>
data=UDR;
    109e:	8c b1       	in	r24, 0x0c	; 12
return data;									/* Get and return received data */
}
    10a0:	08 95       	ret

000010a2 <Enable_communication_interrupt>:


void Enable_communication_interrupt(void)
{
G_interrupt_Enable();
    10a2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <G_interrupt_Enable>
SET_BIT(UCSRB,RXCIE);
    10a6:	57 9a       	sbi	0x0a, 7	; 10
SET_BIT(UCSRB,TXCIE);
    10a8:	56 9a       	sbi	0x0a, 6	; 10
SET_BIT(SPCR,SPIE);
    10aa:	6f 9a       	sbi	0x0d, 7	; 13
}
    10ac:	08 95       	ret

000010ae <UartRecieveInterrupt>:
void UartRecieveInterrupt(void)
{/*
if(u8_index<Buffer_Size)
{
u8_Notification_RX=TRUE;
*/  u8_DATA=UDR;/*
    10ae:	8c b1       	in	r24, 0x0c	; 12
    10b0:	80 93 60 00 	sts	0x0060, r24
}
  else{
    u8_index=0;
      }
*/
}
    10b4:	08 95       	ret

000010b6 <UartTransmitInterrupt>:
 buf_is_full=1;
 u8_index=0;
     }
u8_Notification_TX=TRUE;
*/
UDR =u8_DATA;
    10b6:	80 91 60 00 	lds	r24, 0x0060
    10ba:	8c b9       	out	0x0c, r24	; 12
}
    10bc:	08 95       	ret

000010be <UartTransmitdataInt>:
void UartTransmitdataInt(uint8_t data_to_transmit)
{

	  u8_DATA=data_to_transmit;
    10be:	80 93 60 00 	sts	0x0060, r24

}
    10c2:	08 95       	ret

000010c4 <Uart_tryansmitfirstbyte>:

void Uart_tryansmitfirstbyte(uint8_t data)
{
UDR=data;
    10c4:	8c b9       	out	0x0c, r24	; 12
}
    10c6:	08 95       	ret

000010c8 <Uart_recievefirstbyte>:
uint8_t Uart_recievefirstbyte(void)
{
uint8_t data=0;
data = UDR;
    10c8:	8c b1       	in	r24, 0x0c	; 12
return data;
}
    10ca:	08 95       	ret

000010cc <__divsf3>:
    10cc:	0c d0       	rcall	.+24     	; 0x10e6 <__divsf3x>
    10ce:	e6 c0       	rjmp	.+460    	; 0x129c <__fp_round>
    10d0:	de d0       	rcall	.+444    	; 0x128e <__fp_pscB>
    10d2:	40 f0       	brcs	.+16     	; 0x10e4 <__divsf3+0x18>
    10d4:	d5 d0       	rcall	.+426    	; 0x1280 <__fp_pscA>
    10d6:	30 f0       	brcs	.+12     	; 0x10e4 <__divsf3+0x18>
    10d8:	21 f4       	brne	.+8      	; 0x10e2 <__divsf3+0x16>
    10da:	5f 3f       	cpi	r21, 0xFF	; 255
    10dc:	19 f0       	breq	.+6      	; 0x10e4 <__divsf3+0x18>
    10de:	c7 c0       	rjmp	.+398    	; 0x126e <__fp_inf>
    10e0:	51 11       	cpse	r21, r1
    10e2:	10 c1       	rjmp	.+544    	; 0x1304 <__fp_szero>
    10e4:	ca c0       	rjmp	.+404    	; 0x127a <__fp_nan>

000010e6 <__divsf3x>:
    10e6:	eb d0       	rcall	.+470    	; 0x12be <__fp_split3>
    10e8:	98 f3       	brcs	.-26     	; 0x10d0 <__divsf3+0x4>

000010ea <__divsf3_pse>:
    10ea:	99 23       	and	r25, r25
    10ec:	c9 f3       	breq	.-14     	; 0x10e0 <__divsf3+0x14>
    10ee:	55 23       	and	r21, r21
    10f0:	b1 f3       	breq	.-20     	; 0x10de <__divsf3+0x12>
    10f2:	95 1b       	sub	r25, r21
    10f4:	55 0b       	sbc	r21, r21
    10f6:	bb 27       	eor	r27, r27
    10f8:	aa 27       	eor	r26, r26
    10fa:	62 17       	cp	r22, r18
    10fc:	73 07       	cpc	r23, r19
    10fe:	84 07       	cpc	r24, r20
    1100:	38 f0       	brcs	.+14     	; 0x1110 <__divsf3_pse+0x26>
    1102:	9f 5f       	subi	r25, 0xFF	; 255
    1104:	5f 4f       	sbci	r21, 0xFF	; 255
    1106:	22 0f       	add	r18, r18
    1108:	33 1f       	adc	r19, r19
    110a:	44 1f       	adc	r20, r20
    110c:	aa 1f       	adc	r26, r26
    110e:	a9 f3       	breq	.-22     	; 0x10fa <__divsf3_pse+0x10>
    1110:	33 d0       	rcall	.+102    	; 0x1178 <__divsf3_pse+0x8e>
    1112:	0e 2e       	mov	r0, r30
    1114:	3a f0       	brmi	.+14     	; 0x1124 <__divsf3_pse+0x3a>
    1116:	e0 e8       	ldi	r30, 0x80	; 128
    1118:	30 d0       	rcall	.+96     	; 0x117a <__divsf3_pse+0x90>
    111a:	91 50       	subi	r25, 0x01	; 1
    111c:	50 40       	sbci	r21, 0x00	; 0
    111e:	e6 95       	lsr	r30
    1120:	00 1c       	adc	r0, r0
    1122:	ca f7       	brpl	.-14     	; 0x1116 <__divsf3_pse+0x2c>
    1124:	29 d0       	rcall	.+82     	; 0x1178 <__divsf3_pse+0x8e>
    1126:	fe 2f       	mov	r31, r30
    1128:	27 d0       	rcall	.+78     	; 0x1178 <__divsf3_pse+0x8e>
    112a:	66 0f       	add	r22, r22
    112c:	77 1f       	adc	r23, r23
    112e:	88 1f       	adc	r24, r24
    1130:	bb 1f       	adc	r27, r27
    1132:	26 17       	cp	r18, r22
    1134:	37 07       	cpc	r19, r23
    1136:	48 07       	cpc	r20, r24
    1138:	ab 07       	cpc	r26, r27
    113a:	b0 e8       	ldi	r27, 0x80	; 128
    113c:	09 f0       	breq	.+2      	; 0x1140 <__divsf3_pse+0x56>
    113e:	bb 0b       	sbc	r27, r27
    1140:	80 2d       	mov	r24, r0
    1142:	bf 01       	movw	r22, r30
    1144:	ff 27       	eor	r31, r31
    1146:	93 58       	subi	r25, 0x83	; 131
    1148:	5f 4f       	sbci	r21, 0xFF	; 255
    114a:	2a f0       	brmi	.+10     	; 0x1156 <__divsf3_pse+0x6c>
    114c:	9e 3f       	cpi	r25, 0xFE	; 254
    114e:	51 05       	cpc	r21, r1
    1150:	68 f0       	brcs	.+26     	; 0x116c <__divsf3_pse+0x82>
    1152:	8d c0       	rjmp	.+282    	; 0x126e <__fp_inf>
    1154:	d7 c0       	rjmp	.+430    	; 0x1304 <__fp_szero>
    1156:	5f 3f       	cpi	r21, 0xFF	; 255
    1158:	ec f3       	brlt	.-6      	; 0x1154 <__divsf3_pse+0x6a>
    115a:	98 3e       	cpi	r25, 0xE8	; 232
    115c:	dc f3       	brlt	.-10     	; 0x1154 <__divsf3_pse+0x6a>
    115e:	86 95       	lsr	r24
    1160:	77 95       	ror	r23
    1162:	67 95       	ror	r22
    1164:	b7 95       	ror	r27
    1166:	f7 95       	ror	r31
    1168:	9f 5f       	subi	r25, 0xFF	; 255
    116a:	c9 f7       	brne	.-14     	; 0x115e <__divsf3_pse+0x74>
    116c:	88 0f       	add	r24, r24
    116e:	91 1d       	adc	r25, r1
    1170:	96 95       	lsr	r25
    1172:	87 95       	ror	r24
    1174:	97 f9       	bld	r25, 7
    1176:	08 95       	ret
    1178:	e1 e0       	ldi	r30, 0x01	; 1
    117a:	66 0f       	add	r22, r22
    117c:	77 1f       	adc	r23, r23
    117e:	88 1f       	adc	r24, r24
    1180:	bb 1f       	adc	r27, r27
    1182:	62 17       	cp	r22, r18
    1184:	73 07       	cpc	r23, r19
    1186:	84 07       	cpc	r24, r20
    1188:	ba 07       	cpc	r27, r26
    118a:	20 f0       	brcs	.+8      	; 0x1194 <__divsf3_pse+0xaa>
    118c:	62 1b       	sub	r22, r18
    118e:	73 0b       	sbc	r23, r19
    1190:	84 0b       	sbc	r24, r20
    1192:	ba 0b       	sbc	r27, r26
    1194:	ee 1f       	adc	r30, r30
    1196:	88 f7       	brcc	.-30     	; 0x117a <__divsf3_pse+0x90>
    1198:	e0 95       	com	r30
    119a:	08 95       	ret

0000119c <__fixunssfsi>:
    119c:	98 d0       	rcall	.+304    	; 0x12ce <__fp_splitA>
    119e:	88 f0       	brcs	.+34     	; 0x11c2 <__fixunssfsi+0x26>
    11a0:	9f 57       	subi	r25, 0x7F	; 127
    11a2:	90 f0       	brcs	.+36     	; 0x11c8 <__fixunssfsi+0x2c>
    11a4:	b9 2f       	mov	r27, r25
    11a6:	99 27       	eor	r25, r25
    11a8:	b7 51       	subi	r27, 0x17	; 23
    11aa:	a0 f0       	brcs	.+40     	; 0x11d4 <__fixunssfsi+0x38>
    11ac:	d1 f0       	breq	.+52     	; 0x11e2 <__fixunssfsi+0x46>
    11ae:	66 0f       	add	r22, r22
    11b0:	77 1f       	adc	r23, r23
    11b2:	88 1f       	adc	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	1a f0       	brmi	.+6      	; 0x11be <__fixunssfsi+0x22>
    11b8:	ba 95       	dec	r27
    11ba:	c9 f7       	brne	.-14     	; 0x11ae <__fixunssfsi+0x12>
    11bc:	12 c0       	rjmp	.+36     	; 0x11e2 <__fixunssfsi+0x46>
    11be:	b1 30       	cpi	r27, 0x01	; 1
    11c0:	81 f0       	breq	.+32     	; 0x11e2 <__fixunssfsi+0x46>
    11c2:	9f d0       	rcall	.+318    	; 0x1302 <__fp_zero>
    11c4:	b1 e0       	ldi	r27, 0x01	; 1
    11c6:	08 95       	ret
    11c8:	9c c0       	rjmp	.+312    	; 0x1302 <__fp_zero>
    11ca:	67 2f       	mov	r22, r23
    11cc:	78 2f       	mov	r23, r24
    11ce:	88 27       	eor	r24, r24
    11d0:	b8 5f       	subi	r27, 0xF8	; 248
    11d2:	39 f0       	breq	.+14     	; 0x11e2 <__fixunssfsi+0x46>
    11d4:	b9 3f       	cpi	r27, 0xF9	; 249
    11d6:	cc f3       	brlt	.-14     	; 0x11ca <__fixunssfsi+0x2e>
    11d8:	86 95       	lsr	r24
    11da:	77 95       	ror	r23
    11dc:	67 95       	ror	r22
    11de:	b3 95       	inc	r27
    11e0:	d9 f7       	brne	.-10     	; 0x11d8 <__fixunssfsi+0x3c>
    11e2:	3e f4       	brtc	.+14     	; 0x11f2 <__fixunssfsi+0x56>
    11e4:	90 95       	com	r25
    11e6:	80 95       	com	r24
    11e8:	70 95       	com	r23
    11ea:	61 95       	neg	r22
    11ec:	7f 4f       	sbci	r23, 0xFF	; 255
    11ee:	8f 4f       	sbci	r24, 0xFF	; 255
    11f0:	9f 4f       	sbci	r25, 0xFF	; 255
    11f2:	08 95       	ret

000011f4 <__floatunsisf>:
    11f4:	e8 94       	clt
    11f6:	09 c0       	rjmp	.+18     	; 0x120a <__floatsisf+0x12>

000011f8 <__floatsisf>:
    11f8:	97 fb       	bst	r25, 7
    11fa:	3e f4       	brtc	.+14     	; 0x120a <__floatsisf+0x12>
    11fc:	90 95       	com	r25
    11fe:	80 95       	com	r24
    1200:	70 95       	com	r23
    1202:	61 95       	neg	r22
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	8f 4f       	sbci	r24, 0xFF	; 255
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	99 23       	and	r25, r25
    120c:	a9 f0       	breq	.+42     	; 0x1238 <__floatsisf+0x40>
    120e:	f9 2f       	mov	r31, r25
    1210:	96 e9       	ldi	r25, 0x96	; 150
    1212:	bb 27       	eor	r27, r27
    1214:	93 95       	inc	r25
    1216:	f6 95       	lsr	r31
    1218:	87 95       	ror	r24
    121a:	77 95       	ror	r23
    121c:	67 95       	ror	r22
    121e:	b7 95       	ror	r27
    1220:	f1 11       	cpse	r31, r1
    1222:	f8 cf       	rjmp	.-16     	; 0x1214 <__floatsisf+0x1c>
    1224:	fa f4       	brpl	.+62     	; 0x1264 <__floatsisf+0x6c>
    1226:	bb 0f       	add	r27, r27
    1228:	11 f4       	brne	.+4      	; 0x122e <__floatsisf+0x36>
    122a:	60 ff       	sbrs	r22, 0
    122c:	1b c0       	rjmp	.+54     	; 0x1264 <__floatsisf+0x6c>
    122e:	6f 5f       	subi	r22, 0xFF	; 255
    1230:	7f 4f       	sbci	r23, 0xFF	; 255
    1232:	8f 4f       	sbci	r24, 0xFF	; 255
    1234:	9f 4f       	sbci	r25, 0xFF	; 255
    1236:	16 c0       	rjmp	.+44     	; 0x1264 <__floatsisf+0x6c>
    1238:	88 23       	and	r24, r24
    123a:	11 f0       	breq	.+4      	; 0x1240 <__floatsisf+0x48>
    123c:	96 e9       	ldi	r25, 0x96	; 150
    123e:	11 c0       	rjmp	.+34     	; 0x1262 <__floatsisf+0x6a>
    1240:	77 23       	and	r23, r23
    1242:	21 f0       	breq	.+8      	; 0x124c <__floatsisf+0x54>
    1244:	9e e8       	ldi	r25, 0x8E	; 142
    1246:	87 2f       	mov	r24, r23
    1248:	76 2f       	mov	r23, r22
    124a:	05 c0       	rjmp	.+10     	; 0x1256 <__floatsisf+0x5e>
    124c:	66 23       	and	r22, r22
    124e:	71 f0       	breq	.+28     	; 0x126c <__floatsisf+0x74>
    1250:	96 e8       	ldi	r25, 0x86	; 134
    1252:	86 2f       	mov	r24, r22
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	2a f0       	brmi	.+10     	; 0x1264 <__floatsisf+0x6c>
    125a:	9a 95       	dec	r25
    125c:	66 0f       	add	r22, r22
    125e:	77 1f       	adc	r23, r23
    1260:	88 1f       	adc	r24, r24
    1262:	da f7       	brpl	.-10     	; 0x125a <__floatsisf+0x62>
    1264:	88 0f       	add	r24, r24
    1266:	96 95       	lsr	r25
    1268:	87 95       	ror	r24
    126a:	97 f9       	bld	r25, 7
    126c:	08 95       	ret

0000126e <__fp_inf>:
    126e:	97 f9       	bld	r25, 7
    1270:	9f 67       	ori	r25, 0x7F	; 127
    1272:	80 e8       	ldi	r24, 0x80	; 128
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	60 e0       	ldi	r22, 0x00	; 0
    1278:	08 95       	ret

0000127a <__fp_nan>:
    127a:	9f ef       	ldi	r25, 0xFF	; 255
    127c:	80 ec       	ldi	r24, 0xC0	; 192
    127e:	08 95       	ret

00001280 <__fp_pscA>:
    1280:	00 24       	eor	r0, r0
    1282:	0a 94       	dec	r0
    1284:	16 16       	cp	r1, r22
    1286:	17 06       	cpc	r1, r23
    1288:	18 06       	cpc	r1, r24
    128a:	09 06       	cpc	r0, r25
    128c:	08 95       	ret

0000128e <__fp_pscB>:
    128e:	00 24       	eor	r0, r0
    1290:	0a 94       	dec	r0
    1292:	12 16       	cp	r1, r18
    1294:	13 06       	cpc	r1, r19
    1296:	14 06       	cpc	r1, r20
    1298:	05 06       	cpc	r0, r21
    129a:	08 95       	ret

0000129c <__fp_round>:
    129c:	09 2e       	mov	r0, r25
    129e:	03 94       	inc	r0
    12a0:	00 0c       	add	r0, r0
    12a2:	11 f4       	brne	.+4      	; 0x12a8 <__fp_round+0xc>
    12a4:	88 23       	and	r24, r24
    12a6:	52 f0       	brmi	.+20     	; 0x12bc <__fp_round+0x20>
    12a8:	bb 0f       	add	r27, r27
    12aa:	40 f4       	brcc	.+16     	; 0x12bc <__fp_round+0x20>
    12ac:	bf 2b       	or	r27, r31
    12ae:	11 f4       	brne	.+4      	; 0x12b4 <__fp_round+0x18>
    12b0:	60 ff       	sbrs	r22, 0
    12b2:	04 c0       	rjmp	.+8      	; 0x12bc <__fp_round+0x20>
    12b4:	6f 5f       	subi	r22, 0xFF	; 255
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	08 95       	ret

000012be <__fp_split3>:
    12be:	57 fd       	sbrc	r21, 7
    12c0:	90 58       	subi	r25, 0x80	; 128
    12c2:	44 0f       	add	r20, r20
    12c4:	55 1f       	adc	r21, r21
    12c6:	59 f0       	breq	.+22     	; 0x12de <__fp_splitA+0x10>
    12c8:	5f 3f       	cpi	r21, 0xFF	; 255
    12ca:	71 f0       	breq	.+28     	; 0x12e8 <__fp_splitA+0x1a>
    12cc:	47 95       	ror	r20

000012ce <__fp_splitA>:
    12ce:	88 0f       	add	r24, r24
    12d0:	97 fb       	bst	r25, 7
    12d2:	99 1f       	adc	r25, r25
    12d4:	61 f0       	breq	.+24     	; 0x12ee <__fp_splitA+0x20>
    12d6:	9f 3f       	cpi	r25, 0xFF	; 255
    12d8:	79 f0       	breq	.+30     	; 0x12f8 <__fp_splitA+0x2a>
    12da:	87 95       	ror	r24
    12dc:	08 95       	ret
    12de:	12 16       	cp	r1, r18
    12e0:	13 06       	cpc	r1, r19
    12e2:	14 06       	cpc	r1, r20
    12e4:	55 1f       	adc	r21, r21
    12e6:	f2 cf       	rjmp	.-28     	; 0x12cc <__fp_split3+0xe>
    12e8:	46 95       	lsr	r20
    12ea:	f1 df       	rcall	.-30     	; 0x12ce <__fp_splitA>
    12ec:	08 c0       	rjmp	.+16     	; 0x12fe <__fp_splitA+0x30>
    12ee:	16 16       	cp	r1, r22
    12f0:	17 06       	cpc	r1, r23
    12f2:	18 06       	cpc	r1, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	f1 cf       	rjmp	.-30     	; 0x12da <__fp_splitA+0xc>
    12f8:	86 95       	lsr	r24
    12fa:	71 05       	cpc	r23, r1
    12fc:	61 05       	cpc	r22, r1
    12fe:	08 94       	sec
    1300:	08 95       	ret

00001302 <__fp_zero>:
    1302:	e8 94       	clt

00001304 <__fp_szero>:
    1304:	bb 27       	eor	r27, r27
    1306:	66 27       	eor	r22, r22
    1308:	77 27       	eor	r23, r23
    130a:	cb 01       	movw	r24, r22
    130c:	97 f9       	bld	r25, 7
    130e:	08 95       	ret

00001310 <__mulsf3>:
    1310:	0b d0       	rcall	.+22     	; 0x1328 <__mulsf3x>
    1312:	c4 cf       	rjmp	.-120    	; 0x129c <__fp_round>
    1314:	b5 df       	rcall	.-150    	; 0x1280 <__fp_pscA>
    1316:	28 f0       	brcs	.+10     	; 0x1322 <__mulsf3+0x12>
    1318:	ba df       	rcall	.-140    	; 0x128e <__fp_pscB>
    131a:	18 f0       	brcs	.+6      	; 0x1322 <__mulsf3+0x12>
    131c:	95 23       	and	r25, r21
    131e:	09 f0       	breq	.+2      	; 0x1322 <__mulsf3+0x12>
    1320:	a6 cf       	rjmp	.-180    	; 0x126e <__fp_inf>
    1322:	ab cf       	rjmp	.-170    	; 0x127a <__fp_nan>
    1324:	11 24       	eor	r1, r1
    1326:	ee cf       	rjmp	.-36     	; 0x1304 <__fp_szero>

00001328 <__mulsf3x>:
    1328:	ca df       	rcall	.-108    	; 0x12be <__fp_split3>
    132a:	a0 f3       	brcs	.-24     	; 0x1314 <__mulsf3+0x4>

0000132c <__mulsf3_pse>:
    132c:	95 9f       	mul	r25, r21
    132e:	d1 f3       	breq	.-12     	; 0x1324 <__mulsf3+0x14>
    1330:	95 0f       	add	r25, r21
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	55 1f       	adc	r21, r21
    1336:	62 9f       	mul	r22, r18
    1338:	f0 01       	movw	r30, r0
    133a:	72 9f       	mul	r23, r18
    133c:	bb 27       	eor	r27, r27
    133e:	f0 0d       	add	r31, r0
    1340:	b1 1d       	adc	r27, r1
    1342:	63 9f       	mul	r22, r19
    1344:	aa 27       	eor	r26, r26
    1346:	f0 0d       	add	r31, r0
    1348:	b1 1d       	adc	r27, r1
    134a:	aa 1f       	adc	r26, r26
    134c:	64 9f       	mul	r22, r20
    134e:	66 27       	eor	r22, r22
    1350:	b0 0d       	add	r27, r0
    1352:	a1 1d       	adc	r26, r1
    1354:	66 1f       	adc	r22, r22
    1356:	82 9f       	mul	r24, r18
    1358:	22 27       	eor	r18, r18
    135a:	b0 0d       	add	r27, r0
    135c:	a1 1d       	adc	r26, r1
    135e:	62 1f       	adc	r22, r18
    1360:	73 9f       	mul	r23, r19
    1362:	b0 0d       	add	r27, r0
    1364:	a1 1d       	adc	r26, r1
    1366:	62 1f       	adc	r22, r18
    1368:	83 9f       	mul	r24, r19
    136a:	a0 0d       	add	r26, r0
    136c:	61 1d       	adc	r22, r1
    136e:	22 1f       	adc	r18, r18
    1370:	74 9f       	mul	r23, r20
    1372:	33 27       	eor	r19, r19
    1374:	a0 0d       	add	r26, r0
    1376:	61 1d       	adc	r22, r1
    1378:	23 1f       	adc	r18, r19
    137a:	84 9f       	mul	r24, r20
    137c:	60 0d       	add	r22, r0
    137e:	21 1d       	adc	r18, r1
    1380:	82 2f       	mov	r24, r18
    1382:	76 2f       	mov	r23, r22
    1384:	6a 2f       	mov	r22, r26
    1386:	11 24       	eor	r1, r1
    1388:	9f 57       	subi	r25, 0x7F	; 127
    138a:	50 40       	sbci	r21, 0x00	; 0
    138c:	8a f0       	brmi	.+34     	; 0x13b0 <__mulsf3_pse+0x84>
    138e:	e1 f0       	breq	.+56     	; 0x13c8 <__mulsf3_pse+0x9c>
    1390:	88 23       	and	r24, r24
    1392:	4a f0       	brmi	.+18     	; 0x13a6 <__mulsf3_pse+0x7a>
    1394:	ee 0f       	add	r30, r30
    1396:	ff 1f       	adc	r31, r31
    1398:	bb 1f       	adc	r27, r27
    139a:	66 1f       	adc	r22, r22
    139c:	77 1f       	adc	r23, r23
    139e:	88 1f       	adc	r24, r24
    13a0:	91 50       	subi	r25, 0x01	; 1
    13a2:	50 40       	sbci	r21, 0x00	; 0
    13a4:	a9 f7       	brne	.-22     	; 0x1390 <__mulsf3_pse+0x64>
    13a6:	9e 3f       	cpi	r25, 0xFE	; 254
    13a8:	51 05       	cpc	r21, r1
    13aa:	70 f0       	brcs	.+28     	; 0x13c8 <__mulsf3_pse+0x9c>
    13ac:	60 cf       	rjmp	.-320    	; 0x126e <__fp_inf>
    13ae:	aa cf       	rjmp	.-172    	; 0x1304 <__fp_szero>
    13b0:	5f 3f       	cpi	r21, 0xFF	; 255
    13b2:	ec f3       	brlt	.-6      	; 0x13ae <__mulsf3_pse+0x82>
    13b4:	98 3e       	cpi	r25, 0xE8	; 232
    13b6:	dc f3       	brlt	.-10     	; 0x13ae <__mulsf3_pse+0x82>
    13b8:	86 95       	lsr	r24
    13ba:	77 95       	ror	r23
    13bc:	67 95       	ror	r22
    13be:	b7 95       	ror	r27
    13c0:	f7 95       	ror	r31
    13c2:	e7 95       	ror	r30
    13c4:	9f 5f       	subi	r25, 0xFF	; 255
    13c6:	c1 f7       	brne	.-16     	; 0x13b8 <__mulsf3_pse+0x8c>
    13c8:	fe 2b       	or	r31, r30
    13ca:	88 0f       	add	r24, r24
    13cc:	91 1d       	adc	r25, r1
    13ce:	96 95       	lsr	r25
    13d0:	87 95       	ror	r24
    13d2:	97 f9       	bld	r25, 7
    13d4:	08 95       	ret

000013d6 <_exit>:
    13d6:	f8 94       	cli

000013d8 <__stop_program>:
    13d8:	ff cf       	rjmp	.-2      	; 0x13d8 <__stop_program>
