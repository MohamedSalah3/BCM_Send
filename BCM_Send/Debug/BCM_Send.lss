
BCM_Send.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000014bc  00001550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000033  0080007a  0080007a  0000156a  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  0000156c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00003138  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000036c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002029  00000000  00000000  00003820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d4  00000000  00000000  00005849  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007fe  00000000  00000000  0000611d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c38  00000000  00000000  0000691c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fc4  00000000  00000000  00007554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001dd3  00000000  00000000  00008518  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__vector_1>
       8:	0c 94 03 02 	jmp	0x406	; 0x406 <__vector_2>
       c:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_3>
      10:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__vector_4>
      14:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__vector_5>
      18:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__vector_6>
      1c:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__vector_7>
      20:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__vector_8>
      24:	0c 94 14 03 	jmp	0x628	; 0x628 <__vector_9>
      28:	0c 94 3b 03 	jmp	0x676	; 0x676 <__vector_10>
      2c:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <__vector_11>
      30:	0c 94 89 03 	jmp	0x712	; 0x712 <__vector_12>
      34:	0c 94 b0 03 	jmp	0x760	; 0x760 <__vector_13>
      38:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <__vector_14>
      3c:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <__vector_15>
      40:	0c 94 25 04 	jmp	0x84a	; 0x84a <__vector_16>
      44:	0c 94 4c 04 	jmp	0x898	; 0x898 <__vector_17>
      48:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__vector_18>
      4c:	0c 94 9a 04 	jmp	0x934	; 0x934 <__vector_19>
      50:	0c 94 c1 04 	jmp	0x982	; 0x982 <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3a       	cpi	r26, 0xAD	; 173
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b8 00 	call	0x170	; 0x170 <main>
      8a:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BCM_Init>:
 */
#include "BCM_Send.h"
static uint8_t u8_Is_Intialized=0;

ERROR_STATUS BCM_Init (const BCM_ConfigType * ConfigPtr )
{uint8_t ret=E_OK;
      92:	0f 93       	push	r16

if(ConfigPtr == NULL){ret=NULL_PTR+BCM_MODULE;}
      94:	00 97       	sbiw	r24, 0x00	; 0
      96:	b1 f1       	breq	.+108    	; 0x104 <BCM_Init+0x72>
else{
/*Intialize SPI..*/
switch (ConfigPtr->u8_channel_Protcol) {
      98:	fc 01       	movw	r30, r24
      9a:	80 81       	ld	r24, Z
      9c:	82 30       	cpi	r24, 0x02	; 2
      9e:	29 f0       	breq	.+10     	; 0xaa <BCM_Init+0x18>
      a0:	83 30       	cpi	r24, 0x03	; 3
      a2:	f1 f0       	breq	.+60     	; 0xe0 <BCM_Init+0x4e>
      a4:	81 30       	cpi	r24, 0x01	; 1
      a6:	81 f5       	brne	.+96     	; 0x108 <BCM_Init+0x76>
      a8:	0b c0       	rjmp	.+22     	; 0xc0 <BCM_Init+0x2e>
  case SPI:
  u8_Is_Intialized++;
      aa:	80 91 7a 00 	lds	r24, 0x007A
      ae:	8f 5f       	subi	r24, 0xFF	; 255
      b0:	80 93 7a 00 	sts	0x007A, r24
	SPI_Init();
      b4:	0e 94 68 05 	call	0xad0	; 0xad0 <SPI_Init>
  Enable_communication_interrupt();
      b8:	0e 94 bf 08 	call	0x117e	; 0x117e <Enable_communication_interrupt>
 */
#include "BCM_Send.h"
static uint8_t u8_Is_Intialized=0;

ERROR_STATUS BCM_Init (const BCM_ConfigType * ConfigPtr )
{uint8_t ret=E_OK;
      bc:	80 e0       	ldi	r24, 0x00	; 0
switch (ConfigPtr->u8_channel_Protcol) {
  case SPI:
  u8_Is_Intialized++;
	SPI_Init();
  Enable_communication_interrupt();
  break;
      be:	25 c0       	rjmp	.+74     	; 0x10a <BCM_Init+0x78>
  case UART:
u8_Is_Intialized++;
      c0:	80 91 7a 00 	lds	r24, 0x007A
      c4:	8f 5f       	subi	r24, 0xFF	; 255
      c6:	80 93 7a 00 	sts	0x007A, r24
  Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
      ca:	87 e6       	ldi	r24, 0x67	; 103
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	40 e0       	ldi	r20, 0x00	; 0
      d0:	23 e0       	ldi	r18, 0x03	; 3
      d2:	00 e0       	ldi	r16, 0x00	; 0
      d4:	0e 94 5d 08 	call	0x10ba	; 0x10ba <Uart_Init>
	Enable_communication_interrupt();
      d8:	0e 94 bf 08 	call	0x117e	; 0x117e <Enable_communication_interrupt>
 */
#include "BCM_Send.h"
static uint8_t u8_Is_Intialized=0;

ERROR_STATUS BCM_Init (const BCM_ConfigType * ConfigPtr )
{uint8_t ret=E_OK;
      dc:	80 e0       	ldi	r24, 0x00	; 0
  break;
  case UART:
u8_Is_Intialized++;
  Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
	Enable_communication_interrupt();
  break;
      de:	15 c0       	rjmp	.+42     	; 0x10a <BCM_Init+0x78>
  case UARTANDSPI:
  u8_Is_Intialized++;
      e0:	80 91 7a 00 	lds	r24, 0x007A
      e4:	8f 5f       	subi	r24, 0xFF	; 255
      e6:	80 93 7a 00 	sts	0x007A, r24
  SPI_Init();
      ea:	0e 94 68 05 	call	0xad0	; 0xad0 <SPI_Init>
  Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
      ee:	87 e6       	ldi	r24, 0x67	; 103
      f0:	60 e0       	ldi	r22, 0x00	; 0
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	23 e0       	ldi	r18, 0x03	; 3
      f6:	00 e0       	ldi	r16, 0x00	; 0
      f8:	0e 94 5d 08 	call	0x10ba	; 0x10ba <Uart_Init>
	Enable_communication_interrupt();
      fc:	0e 94 bf 08 	call	0x117e	; 0x117e <Enable_communication_interrupt>
 */
#include "BCM_Send.h"
static uint8_t u8_Is_Intialized=0;

ERROR_STATUS BCM_Init (const BCM_ConfigType * ConfigPtr )
{uint8_t ret=E_OK;
     100:	80 e0       	ldi	r24, 0x00	; 0
  case UARTANDSPI:
  u8_Is_Intialized++;
  SPI_Init();
  Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
	Enable_communication_interrupt();
  break;
     102:	03 c0       	rjmp	.+6      	; 0x10a <BCM_Init+0x78>
static uint8_t u8_Is_Intialized=0;

ERROR_STATUS BCM_Init (const BCM_ConfigType * ConfigPtr )
{uint8_t ret=E_OK;

if(ConfigPtr == NULL){ret=NULL_PTR+BCM_MODULE;}
     104:	84 e3       	ldi	r24, 0x34	; 52
     106:	01 c0       	rjmp	.+2      	; 0x10a <BCM_Init+0x78>
  SPI_Init();
  Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
	Enable_communication_interrupt();
  break;
  case I2C:
  ret=INVALID_PARM+BCM_MODULE;
     108:	8a e3       	ldi	r24, 0x3A	; 58

}
}

return ret;
}
     10a:	0f 91       	pop	r16
     10c:	08 95       	ret

0000010e <BCM_DeInit>:
ERROR_STATUS BCM_DeInit (const BCM_ConfigType * ConfigPtr)
{
uint8_t ret=E_OK;
if(u8_Is_Intialized==1)
     10e:	20 91 7a 00 	lds	r18, 0x007A
     112:	21 30       	cpi	r18, 0x01	; 1
     114:	19 f5       	brne	.+70     	; 0x15c <BCM_DeInit+0x4e>
{
  switch (ConfigPtr->u8_channel_Protcol) {
     116:	fc 01       	movw	r30, r24
     118:	80 81       	ld	r24, Z
     11a:	82 30       	cpi	r24, 0x02	; 2
     11c:	59 f0       	breq	.+22     	; 0x134 <BCM_DeInit+0x26>
     11e:	83 30       	cpi	r24, 0x03	; 3
     120:	18 f4       	brcc	.+6      	; 0x128 <BCM_DeInit+0x1a>
     122:	81 30       	cpi	r24, 0x01	; 1
     124:	29 f4       	brne	.+10     	; 0x130 <BCM_DeInit+0x22>
     126:	0c c0       	rjmp	.+24     	; 0x140 <BCM_DeInit+0x32>
     128:	83 30       	cpi	r24, 0x03	; 3
     12a:	81 f0       	breq	.+32     	; 0x14c <BCM_DeInit+0x3e>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	d1 f0       	breq	.+52     	; 0x164 <BCM_DeInit+0x56>

return ret;
}
ERROR_STATUS BCM_DeInit (const BCM_ConfigType * ConfigPtr)
{
uint8_t ret=E_OK;
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	08 95       	ret
if(u8_Is_Intialized==1)
{
  switch (ConfigPtr->u8_channel_Protcol) {
  case SPI:
  u8_Is_Intialized--;
     134:	10 92 7a 00 	sts	0x007A, r1
	SPI_De_Init();
     138:	0e 94 a7 05 	call	0xb4e	; 0xb4e <SPI_De_Init>

return ret;
}
ERROR_STATUS BCM_DeInit (const BCM_ConfigType * ConfigPtr)
{
uint8_t ret=E_OK;
     13c:	80 e0       	ldi	r24, 0x00	; 0
{
  switch (ConfigPtr->u8_channel_Protcol) {
  case SPI:
  u8_Is_Intialized--;
	SPI_De_Init();
  break;
     13e:	08 95       	ret
  case UART:
u8_Is_Intialized--;
     140:	10 92 7a 00 	sts	0x007A, r1
Uart_De_Init();
     144:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Uart_De_Init>

return ret;
}
ERROR_STATUS BCM_DeInit (const BCM_ConfigType * ConfigPtr)
{
uint8_t ret=E_OK;
     148:	80 e0       	ldi	r24, 0x00	; 0
	SPI_De_Init();
  break;
  case UART:
u8_Is_Intialized--;
Uart_De_Init();
  break;
     14a:	08 95       	ret
  case UARTANDSPI:
  u8_Is_Intialized--;
     14c:	10 92 7a 00 	sts	0x007A, r1
  SPI_De_Init();
     150:	0e 94 a7 05 	call	0xb4e	; 0xb4e <SPI_De_Init>
  Uart_De_Init();
     154:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Uart_De_Init>

return ret;
}
ERROR_STATUS BCM_DeInit (const BCM_ConfigType * ConfigPtr)
{
uint8_t ret=E_OK;
     158:	80 e0       	ldi	r24, 0x00	; 0
  break;
  case UARTANDSPI:
  u8_Is_Intialized--;
  SPI_De_Init();
  Uart_De_Init();
  break;
     15a:	08 95       	ret
  case I2C:
  ret=INVALID_PARM+BCM_MODULE;
  break;
}
}else if(u8_Is_Intialized > 1){
     15c:	22 30       	cpi	r18, 0x02	; 2
     15e:	20 f0       	brcs	.+8      	; 0x168 <BCM_DeInit+0x5a>
ret=MULTIPLE_INIT+BCM_MODULE;
     160:	88 e3       	ldi	r24, 0x38	; 56
     162:	08 95       	ret
  u8_Is_Intialized--;
  SPI_De_Init();
  Uart_De_Init();
  break;
  case I2C:
  ret=INVALID_PARM+BCM_MODULE;
     164:	8a e3       	ldi	r24, 0x3A	; 58
     166:	08 95       	ret
  break;
}
}else if(u8_Is_Intialized > 1){
ret=MULTIPLE_INIT+BCM_MODULE;
}else{
ret = NOT_INIT+BCM_MODULE;
     168:	86 e3       	ldi	r24, 0x36	; 54
}
return ret;
}
     16a:	08 95       	ret

0000016c <BCM_TxDispatcher>:
{
uint8_t ret=E_OK;


return ret;
}
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	08 95       	ret

00000170 <main>:
 */
 #include "BCM_Send.h"
 volatile uint8_t u8_DATA='T';
int main(void)
{
	gpioPinDirection(GPIOB,BIT3,OUTPUT);
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	68 e0       	ldi	r22, 0x08	; 8
     174:	4f ef       	ldi	r20, 0xFF	; 255
     176:	0e 94 1a 01 	call	0x234	; 0x234 <gpioPinDirection>
	Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
     17a:	87 e6       	ldi	r24, 0x67	; 103
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	40 e0       	ldi	r20, 0x00	; 0
     180:	23 e0       	ldi	r18, 0x03	; 3
     182:	00 e0       	ldi	r16, 0x00	; 0
     184:	0e 94 5d 08 	call	0x10ba	; 0x10ba <Uart_Init>
	Enable_communication_interrupt();
     188:	0e 94 bf 08 	call	0x117e	; 0x117e <Enable_communication_interrupt>
	SPI_Init();
     18c:	0e 94 68 05 	call	0xad0	; 0xad0 <SPI_Init>
	//Led_On(LED_0);
	//Uart_tryansmitfirstbyte(data_signature);
  //u8_DATA=UDR;
	SPDR=u8_DATA;
     190:	80 91 65 00 	lds	r24, 0x0065
     194:	8f b9       	out	0x0f, r24	; 15
     196:	ff cf       	rjmp	.-2      	; 0x196 <main+0x26>

00000198 <gpioPortDirection>:
 * @param value: set the port value and takes the following values
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */

switch (u8_port)	
     198:	81 30       	cpi	r24, 0x01	; 1
     19a:	49 f0       	breq	.+18     	; 0x1ae <gpioPortDirection+0x16>
     19c:	81 30       	cpi	r24, 0x01	; 1
     19e:	28 f0       	brcs	.+10     	; 0x1aa <gpioPortDirection+0x12>
     1a0:	82 30       	cpi	r24, 0x02	; 2
     1a2:	39 f0       	breq	.+14     	; 0x1b2 <gpioPortDirection+0x1a>
     1a4:	83 30       	cpi	r24, 0x03	; 3
     1a6:	41 f4       	brne	.+16     	; 0x1b8 <gpioPortDirection+0x20>
     1a8:	06 c0       	rjmp	.+12     	; 0x1b6 <gpioPortDirection+0x1e>
{	case GPIOA:
	PORTA_DIR = u8_direction;
     1aa:	6a bb       	out	0x1a, r22	; 26
	break;
     1ac:	08 95       	ret
	case GPIOB:
	PORTB_DIR = u8_direction;
     1ae:	67 bb       	out	0x17, r22	; 23
	break;
     1b0:	08 95       	ret
	case GPIOC:
	PORTC_DIR = u8_direction;
     1b2:	64 bb       	out	0x14, r22	; 20
	break;
     1b4:	08 95       	ret
	case GPIOD:
	PORTD_DIR = u8_direction;
     1b6:	61 bb       	out	0x11, r22	; 17
     1b8:	08 95       	ret

000001ba <gpioPortWrite>:
}

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	
switch (u8_port)	
     1ba:	81 30       	cpi	r24, 0x01	; 1
     1bc:	49 f0       	breq	.+18     	; 0x1d0 <gpioPortWrite+0x16>
     1be:	81 30       	cpi	r24, 0x01	; 1
     1c0:	28 f0       	brcs	.+10     	; 0x1cc <gpioPortWrite+0x12>
     1c2:	82 30       	cpi	r24, 0x02	; 2
     1c4:	39 f0       	breq	.+14     	; 0x1d4 <gpioPortWrite+0x1a>
     1c6:	83 30       	cpi	r24, 0x03	; 3
     1c8:	41 f4       	brne	.+16     	; 0x1da <gpioPortWrite+0x20>
     1ca:	06 c0       	rjmp	.+12     	; 0x1d8 <gpioPortWrite+0x1e>
{	case GPIOA:
	PORTA_DATA = u8_value;
     1cc:	6b bb       	out	0x1b, r22	; 27
	break;
     1ce:	08 95       	ret
	case GPIOB:
	PORTB_DATA = u8_value;
     1d0:	68 bb       	out	0x18, r22	; 24
	break;
     1d2:	08 95       	ret
	case GPIOC:
	PORTC_DATA = u8_value;
     1d4:	65 bb       	out	0x15, r22	; 21
	break;
     1d6:	08 95       	ret
	case GPIOD:
	PORTD_DATA = u8_value;
     1d8:	62 bb       	out	0x12, r22	; 18
     1da:	08 95       	ret

000001dc <gpioPortToggle>:
	
}
void gpioPortToggle(uint8_t u8_port)
{
	
switch (u8_port)	
     1dc:	81 30       	cpi	r24, 0x01	; 1
     1de:	59 f0       	breq	.+22     	; 0x1f6 <gpioPortToggle+0x1a>
     1e0:	81 30       	cpi	r24, 0x01	; 1
     1e2:	28 f0       	brcs	.+10     	; 0x1ee <gpioPortToggle+0x12>
     1e4:	82 30       	cpi	r24, 0x02	; 2
     1e6:	59 f0       	breq	.+22     	; 0x1fe <gpioPortToggle+0x22>
     1e8:	83 30       	cpi	r24, 0x03	; 3
     1ea:	81 f4       	brne	.+32     	; 0x20c <gpioPortToggle+0x30>
     1ec:	0c c0       	rjmp	.+24     	; 0x206 <gpioPortToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^= HIGH;
     1ee:	8b b3       	in	r24, 0x1b	; 27
     1f0:	80 95       	com	r24
     1f2:	8b bb       	out	0x1b, r24	; 27
	break;
     1f4:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^= HIGH;
     1f6:	88 b3       	in	r24, 0x18	; 24
     1f8:	80 95       	com	r24
     1fa:	88 bb       	out	0x18, r24	; 24
	break;
     1fc:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^= HIGH;
     1fe:	85 b3       	in	r24, 0x15	; 21
     200:	80 95       	com	r24
     202:	85 bb       	out	0x15, r24	; 21
	break;
     204:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^= HIGH;
     206:	82 b3       	in	r24, 0x12	; 18
     208:	80 95       	com	r24
     20a:	82 bb       	out	0x12, r24	; 18
     20c:	08 95       	ret

0000020e <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
	
switch (u8_port)	
     20e:	81 30       	cpi	r24, 0x01	; 1
     210:	49 f0       	breq	.+18     	; 0x224 <gpioPortRead+0x16>
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	28 f0       	brcs	.+10     	; 0x220 <gpioPortRead+0x12>
     216:	82 30       	cpi	r24, 0x02	; 2
     218:	39 f0       	breq	.+14     	; 0x228 <gpioPortRead+0x1a>
     21a:	83 30       	cpi	r24, 0x03	; 3
     21c:	49 f4       	brne	.+18     	; 0x230 <gpioPortRead+0x22>
     21e:	06 c0       	rjmp	.+12     	; 0x22c <gpioPortRead+0x1e>
{	case GPIOA:
	U8_ret_Port_data=PORTA_DATA & HIGH;
     220:	8b b3       	in	r24, 0x1b	; 27
	break;
     222:	08 95       	ret
	case GPIOB:
	U8_ret_Port_data=PORTB_DATA & HIGH;
     224:	88 b3       	in	r24, 0x18	; 24
	break;
     226:	08 95       	ret
	case GPIOC:
	U8_ret_Port_data=PORTC_DATA & HIGH;
     228:	85 b3       	in	r24, 0x15	; 21
	break;
     22a:	08 95       	ret
	case GPIOD:
	U8_ret_Port_data=PORTD_DATA & HIGH;
     22c:	82 b3       	in	r24, 0x12	; 18
	break;
     22e:	08 95       	ret
	
}

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
     230:	80 e0       	ldi	r24, 0x00	; 0
	break;
	
}

return 	U8_ret_Port_data;
}
     232:	08 95       	ret

00000234 <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
switch(u8_direction){
     234:	44 23       	and	r20, r20
     236:	19 f0       	breq	.+6      	; 0x23e <gpioPinDirection+0xa>
     238:	4f 3f       	cpi	r20, 0xFF	; 255
     23a:	d1 f5       	brne	.+116    	; 0x2b0 <gpioPinDirection+0x7c>
     23c:	21 c0       	rjmp	.+66     	; 0x280 <gpioPinDirection+0x4c>
case INPUT:
{
switch (u8_port)	
     23e:	81 30       	cpi	r24, 0x01	; 1
     240:	69 f0       	breq	.+26     	; 0x25c <gpioPinDirection+0x28>
     242:	81 30       	cpi	r24, 0x01	; 1
     244:	28 f0       	brcs	.+10     	; 0x250 <gpioPinDirection+0x1c>
     246:	82 30       	cpi	r24, 0x02	; 2
     248:	79 f0       	breq	.+30     	; 0x268 <gpioPinDirection+0x34>
     24a:	83 30       	cpi	r24, 0x03	; 3
     24c:	c9 f4       	brne	.+50     	; 0x280 <gpioPinDirection+0x4c>
     24e:	12 c0       	rjmp	.+36     	; 0x274 <gpioPinDirection+0x40>
{	case GPIOA:
	PORTA_DIR &=(~u8_pins);   // 0b01111111
     250:	8a b3       	in	r24, 0x1a	; 26
     252:	96 2f       	mov	r25, r22
     254:	90 95       	com	r25
     256:	89 23       	and	r24, r25
     258:	8a bb       	out	0x1a, r24	; 26
     25a:	1b c0       	rjmp	.+54     	; 0x292 <gpioPinDirection+0x5e>
	break;
	case GPIOB:
	PORTB_DIR &=(~u8_pins);
     25c:	87 b3       	in	r24, 0x17	; 23
     25e:	96 2f       	mov	r25, r22
     260:	90 95       	com	r25
     262:	89 23       	and	r24, r25
     264:	87 bb       	out	0x17, r24	; 23
     266:	19 c0       	rjmp	.+50     	; 0x29a <gpioPinDirection+0x66>
	break;
	case GPIOC:
	PORTC_DIR &=(~u8_pins);
     268:	84 b3       	in	r24, 0x14	; 20
     26a:	96 2f       	mov	r25, r22
     26c:	90 95       	com	r25
     26e:	89 23       	and	r24, r25
     270:	84 bb       	out	0x14, r24	; 20
     272:	17 c0       	rjmp	.+46     	; 0x2a2 <gpioPinDirection+0x6e>
	break;
	case GPIOD:
	PORTD_DIR &=(~u8_pins);
     274:	81 b3       	in	r24, 0x11	; 17
     276:	96 2f       	mov	r25, r22
     278:	90 95       	com	r25
     27a:	89 23       	and	r24, r25
     27c:	81 bb       	out	0x11, r24	; 17
     27e:	15 c0       	rjmp	.+42     	; 0x2aa <gpioPinDirection+0x76>
	break;
	
}
}
case OUTPUT:{
switch (u8_port)	
     280:	81 30       	cpi	r24, 0x01	; 1
     282:	59 f0       	breq	.+22     	; 0x29a <gpioPinDirection+0x66>
     284:	81 30       	cpi	r24, 0x01	; 1
     286:	28 f0       	brcs	.+10     	; 0x292 <gpioPinDirection+0x5e>
     288:	82 30       	cpi	r24, 0x02	; 2
     28a:	59 f0       	breq	.+22     	; 0x2a2 <gpioPinDirection+0x6e>
     28c:	83 30       	cpi	r24, 0x03	; 3
     28e:	81 f4       	brne	.+32     	; 0x2b0 <gpioPinDirection+0x7c>
     290:	0c c0       	rjmp	.+24     	; 0x2aa <gpioPinDirection+0x76>
{	case GPIOA:
	PORTA_DIR |=(u8_pins);
     292:	8a b3       	in	r24, 0x1a	; 26
     294:	68 2b       	or	r22, r24
     296:	6a bb       	out	0x1a, r22	; 26
	break;
     298:	08 95       	ret
	case GPIOB:
	PORTB_DIR |=(u8_pins);
     29a:	87 b3       	in	r24, 0x17	; 23
     29c:	68 2b       	or	r22, r24
     29e:	67 bb       	out	0x17, r22	; 23
	break;
     2a0:	08 95       	ret
	case GPIOC:
	PORTC_DIR |=(u8_pins);
     2a2:	84 b3       	in	r24, 0x14	; 20
     2a4:	68 2b       	or	r22, r24
     2a6:	64 bb       	out	0x14, r22	; 20
	break;
     2a8:	08 95       	ret
	case GPIOD:
	PORTD_DIR |=(u8_pins);
     2aa:	81 b3       	in	r24, 0x11	; 17
     2ac:	68 2b       	or	r22, r24
     2ae:	61 bb       	out	0x11, r22	; 17
     2b0:	08 95       	ret

000002b2 <gpioPinWrite>:
	
	
}

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{switch(u8_value){
     2b2:	44 23       	and	r20, r20
     2b4:	19 f0       	breq	.+6      	; 0x2bc <gpioPinWrite+0xa>
     2b6:	4f 3f       	cpi	r20, 0xFF	; 255
     2b8:	b1 f5       	brne	.+108    	; 0x326 <gpioPinWrite+0x74>
     2ba:	1d c0       	rjmp	.+58     	; 0x2f6 <gpioPinWrite+0x44>
case LOW:
{
switch (u8_port)	
     2bc:	81 30       	cpi	r24, 0x01	; 1
     2be:	61 f0       	breq	.+24     	; 0x2d8 <gpioPinWrite+0x26>
     2c0:	81 30       	cpi	r24, 0x01	; 1
     2c2:	28 f0       	brcs	.+10     	; 0x2ce <gpioPinWrite+0x1c>
     2c4:	82 30       	cpi	r24, 0x02	; 2
     2c6:	69 f0       	breq	.+26     	; 0x2e2 <gpioPinWrite+0x30>
     2c8:	83 30       	cpi	r24, 0x03	; 3
     2ca:	69 f5       	brne	.+90     	; 0x326 <gpioPinWrite+0x74>
     2cc:	0f c0       	rjmp	.+30     	; 0x2ec <gpioPinWrite+0x3a>
{	case GPIOA:
	PORTA_DATA &= ~(u8_pins);   // 0b01111111
     2ce:	8b b3       	in	r24, 0x1b	; 27
     2d0:	60 95       	com	r22
     2d2:	68 23       	and	r22, r24
     2d4:	6b bb       	out	0x1b, r22	; 27
	break;
     2d6:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(u8_pins);
     2d8:	88 b3       	in	r24, 0x18	; 24
     2da:	60 95       	com	r22
     2dc:	68 23       	and	r22, r24
     2de:	68 bb       	out	0x18, r22	; 24
	break;
     2e0:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(u8_pins);
     2e2:	85 b3       	in	r24, 0x15	; 21
     2e4:	60 95       	com	r22
     2e6:	68 23       	and	r22, r24
     2e8:	65 bb       	out	0x15, r22	; 21
	break;
     2ea:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(u8_pins);
     2ec:	82 b3       	in	r24, 0x12	; 18
     2ee:	60 95       	com	r22
     2f0:	68 23       	and	r22, r24
     2f2:	62 bb       	out	0x12, r22	; 18
	break;
     2f4:	08 95       	ret
	
}
break;
}
case HIGH:{
switch (u8_port)	
     2f6:	81 30       	cpi	r24, 0x01	; 1
     2f8:	59 f0       	breq	.+22     	; 0x310 <gpioPinWrite+0x5e>
     2fa:	81 30       	cpi	r24, 0x01	; 1
     2fc:	28 f0       	brcs	.+10     	; 0x308 <gpioPinWrite+0x56>
     2fe:	82 30       	cpi	r24, 0x02	; 2
     300:	59 f0       	breq	.+22     	; 0x318 <gpioPinWrite+0x66>
     302:	83 30       	cpi	r24, 0x03	; 3
     304:	81 f4       	brne	.+32     	; 0x326 <gpioPinWrite+0x74>
     306:	0c c0       	rjmp	.+24     	; 0x320 <gpioPinWrite+0x6e>
{	case GPIOA:
	PORTA_DATA |=(u8_pins);
     308:	8b b3       	in	r24, 0x1b	; 27
     30a:	68 2b       	or	r22, r24
     30c:	6b bb       	out	0x1b, r22	; 27
	break;
     30e:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(u8_pins);
     310:	88 b3       	in	r24, 0x18	; 24
     312:	68 2b       	or	r22, r24
     314:	68 bb       	out	0x18, r22	; 24
	break;
     316:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(u8_pins);
     318:	85 b3       	in	r24, 0x15	; 21
     31a:	68 2b       	or	r22, r24
     31c:	65 bb       	out	0x15, r22	; 21
	break;
     31e:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(u8_pins);
     320:	82 b3       	in	r24, 0x12	; 18
     322:	68 2b       	or	r22, r24
     324:	62 bb       	out	0x12, r22	; 18
     326:	08 95       	ret

00000328 <gpioPinToggle>:
}

}
void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
switch (u8_port)	
     328:	81 30       	cpi	r24, 0x01	; 1
     32a:	59 f0       	breq	.+22     	; 0x342 <gpioPinToggle+0x1a>
     32c:	81 30       	cpi	r24, 0x01	; 1
     32e:	28 f0       	brcs	.+10     	; 0x33a <gpioPinToggle+0x12>
     330:	82 30       	cpi	r24, 0x02	; 2
     332:	59 f0       	breq	.+22     	; 0x34a <gpioPinToggle+0x22>
     334:	83 30       	cpi	r24, 0x03	; 3
     336:	81 f4       	brne	.+32     	; 0x358 <gpioPinToggle+0x30>
     338:	0c c0       	rjmp	.+24     	; 0x352 <gpioPinToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^=(u8_pins);
     33a:	8b b3       	in	r24, 0x1b	; 27
     33c:	68 27       	eor	r22, r24
     33e:	6b bb       	out	0x1b, r22	; 27
	break;
     340:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^=(u8_pins);
     342:	88 b3       	in	r24, 0x18	; 24
     344:	68 27       	eor	r22, r24
     346:	68 bb       	out	0x18, r22	; 24
	break;
     348:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^=(u8_pins);
     34a:	85 b3       	in	r24, 0x15	; 21
     34c:	68 27       	eor	r22, r24
     34e:	65 bb       	out	0x15, r22	; 21
	break;
     350:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^=(u8_pins);
     352:	82 b3       	in	r24, 0x12	; 18
     354:	68 27       	eor	r22, r24
     356:	62 bb       	out	0x12, r22	; 18
     358:	08 95       	ret

0000035a <gpioPinRead>:
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
switch (u8_port)	
     35a:	81 30       	cpi	r24, 0x01	; 1
     35c:	51 f0       	breq	.+20     	; 0x372 <gpioPinRead+0x18>
     35e:	81 30       	cpi	r24, 0x01	; 1
     360:	28 f0       	brcs	.+10     	; 0x36c <gpioPinRead+0x12>
     362:	82 30       	cpi	r24, 0x02	; 2
     364:	49 f0       	breq	.+18     	; 0x378 <gpioPinRead+0x1e>
     366:	83 30       	cpi	r24, 0x03	; 3
     368:	69 f4       	brne	.+26     	; 0x384 <gpioPinRead+0x2a>
     36a:	09 c0       	rjmp	.+18     	; 0x37e <gpioPinRead+0x24>
{	case GPIOA:
	U8_ret_BIT_data=(PORTA_PIN & u8_pin);
     36c:	89 b3       	in	r24, 0x19	; 25
     36e:	68 23       	and	r22, r24
	break;
     370:	0a c0       	rjmp	.+20     	; 0x386 <gpioPinRead+0x2c>
	case GPIOB:
	U8_ret_BIT_data=(PORTB_PIN & u8_pin);
     372:	86 b3       	in	r24, 0x16	; 22
     374:	68 23       	and	r22, r24
	break;
     376:	07 c0       	rjmp	.+14     	; 0x386 <gpioPinRead+0x2c>
	case GPIOC:
	U8_ret_BIT_data=(PORTC_PIN & u8_pin);
     378:	83 b3       	in	r24, 0x13	; 19
     37a:	68 23       	and	r22, r24
	break;
     37c:	04 c0       	rjmp	.+8      	; 0x386 <gpioPinRead+0x2c>
	case GPIOD:
	U8_ret_BIT_data=(PORTD_PIN & u8_pin);
     37e:	80 b3       	in	r24, 0x10	; 16
     380:	68 23       	and	r22, r24
	break;
     382:	01 c0       	rjmp	.+2      	; 0x386 <gpioPinRead+0x2c>
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
     384:	60 e0       	ldi	r22, 0x00	; 0
}
	
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	66 23       	and	r22, r22
     38a:	09 f4       	brne	.+2      	; 0x38e <gpioPinRead+0x34>
     38c:	80 e0       	ldi	r24, 0x00	; 0
if(U8_ret_BIT_data > 0)
{
	U8_ret_BIT_data = 1;
}
return U8_ret_BIT_data;
     38e:	08 95       	ret

00000390 <G_interrupt_Enable>:
ptr_to_Fun SPM_RDY;

void G_interrupt_Enable(void)
{
//	sei();
 SREG |=(0x80);
     390:	8f b7       	in	r24, 0x3f	; 63
     392:	80 68       	ori	r24, 0x80	; 128
     394:	8f bf       	out	0x3f, r24	; 63
}
     396:	08 95       	ret

00000398 <EX_interrupt_enable2>:
void EX_interrupt_enable2(void)
{
gpioPinDirection(GPIOB,BIT2,LOW);
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	64 e0       	ldi	r22, 0x04	; 4
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	0e 94 1a 01 	call	0x234	; 0x234 <gpioPinDirection>
SET_BIT(GICR,INT2);
     3a2:	8b b7       	in	r24, 0x3b	; 59
     3a4:	80 62       	ori	r24, 0x20	; 32
     3a6:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCSR,6);
     3a8:	84 b7       	in	r24, 0x34	; 52
     3aa:	80 64       	ori	r24, 0x40	; 64
     3ac:	84 bf       	out	0x34, r24	; 52
}
     3ae:	08 95       	ret

000003b0 <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     3b0:	8f b7       	in	r24, 0x3f	; 63
     3b2:	8f 77       	andi	r24, 0x7F	; 127
     3b4:	8f bf       	out	0x3f, r24	; 63
}
     3b6:	08 95       	ret

000003b8 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     3b8:	1f 92       	push	r1
     3ba:	0f 92       	push	r0
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	0f 92       	push	r0
     3c0:	11 24       	eor	r1, r1
     3c2:	2f 93       	push	r18
     3c4:	3f 93       	push	r19
     3c6:	4f 93       	push	r20
     3c8:	5f 93       	push	r21
     3ca:	6f 93       	push	r22
     3cc:	7f 93       	push	r23
     3ce:	8f 93       	push	r24
     3d0:	9f 93       	push	r25
     3d2:	af 93       	push	r26
     3d4:	bf 93       	push	r27
     3d6:	ef 93       	push	r30
     3d8:	ff 93       	push	r31
  INT0_external_interrupt();
     3da:	e0 91 97 00 	lds	r30, 0x0097
     3de:	f0 91 98 00 	lds	r31, 0x0098
     3e2:	09 95       	icall
}
     3e4:	ff 91       	pop	r31
     3e6:	ef 91       	pop	r30
     3e8:	bf 91       	pop	r27
     3ea:	af 91       	pop	r26
     3ec:	9f 91       	pop	r25
     3ee:	8f 91       	pop	r24
     3f0:	7f 91       	pop	r23
     3f2:	6f 91       	pop	r22
     3f4:	5f 91       	pop	r21
     3f6:	4f 91       	pop	r20
     3f8:	3f 91       	pop	r19
     3fa:	2f 91       	pop	r18
     3fc:	0f 90       	pop	r0
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	0f 90       	pop	r0
     402:	1f 90       	pop	r1
     404:	18 95       	reti

00000406 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
     406:	1f 92       	push	r1
     408:	0f 92       	push	r0
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	0f 92       	push	r0
     40e:	11 24       	eor	r1, r1
     410:	2f 93       	push	r18
     412:	3f 93       	push	r19
     414:	4f 93       	push	r20
     416:	5f 93       	push	r21
     418:	6f 93       	push	r22
     41a:	7f 93       	push	r23
     41c:	8f 93       	push	r24
     41e:	9f 93       	push	r25
     420:	af 93       	push	r26
     422:	bf 93       	push	r27
     424:	ef 93       	push	r30
     426:	ff 93       	push	r31
  INT1_external_interrupt();
     428:	e0 91 9d 00 	lds	r30, 0x009D
     42c:	f0 91 9e 00 	lds	r31, 0x009E
     430:	09 95       	icall
}
     432:	ff 91       	pop	r31
     434:	ef 91       	pop	r30
     436:	bf 91       	pop	r27
     438:	af 91       	pop	r26
     43a:	9f 91       	pop	r25
     43c:	8f 91       	pop	r24
     43e:	7f 91       	pop	r23
     440:	6f 91       	pop	r22
     442:	5f 91       	pop	r21
     444:	4f 91       	pop	r20
     446:	3f 91       	pop	r19
     448:	2f 91       	pop	r18
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     454:	1f 92       	push	r1
     456:	0f 92       	push	r0
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	0f 92       	push	r0
     45c:	11 24       	eor	r1, r1
     45e:	2f 93       	push	r18
     460:	3f 93       	push	r19
     462:	4f 93       	push	r20
     464:	5f 93       	push	r21
     466:	6f 93       	push	r22
     468:	7f 93       	push	r23
     46a:	8f 93       	push	r24
     46c:	9f 93       	push	r25
     46e:	af 93       	push	r26
     470:	bf 93       	push	r27
     472:	ef 93       	push	r30
     474:	ff 93       	push	r31
  INT2_external_interrupt();
     476:	e0 91 8d 00 	lds	r30, 0x008D
     47a:	f0 91 8e 00 	lds	r31, 0x008E
     47e:	09 95       	icall
}
     480:	ff 91       	pop	r31
     482:	ef 91       	pop	r30
     484:	bf 91       	pop	r27
     486:	af 91       	pop	r26
     488:	9f 91       	pop	r25
     48a:	8f 91       	pop	r24
     48c:	7f 91       	pop	r23
     48e:	6f 91       	pop	r22
     490:	5f 91       	pop	r21
     492:	4f 91       	pop	r20
     494:	3f 91       	pop	r19
     496:	2f 91       	pop	r18
     498:	0f 90       	pop	r0
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	0f 90       	pop	r0
     49e:	1f 90       	pop	r1
     4a0:	18 95       	reti

000004a2 <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     4a2:	1f 92       	push	r1
     4a4:	0f 92       	push	r0
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	0f 92       	push	r0
     4aa:	11 24       	eor	r1, r1
     4ac:	2f 93       	push	r18
     4ae:	3f 93       	push	r19
     4b0:	4f 93       	push	r20
     4b2:	5f 93       	push	r21
     4b4:	6f 93       	push	r22
     4b6:	7f 93       	push	r23
     4b8:	8f 93       	push	r24
     4ba:	9f 93       	push	r25
     4bc:	af 93       	push	r26
     4be:	bf 93       	push	r27
     4c0:	ef 93       	push	r30
     4c2:	ff 93       	push	r31
TIMER2COMP();
     4c4:	e0 91 6e 00 	lds	r30, 0x006E
     4c8:	f0 91 6f 00 	lds	r31, 0x006F
     4cc:	09 95       	icall
}
     4ce:	ff 91       	pop	r31
     4d0:	ef 91       	pop	r30
     4d2:	bf 91       	pop	r27
     4d4:	af 91       	pop	r26
     4d6:	9f 91       	pop	r25
     4d8:	8f 91       	pop	r24
     4da:	7f 91       	pop	r23
     4dc:	6f 91       	pop	r22
     4de:	5f 91       	pop	r21
     4e0:	4f 91       	pop	r20
     4e2:	3f 91       	pop	r19
     4e4:	2f 91       	pop	r18
     4e6:	0f 90       	pop	r0
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	0f 90       	pop	r0
     4ec:	1f 90       	pop	r1
     4ee:	18 95       	reti

000004f0 <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     4f0:	1f 92       	push	r1
     4f2:	0f 92       	push	r0
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	0f 92       	push	r0
     4f8:	11 24       	eor	r1, r1
     4fa:	2f 93       	push	r18
     4fc:	3f 93       	push	r19
     4fe:	4f 93       	push	r20
     500:	5f 93       	push	r21
     502:	6f 93       	push	r22
     504:	7f 93       	push	r23
     506:	8f 93       	push	r24
     508:	9f 93       	push	r25
     50a:	af 93       	push	r26
     50c:	bf 93       	push	r27
     50e:	ef 93       	push	r30
     510:	ff 93       	push	r31
  TIMER2OVF();
     512:	e0 91 6c 00 	lds	r30, 0x006C
     516:	f0 91 6d 00 	lds	r31, 0x006D
     51a:	09 95       	icall
}
     51c:	ff 91       	pop	r31
     51e:	ef 91       	pop	r30
     520:	bf 91       	pop	r27
     522:	af 91       	pop	r26
     524:	9f 91       	pop	r25
     526:	8f 91       	pop	r24
     528:	7f 91       	pop	r23
     52a:	6f 91       	pop	r22
     52c:	5f 91       	pop	r21
     52e:	4f 91       	pop	r20
     530:	3f 91       	pop	r19
     532:	2f 91       	pop	r18
     534:	0f 90       	pop	r0
     536:	0f be       	out	0x3f, r0	; 63
     538:	0f 90       	pop	r0
     53a:	1f 90       	pop	r1
     53c:	18 95       	reti

0000053e <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     53e:	1f 92       	push	r1
     540:	0f 92       	push	r0
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	0f 92       	push	r0
     546:	11 24       	eor	r1, r1
     548:	2f 93       	push	r18
     54a:	3f 93       	push	r19
     54c:	4f 93       	push	r20
     54e:	5f 93       	push	r21
     550:	6f 93       	push	r22
     552:	7f 93       	push	r23
     554:	8f 93       	push	r24
     556:	9f 93       	push	r25
     558:	af 93       	push	r26
     55a:	bf 93       	push	r27
     55c:	ef 93       	push	r30
     55e:	ff 93       	push	r31
  TIMER1CAPT();
     560:	e0 91 9f 00 	lds	r30, 0x009F
     564:	f0 91 a0 00 	lds	r31, 0x00A0
     568:	09 95       	icall
}
     56a:	ff 91       	pop	r31
     56c:	ef 91       	pop	r30
     56e:	bf 91       	pop	r27
     570:	af 91       	pop	r26
     572:	9f 91       	pop	r25
     574:	8f 91       	pop	r24
     576:	7f 91       	pop	r23
     578:	6f 91       	pop	r22
     57a:	5f 91       	pop	r21
     57c:	4f 91       	pop	r20
     57e:	3f 91       	pop	r19
     580:	2f 91       	pop	r18
     582:	0f 90       	pop	r0
     584:	0f be       	out	0x3f, r0	; 63
     586:	0f 90       	pop	r0
     588:	1f 90       	pop	r1
     58a:	18 95       	reti

0000058c <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     58c:	1f 92       	push	r1
     58e:	0f 92       	push	r0
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	0f 92       	push	r0
     594:	11 24       	eor	r1, r1
     596:	2f 93       	push	r18
     598:	3f 93       	push	r19
     59a:	4f 93       	push	r20
     59c:	5f 93       	push	r21
     59e:	6f 93       	push	r22
     5a0:	7f 93       	push	r23
     5a2:	8f 93       	push	r24
     5a4:	9f 93       	push	r25
     5a6:	af 93       	push	r26
     5a8:	bf 93       	push	r27
     5aa:	ef 93       	push	r30
     5ac:	ff 93       	push	r31
TIMER1COMPA();
     5ae:	e0 91 8b 00 	lds	r30, 0x008B
     5b2:	f0 91 8c 00 	lds	r31, 0x008C
     5b6:	09 95       	icall
}
     5b8:	ff 91       	pop	r31
     5ba:	ef 91       	pop	r30
     5bc:	bf 91       	pop	r27
     5be:	af 91       	pop	r26
     5c0:	9f 91       	pop	r25
     5c2:	8f 91       	pop	r24
     5c4:	7f 91       	pop	r23
     5c6:	6f 91       	pop	r22
     5c8:	5f 91       	pop	r21
     5ca:	4f 91       	pop	r20
     5cc:	3f 91       	pop	r19
     5ce:	2f 91       	pop	r18
     5d0:	0f 90       	pop	r0
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	0f 90       	pop	r0
     5d6:	1f 90       	pop	r1
     5d8:	18 95       	reti

000005da <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
     5da:	1f 92       	push	r1
     5dc:	0f 92       	push	r0
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	0f 92       	push	r0
     5e2:	11 24       	eor	r1, r1
     5e4:	2f 93       	push	r18
     5e6:	3f 93       	push	r19
     5e8:	4f 93       	push	r20
     5ea:	5f 93       	push	r21
     5ec:	6f 93       	push	r22
     5ee:	7f 93       	push	r23
     5f0:	8f 93       	push	r24
     5f2:	9f 93       	push	r25
     5f4:	af 93       	push	r26
     5f6:	bf 93       	push	r27
     5f8:	ef 93       	push	r30
     5fa:	ff 93       	push	r31
  TIMER1COMPB();
     5fc:	e0 91 89 00 	lds	r30, 0x0089
     600:	f0 91 8a 00 	lds	r31, 0x008A
     604:	09 95       	icall
}
     606:	ff 91       	pop	r31
     608:	ef 91       	pop	r30
     60a:	bf 91       	pop	r27
     60c:	af 91       	pop	r26
     60e:	9f 91       	pop	r25
     610:	8f 91       	pop	r24
     612:	7f 91       	pop	r23
     614:	6f 91       	pop	r22
     616:	5f 91       	pop	r21
     618:	4f 91       	pop	r20
     61a:	3f 91       	pop	r19
     61c:	2f 91       	pop	r18
     61e:	0f 90       	pop	r0
     620:	0f be       	out	0x3f, r0	; 63
     622:	0f 90       	pop	r0
     624:	1f 90       	pop	r1
     626:	18 95       	reti

00000628 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     628:	1f 92       	push	r1
     62a:	0f 92       	push	r0
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	0f 92       	push	r0
     630:	11 24       	eor	r1, r1
     632:	2f 93       	push	r18
     634:	3f 93       	push	r19
     636:	4f 93       	push	r20
     638:	5f 93       	push	r21
     63a:	6f 93       	push	r22
     63c:	7f 93       	push	r23
     63e:	8f 93       	push	r24
     640:	9f 93       	push	r25
     642:	af 93       	push	r26
     644:	bf 93       	push	r27
     646:	ef 93       	push	r30
     648:	ff 93       	push	r31
  TIMER1OVF();
     64a:	e0 91 a1 00 	lds	r30, 0x00A1
     64e:	f0 91 a2 00 	lds	r31, 0x00A2
     652:	09 95       	icall
}
     654:	ff 91       	pop	r31
     656:	ef 91       	pop	r30
     658:	bf 91       	pop	r27
     65a:	af 91       	pop	r26
     65c:	9f 91       	pop	r25
     65e:	8f 91       	pop	r24
     660:	7f 91       	pop	r23
     662:	6f 91       	pop	r22
     664:	5f 91       	pop	r21
     666:	4f 91       	pop	r20
     668:	3f 91       	pop	r19
     66a:	2f 91       	pop	r18
     66c:	0f 90       	pop	r0
     66e:	0f be       	out	0x3f, r0	; 63
     670:	0f 90       	pop	r0
     672:	1f 90       	pop	r1
     674:	18 95       	reti

00000676 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     676:	1f 92       	push	r1
     678:	0f 92       	push	r0
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	0f 92       	push	r0
     67e:	11 24       	eor	r1, r1
     680:	2f 93       	push	r18
     682:	3f 93       	push	r19
     684:	4f 93       	push	r20
     686:	5f 93       	push	r21
     688:	6f 93       	push	r22
     68a:	7f 93       	push	r23
     68c:	8f 93       	push	r24
     68e:	9f 93       	push	r25
     690:	af 93       	push	r26
     692:	bf 93       	push	r27
     694:	ef 93       	push	r30
     696:	ff 93       	push	r31

  TIMER0COMP();
     698:	e0 91 6a 00 	lds	r30, 0x006A
     69c:	f0 91 6b 00 	lds	r31, 0x006B
     6a0:	09 95       	icall
}
     6a2:	ff 91       	pop	r31
     6a4:	ef 91       	pop	r30
     6a6:	bf 91       	pop	r27
     6a8:	af 91       	pop	r26
     6aa:	9f 91       	pop	r25
     6ac:	8f 91       	pop	r24
     6ae:	7f 91       	pop	r23
     6b0:	6f 91       	pop	r22
     6b2:	5f 91       	pop	r21
     6b4:	4f 91       	pop	r20
     6b6:	3f 91       	pop	r19
     6b8:	2f 91       	pop	r18
     6ba:	0f 90       	pop	r0
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	0f 90       	pop	r0
     6c0:	1f 90       	pop	r1
     6c2:	18 95       	reti

000006c4 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     6c4:	1f 92       	push	r1
     6c6:	0f 92       	push	r0
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	0f 92       	push	r0
     6cc:	11 24       	eor	r1, r1
     6ce:	2f 93       	push	r18
     6d0:	3f 93       	push	r19
     6d2:	4f 93       	push	r20
     6d4:	5f 93       	push	r21
     6d6:	6f 93       	push	r22
     6d8:	7f 93       	push	r23
     6da:	8f 93       	push	r24
     6dc:	9f 93       	push	r25
     6de:	af 93       	push	r26
     6e0:	bf 93       	push	r27
     6e2:	ef 93       	push	r30
     6e4:	ff 93       	push	r31

  TIMER0OVF_INT();
     6e6:	e0 91 8f 00 	lds	r30, 0x008F
     6ea:	f0 91 90 00 	lds	r31, 0x0090
     6ee:	09 95       	icall
}
     6f0:	ff 91       	pop	r31
     6f2:	ef 91       	pop	r30
     6f4:	bf 91       	pop	r27
     6f6:	af 91       	pop	r26
     6f8:	9f 91       	pop	r25
     6fa:	8f 91       	pop	r24
     6fc:	7f 91       	pop	r23
     6fe:	6f 91       	pop	r22
     700:	5f 91       	pop	r21
     702:	4f 91       	pop	r20
     704:	3f 91       	pop	r19
     706:	2f 91       	pop	r18
     708:	0f 90       	pop	r0
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	0f 90       	pop	r0
     70e:	1f 90       	pop	r1
     710:	18 95       	reti

00000712 <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
     712:	1f 92       	push	r1
     714:	0f 92       	push	r0
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	0f 92       	push	r0
     71a:	11 24       	eor	r1, r1
     71c:	2f 93       	push	r18
     71e:	3f 93       	push	r19
     720:	4f 93       	push	r20
     722:	5f 93       	push	r21
     724:	6f 93       	push	r22
     726:	7f 93       	push	r23
     728:	8f 93       	push	r24
     72a:	9f 93       	push	r25
     72c:	af 93       	push	r26
     72e:	bf 93       	push	r27
     730:	ef 93       	push	r30
     732:	ff 93       	push	r31
  SPI_STC();
     734:	e0 91 68 00 	lds	r30, 0x0068
     738:	f0 91 69 00 	lds	r31, 0x0069
     73c:	09 95       	icall
}
     73e:	ff 91       	pop	r31
     740:	ef 91       	pop	r30
     742:	bf 91       	pop	r27
     744:	af 91       	pop	r26
     746:	9f 91       	pop	r25
     748:	8f 91       	pop	r24
     74a:	7f 91       	pop	r23
     74c:	6f 91       	pop	r22
     74e:	5f 91       	pop	r21
     750:	4f 91       	pop	r20
     752:	3f 91       	pop	r19
     754:	2f 91       	pop	r18
     756:	0f 90       	pop	r0
     758:	0f be       	out	0x3f, r0	; 63
     75a:	0f 90       	pop	r0
     75c:	1f 90       	pop	r1
     75e:	18 95       	reti

00000760 <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     760:	1f 92       	push	r1
     762:	0f 92       	push	r0
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	0f 92       	push	r0
     768:	11 24       	eor	r1, r1
     76a:	2f 93       	push	r18
     76c:	3f 93       	push	r19
     76e:	4f 93       	push	r20
     770:	5f 93       	push	r21
     772:	6f 93       	push	r22
     774:	7f 93       	push	r23
     776:	8f 93       	push	r24
     778:	9f 93       	push	r25
     77a:	af 93       	push	r26
     77c:	bf 93       	push	r27
     77e:	ef 93       	push	r30
     780:	ff 93       	push	r31
  USART_RXC();
     782:	e0 91 66 00 	lds	r30, 0x0066
     786:	f0 91 67 00 	lds	r31, 0x0067
     78a:	09 95       	icall
}
     78c:	ff 91       	pop	r31
     78e:	ef 91       	pop	r30
     790:	bf 91       	pop	r27
     792:	af 91       	pop	r26
     794:	9f 91       	pop	r25
     796:	8f 91       	pop	r24
     798:	7f 91       	pop	r23
     79a:	6f 91       	pop	r22
     79c:	5f 91       	pop	r21
     79e:	4f 91       	pop	r20
     7a0:	3f 91       	pop	r19
     7a2:	2f 91       	pop	r18
     7a4:	0f 90       	pop	r0
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	0f 90       	pop	r0
     7aa:	1f 90       	pop	r1
     7ac:	18 95       	reti

000007ae <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     7ae:	1f 92       	push	r1
     7b0:	0f 92       	push	r0
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	0f 92       	push	r0
     7b6:	11 24       	eor	r1, r1
     7b8:	2f 93       	push	r18
     7ba:	3f 93       	push	r19
     7bc:	4f 93       	push	r20
     7be:	5f 93       	push	r21
     7c0:	6f 93       	push	r22
     7c2:	7f 93       	push	r23
     7c4:	8f 93       	push	r24
     7c6:	9f 93       	push	r25
     7c8:	af 93       	push	r26
     7ca:	bf 93       	push	r27
     7cc:	ef 93       	push	r30
     7ce:	ff 93       	push	r31
  USART_UDRE();
     7d0:	e0 91 9b 00 	lds	r30, 0x009B
     7d4:	f0 91 9c 00 	lds	r31, 0x009C
     7d8:	09 95       	icall
}
     7da:	ff 91       	pop	r31
     7dc:	ef 91       	pop	r30
     7de:	bf 91       	pop	r27
     7e0:	af 91       	pop	r26
     7e2:	9f 91       	pop	r25
     7e4:	8f 91       	pop	r24
     7e6:	7f 91       	pop	r23
     7e8:	6f 91       	pop	r22
     7ea:	5f 91       	pop	r21
     7ec:	4f 91       	pop	r20
     7ee:	3f 91       	pop	r19
     7f0:	2f 91       	pop	r18
     7f2:	0f 90       	pop	r0
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	0f 90       	pop	r0
     7f8:	1f 90       	pop	r1
     7fa:	18 95       	reti

000007fc <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     7fc:	1f 92       	push	r1
     7fe:	0f 92       	push	r0
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	0f 92       	push	r0
     804:	11 24       	eor	r1, r1
     806:	2f 93       	push	r18
     808:	3f 93       	push	r19
     80a:	4f 93       	push	r20
     80c:	5f 93       	push	r21
     80e:	6f 93       	push	r22
     810:	7f 93       	push	r23
     812:	8f 93       	push	r24
     814:	9f 93       	push	r25
     816:	af 93       	push	r26
     818:	bf 93       	push	r27
     81a:	ef 93       	push	r30
     81c:	ff 93       	push	r31
  USART_TXC();
     81e:	e0 91 99 00 	lds	r30, 0x0099
     822:	f0 91 9a 00 	lds	r31, 0x009A
     826:	09 95       	icall
}
     828:	ff 91       	pop	r31
     82a:	ef 91       	pop	r30
     82c:	bf 91       	pop	r27
     82e:	af 91       	pop	r26
     830:	9f 91       	pop	r25
     832:	8f 91       	pop	r24
     834:	7f 91       	pop	r23
     836:	6f 91       	pop	r22
     838:	5f 91       	pop	r21
     83a:	4f 91       	pop	r20
     83c:	3f 91       	pop	r19
     83e:	2f 91       	pop	r18
     840:	0f 90       	pop	r0
     842:	0f be       	out	0x3f, r0	; 63
     844:	0f 90       	pop	r0
     846:	1f 90       	pop	r1
     848:	18 95       	reti

0000084a <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     84a:	1f 92       	push	r1
     84c:	0f 92       	push	r0
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	0f 92       	push	r0
     852:	11 24       	eor	r1, r1
     854:	2f 93       	push	r18
     856:	3f 93       	push	r19
     858:	4f 93       	push	r20
     85a:	5f 93       	push	r21
     85c:	6f 93       	push	r22
     85e:	7f 93       	push	r23
     860:	8f 93       	push	r24
     862:	9f 93       	push	r25
     864:	af 93       	push	r26
     866:	bf 93       	push	r27
     868:	ef 93       	push	r30
     86a:	ff 93       	push	r31
  ADC_INT();
     86c:	e0 91 93 00 	lds	r30, 0x0093
     870:	f0 91 94 00 	lds	r31, 0x0094
     874:	09 95       	icall
}
     876:	ff 91       	pop	r31
     878:	ef 91       	pop	r30
     87a:	bf 91       	pop	r27
     87c:	af 91       	pop	r26
     87e:	9f 91       	pop	r25
     880:	8f 91       	pop	r24
     882:	7f 91       	pop	r23
     884:	6f 91       	pop	r22
     886:	5f 91       	pop	r21
     888:	4f 91       	pop	r20
     88a:	3f 91       	pop	r19
     88c:	2f 91       	pop	r18
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
     892:	0f 90       	pop	r0
     894:	1f 90       	pop	r1
     896:	18 95       	reti

00000898 <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
     898:	1f 92       	push	r1
     89a:	0f 92       	push	r0
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	0f 92       	push	r0
     8a0:	11 24       	eor	r1, r1
     8a2:	2f 93       	push	r18
     8a4:	3f 93       	push	r19
     8a6:	4f 93       	push	r20
     8a8:	5f 93       	push	r21
     8aa:	6f 93       	push	r22
     8ac:	7f 93       	push	r23
     8ae:	8f 93       	push	r24
     8b0:	9f 93       	push	r25
     8b2:	af 93       	push	r26
     8b4:	bf 93       	push	r27
     8b6:	ef 93       	push	r30
     8b8:	ff 93       	push	r31
  EE_RDY();
     8ba:	e0 91 95 00 	lds	r30, 0x0095
     8be:	f0 91 96 00 	lds	r31, 0x0096
     8c2:	09 95       	icall
}
     8c4:	ff 91       	pop	r31
     8c6:	ef 91       	pop	r30
     8c8:	bf 91       	pop	r27
     8ca:	af 91       	pop	r26
     8cc:	9f 91       	pop	r25
     8ce:	8f 91       	pop	r24
     8d0:	7f 91       	pop	r23
     8d2:	6f 91       	pop	r22
     8d4:	5f 91       	pop	r21
     8d6:	4f 91       	pop	r20
     8d8:	3f 91       	pop	r19
     8da:	2f 91       	pop	r18
     8dc:	0f 90       	pop	r0
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	0f 90       	pop	r0
     8e2:	1f 90       	pop	r1
     8e4:	18 95       	reti

000008e6 <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
     8e6:	1f 92       	push	r1
     8e8:	0f 92       	push	r0
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	0f 92       	push	r0
     8ee:	11 24       	eor	r1, r1
     8f0:	2f 93       	push	r18
     8f2:	3f 93       	push	r19
     8f4:	4f 93       	push	r20
     8f6:	5f 93       	push	r21
     8f8:	6f 93       	push	r22
     8fa:	7f 93       	push	r23
     8fc:	8f 93       	push	r24
     8fe:	9f 93       	push	r25
     900:	af 93       	push	r26
     902:	bf 93       	push	r27
     904:	ef 93       	push	r30
     906:	ff 93       	push	r31
  ANA_COMP();
     908:	e0 91 91 00 	lds	r30, 0x0091
     90c:	f0 91 92 00 	lds	r31, 0x0092
     910:	09 95       	icall
}
     912:	ff 91       	pop	r31
     914:	ef 91       	pop	r30
     916:	bf 91       	pop	r27
     918:	af 91       	pop	r26
     91a:	9f 91       	pop	r25
     91c:	8f 91       	pop	r24
     91e:	7f 91       	pop	r23
     920:	6f 91       	pop	r22
     922:	5f 91       	pop	r21
     924:	4f 91       	pop	r20
     926:	3f 91       	pop	r19
     928:	2f 91       	pop	r18
     92a:	0f 90       	pop	r0
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	0f 90       	pop	r0
     930:	1f 90       	pop	r1
     932:	18 95       	reti

00000934 <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
     934:	1f 92       	push	r1
     936:	0f 92       	push	r0
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	0f 92       	push	r0
     93c:	11 24       	eor	r1, r1
     93e:	2f 93       	push	r18
     940:	3f 93       	push	r19
     942:	4f 93       	push	r20
     944:	5f 93       	push	r21
     946:	6f 93       	push	r22
     948:	7f 93       	push	r23
     94a:	8f 93       	push	r24
     94c:	9f 93       	push	r25
     94e:	af 93       	push	r26
     950:	bf 93       	push	r27
     952:	ef 93       	push	r30
     954:	ff 93       	push	r31
  TWI_I2C();
     956:	e0 91 85 00 	lds	r30, 0x0085
     95a:	f0 91 86 00 	lds	r31, 0x0086
     95e:	09 95       	icall
}
     960:	ff 91       	pop	r31
     962:	ef 91       	pop	r30
     964:	bf 91       	pop	r27
     966:	af 91       	pop	r26
     968:	9f 91       	pop	r25
     96a:	8f 91       	pop	r24
     96c:	7f 91       	pop	r23
     96e:	6f 91       	pop	r22
     970:	5f 91       	pop	r21
     972:	4f 91       	pop	r20
     974:	3f 91       	pop	r19
     976:	2f 91       	pop	r18
     978:	0f 90       	pop	r0
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	0f 90       	pop	r0
     97e:	1f 90       	pop	r1
     980:	18 95       	reti

00000982 <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
     982:	1f 92       	push	r1
     984:	0f 92       	push	r0
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	0f 92       	push	r0
     98a:	11 24       	eor	r1, r1
     98c:	2f 93       	push	r18
     98e:	3f 93       	push	r19
     990:	4f 93       	push	r20
     992:	5f 93       	push	r21
     994:	6f 93       	push	r22
     996:	7f 93       	push	r23
     998:	8f 93       	push	r24
     99a:	9f 93       	push	r25
     99c:	af 93       	push	r26
     99e:	bf 93       	push	r27
     9a0:	ef 93       	push	r30
     9a2:	ff 93       	push	r31
  SPM_RDY();
     9a4:	e0 91 87 00 	lds	r30, 0x0087
     9a8:	f0 91 88 00 	lds	r31, 0x0088
     9ac:	09 95       	icall
}
     9ae:	ff 91       	pop	r31
     9b0:	ef 91       	pop	r30
     9b2:	bf 91       	pop	r27
     9b4:	af 91       	pop	r26
     9b6:	9f 91       	pop	r25
     9b8:	8f 91       	pop	r24
     9ba:	7f 91       	pop	r23
     9bc:	6f 91       	pop	r22
     9be:	5f 91       	pop	r21
     9c0:	4f 91       	pop	r20
     9c2:	3f 91       	pop	r19
     9c4:	2f 91       	pop	r18
     9c6:	0f 90       	pop	r0
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	0f 90       	pop	r0
     9cc:	1f 90       	pop	r1
     9ce:	18 95       	reti

000009d0 <Led_Init>:
	LED_3

*/
void Led_Init(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     9d0:	81 30       	cpi	r24, 0x01	; 1
     9d2:	69 f0       	breq	.+26     	; 0x9ee <Led_Init+0x1e>
     9d4:	81 30       	cpi	r24, 0x01	; 1
     9d6:	28 f0       	brcs	.+10     	; 0x9e2 <Led_Init+0x12>
     9d8:	82 30       	cpi	r24, 0x02	; 2
     9da:	79 f0       	breq	.+30     	; 0x9fa <Led_Init+0x2a>
     9dc:	83 30       	cpi	r24, 0x03	; 3
     9de:	c1 f4       	brne	.+48     	; 0xa10 <Led_Init+0x40>
     9e0:	12 c0       	rjmp	.+36     	; 0xa06 <Led_Init+0x36>
{
case LED_0:
gpioPinDirection(LED_0_GPIO,LED_0_BIT,HIGH);
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	60 e1       	ldi	r22, 0x10	; 16
     9e6:	4f ef       	ldi	r20, 0xFF	; 255
     9e8:	0e 94 1a 01 	call	0x234	; 0x234 <gpioPinDirection>
break;
     9ec:	08 95       	ret

case LED_1:
gpioPinDirection(LED_1_GPIO,LED_1_BIT,HIGH);
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	60 e2       	ldi	r22, 0x20	; 32
     9f2:	4f ef       	ldi	r20, 0xFF	; 255
     9f4:	0e 94 1a 01 	call	0x234	; 0x234 <gpioPinDirection>
break;
     9f8:	08 95       	ret

case LED_2:
gpioPinDirection(LED_2_GPIO,LED_2_BIT,HIGH);
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	60 e4       	ldi	r22, 0x40	; 64
     9fe:	4f ef       	ldi	r20, 0xFF	; 255
     a00:	0e 94 1a 01 	call	0x234	; 0x234 <gpioPinDirection>
break;
     a04:	08 95       	ret

case LED_3:
gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	60 e8       	ldi	r22, 0x80	; 128
     a0a:	4f ef       	ldi	r20, 0xFF	; 255
     a0c:	0e 94 1a 01 	call	0x234	; 0x234 <gpioPinDirection>
     a10:	08 95       	ret

00000a12 <Led_On>:
}


void Led_On(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     a12:	81 30       	cpi	r24, 0x01	; 1
     a14:	69 f0       	breq	.+26     	; 0xa30 <Led_On+0x1e>
     a16:	81 30       	cpi	r24, 0x01	; 1
     a18:	28 f0       	brcs	.+10     	; 0xa24 <Led_On+0x12>
     a1a:	82 30       	cpi	r24, 0x02	; 2
     a1c:	79 f0       	breq	.+30     	; 0xa3c <Led_On+0x2a>
     a1e:	83 30       	cpi	r24, 0x03	; 3
     a20:	c1 f4       	brne	.+48     	; 0xa52 <Led_On+0x40>
     a22:	12 c0       	rjmp	.+36     	; 0xa48 <Led_On+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,HIGH);
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	60 e1       	ldi	r22, 0x10	; 16
     a28:	4f ef       	ldi	r20, 0xFF	; 255
     a2a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <gpioPinWrite>
break;
     a2e:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,HIGH);
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	60 e2       	ldi	r22, 0x20	; 32
     a34:	4f ef       	ldi	r20, 0xFF	; 255
     a36:	0e 94 59 01 	call	0x2b2	; 0x2b2 <gpioPinWrite>
break;
     a3a:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,HIGH);
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	60 e4       	ldi	r22, 0x40	; 64
     a40:	4f ef       	ldi	r20, 0xFF	; 255
     a42:	0e 94 59 01 	call	0x2b2	; 0x2b2 <gpioPinWrite>
break;
     a46:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,HIGH);
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	60 e8       	ldi	r22, 0x80	; 128
     a4c:	4f ef       	ldi	r20, 0xFF	; 255
     a4e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <gpioPinWrite>
     a52:	08 95       	ret

00000a54 <Led_Off>:
}

void Led_Off(En_LedNumber_t en_led_id)
{

switch(en_led_id)
     a54:	81 30       	cpi	r24, 0x01	; 1
     a56:	69 f0       	breq	.+26     	; 0xa72 <Led_Off+0x1e>
     a58:	81 30       	cpi	r24, 0x01	; 1
     a5a:	28 f0       	brcs	.+10     	; 0xa66 <Led_Off+0x12>
     a5c:	82 30       	cpi	r24, 0x02	; 2
     a5e:	79 f0       	breq	.+30     	; 0xa7e <Led_Off+0x2a>
     a60:	83 30       	cpi	r24, 0x03	; 3
     a62:	c1 f4       	brne	.+48     	; 0xa94 <Led_Off+0x40>
     a64:	12 c0       	rjmp	.+36     	; 0xa8a <Led_Off+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,LOW);
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	60 e1       	ldi	r22, 0x10	; 16
     a6a:	40 e0       	ldi	r20, 0x00	; 0
     a6c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <gpioPinWrite>
break;
     a70:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,LOW);
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	60 e2       	ldi	r22, 0x20	; 32
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	0e 94 59 01 	call	0x2b2	; 0x2b2 <gpioPinWrite>
break;
     a7c:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,LOW);
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	60 e4       	ldi	r22, 0x40	; 64
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	0e 94 59 01 	call	0x2b2	; 0x2b2 <gpioPinWrite>
break;
     a88:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,LOW);
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	60 e8       	ldi	r22, 0x80	; 128
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	0e 94 59 01 	call	0x2b2	; 0x2b2 <gpioPinWrite>
     a94:	08 95       	ret

00000a96 <Led_Toggle>:


}
void Led_Toggle(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     a96:	81 30       	cpi	r24, 0x01	; 1
     a98:	61 f0       	breq	.+24     	; 0xab2 <Led_Toggle+0x1c>
     a9a:	81 30       	cpi	r24, 0x01	; 1
     a9c:	28 f0       	brcs	.+10     	; 0xaa8 <Led_Toggle+0x12>
     a9e:	82 30       	cpi	r24, 0x02	; 2
     aa0:	69 f0       	breq	.+26     	; 0xabc <Led_Toggle+0x26>
     aa2:	83 30       	cpi	r24, 0x03	; 3
     aa4:	a1 f4       	brne	.+40     	; 0xace <Led_Toggle+0x38>
     aa6:	0f c0       	rjmp	.+30     	; 0xac6 <Led_Toggle+0x30>
{
case LED_0:
gpioPinToggle(LED_0_GPIO,LED_0_BIT);
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	60 e1       	ldi	r22, 0x10	; 16
     aac:	0e 94 94 01 	call	0x328	; 0x328 <gpioPinToggle>
break;
     ab0:	08 95       	ret

case LED_1:
gpioPinToggle(LED_1_GPIO,LED_1_BIT);
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	60 e2       	ldi	r22, 0x20	; 32
     ab6:	0e 94 94 01 	call	0x328	; 0x328 <gpioPinToggle>
break;
     aba:	08 95       	ret

case LED_2:
gpioPinToggle(LED_2_GPIO,LED_2_BIT);
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	60 e4       	ldi	r22, 0x40	; 64
     ac0:	0e 94 94 01 	call	0x328	; 0x328 <gpioPinToggle>
break;
     ac4:	08 95       	ret

case LED_3:
gpioPinToggle(LED_3_GPIO,LED_3_BIT);
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	60 e8       	ldi	r22, 0x80	; 128
     aca:	0e 94 94 01 	call	0x328	; 0x328 <gpioPinToggle>
     ace:	08 95       	ret

00000ad0 <SPI_Init>:
#include "gpio.h"
extern ST_SPI_Configuration SPI_Config ;
extern volatile uint8_t u8_DATA;

void SPI_Init()
{
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
	 ST_SPI_Configuration *gConfig = & SPI_Config;

	/********************Enable SPI Interrupt ******************/

	//SPCR = SPCR | (SPI_INT_ENABLE<<SPIE);
	SPCR = gConfig->MASTER_SLAVE_MODE | gConfig->DATA_ORDER
     ad4:	c0 e7       	ldi	r28, 0x70	; 112
     ad6:	d0 e0       	ldi	r29, 0x00	; 0
     ad8:	90 91 77 00 	lds	r25, 0x0077
     adc:	88 81       	ld	r24, Y
     ade:	89 2b       	or	r24, r25
     ae0:	9c 81       	ldd	r25, Y+4	; 0x04
     ae2:	89 2b       	or	r24, r25
     ae4:	99 81       	ldd	r25, Y+1	; 0x01
     ae6:	89 2b       	or	r24, r25
     ae8:	9d 81       	ldd	r25, Y+5	; 0x05
     aea:	89 2b       	or	r24, r25
     aec:	9e 81       	ldd	r25, Y+6	; 0x06
     aee:	89 2b       	or	r24, r25
     af0:	8d b9       	out	0x0d, r24	; 13
			  | gConfig->OPERATING_LEVEL | gConfig->PRESCALAR
			 | gConfig->SAMPLING_EDGE | gConfig ->INT_ENABLE;

	SPSR |= gConfig->DOUBLE_SPEED;
     af2:	9e b1       	in	r25, 0x0e	; 14
     af4:	8b 81       	ldd	r24, Y+3	; 0x03
     af6:	89 2b       	or	r24, r25
     af8:	8e b9       	out	0x0e, r24	; 14
			 gpioPinDirection(GPIOB, BIT4 | BIT5 | BIT7, OUTPUT);
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	60 eb       	ldi	r22, 0xB0	; 176
     afe:	4f ef       	ldi	r20, 0xFF	; 255
     b00:	0e 94 1a 01 	call	0x234	; 0x234 <gpioPinDirection>
			 gpioPinDirection(GPIOB, BIT6, INPUT);
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	60 e4       	ldi	r22, 0x40	; 64
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	0e 94 1a 01 	call	0x234	; 0x234 <gpioPinDirection>

		SPCR |=  gConfig->ENABLE;
     b0e:	9d b1       	in	r25, 0x0d	; 13
     b10:	8a 81       	ldd	r24, Y+2	; 0x02
     b12:	89 2b       	or	r24, r25
     b14:	8d b9       	out	0x0d, r24	; 13



}
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	08 95       	ret

00000b1c <SPI_Transciever_INT>:
void SPI_Transciever_INT(void)
{
	SPDR=u8_DATA;
     b1c:	80 91 65 00 	lds	r24, 0x0065
     b20:	8f b9       	out	0x0f, r24	; 15
}
     b22:	08 95       	ret

00000b24 <SPI_Send>:
void  SPI_Send(uint8_t u8_data)
{
     /* Start transmission */
     SPDR = u8_data;
     b24:	8f b9       	out	0x0f, r24	; 15
    if (!(READBIT(SPCR,SPIE)))
     b26:	6f 99       	sbic	0x0d, 7	; 13
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <SPI_Send+0xa>
    {
	 	/* Wait for transmission complete */
     while(!(SPSR & (1<<SPIF)));
     b2a:	77 9b       	sbis	0x0e, 7	; 14
     b2c:	fe cf       	rjmp	.-4      	; 0xb2a <SPI_Send+0x6>
     b2e:	08 95       	ret

00000b30 <spi_INT_CALLED>:
		}
}


uint8_t spi_INT_CALLED(void){
	return SPDR;
     b30:	8f b1       	in	r24, 0x0f	; 15
}
     b32:	08 95       	ret

00000b34 <SPI_Receive>:

uint8_t  SPI_Receive(void)
{
	if (!(READBIT(SPCR,SPIE)))
     b34:	6f 99       	sbic	0x0d, 7	; 13
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <SPI_Receive+0x8>
	{
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));
     b38:	77 9b       	sbis	0x0e, 7	; 14
     b3a:	fe cf       	rjmp	.-4      	; 0xb38 <SPI_Receive+0x4>
		//return SPDR ; // Received data
	}
	return SPDR;
     b3c:	8f b1       	in	r24, 0x0f	; 15
}
     b3e:	08 95       	ret

00000b40 <SPI_Checks_for_collision>:


 uint8_t SPI_Checks_for_collision(void)
{
	 return READBIT(SPSR, WCOL);
     b40:	8e b1       	in	r24, 0x0e	; 14
     b42:	82 95       	swap	r24
     b44:	86 95       	lsr	r24
     b46:	86 95       	lsr	r24
     b48:	83 70       	andi	r24, 0x03	; 3
}
     b4a:	81 70       	andi	r24, 0x01	; 1
     b4c:	08 95       	ret

00000b4e <SPI_De_Init>:

void SPI_De_Init(void)
{
SPCR=0;
     b4e:	1d b8       	out	0x0d, r1	; 13
}
     b50:	08 95       	ret

00000b52 <timer0Set>:
}

}
void timer0Set(uint8_t u8_value)
{
TCNT0 =	u8_value;
     b52:	82 bf       	out	0x32, r24	; 50
}
     b54:	08 95       	ret

00000b56 <timer0Read>:

uint8_t timer0Read(void)
{
	 return TCNT0;
     b56:	82 b7       	in	r24, 0x32	; 50
}
     b58:	08 95       	ret

00000b5a <timer0Start>:
Depending on prescaler	x     X    X

*/
void timer0Start(void)
{
	 TCCR0 &= (0xF8);
     b5a:	83 b7       	in	r24, 0x33	; 51
     b5c:	88 7f       	andi	r24, 0xF8	; 248
     b5e:	83 bf       	out	0x33, r24	; 51
	 TCCR0 |= Prescaler_Value;
     b60:	93 b7       	in	r25, 0x33	; 51
     b62:	80 91 81 00 	lds	r24, 0x0081
     b66:	89 2b       	or	r24, r25
     b68:	83 bf       	out	0x33, r24	; 51
}
     b6a:	08 95       	ret

00000b6c <timer0Stop>:
						      0     0    0
*/
void timer0Stop(void)
 {

TCCR0 &= (0xF8);
     b6c:	83 b7       	in	r24, 0x33	; 51
     b6e:	88 7f       	andi	r24, 0xF8	; 248
     b70:	83 bf       	out	0x33, r24	; 51

 }
     b72:	08 95       	ret

00000b74 <timer0Init>:
uint8_t Prescaler_Value2=0;
uint8_t u8g_T1_Prescaler=0;
volatile uint8_t pwm_time_on=0,flag=0;

void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal,uint8_t u8_initialValue, uint8_t u8_outputCompare,En_timer0Interrupt_t en_interruptMask)
{
     b74:	ef 92       	push	r14
     b76:	0f 93       	push	r16
if(en_prescal == T0_NO_CLOCK)
     b78:	44 23       	and	r20, r20
     b7a:	19 f4       	brne	.+6      	; 0xb82 <timer0Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer0Stop();
     b7c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <timer0Stop>
     b80:	48 c0       	rjmp	.+144    	; 0xc12 <timer0Init+0x9e>
}
else
{
TCCR0 |= en_mode|en_prescal;
     b82:	93 b7       	in	r25, 0x33	; 51
     b84:	89 2b       	or	r24, r25
     b86:	84 2b       	or	r24, r20
     b88:	83 bf       	out	0x33, r24	; 51
Prescaler_Value=en_prescal;
     b8a:	40 93 81 00 	sts	0x0081, r20
TCNT0 = u8_initialValue;
     b8e:	22 bf       	out	0x32, r18	; 50
switch(en_OC0){
     b90:	60 31       	cpi	r22, 0x10	; 16
     b92:	71 f0       	breq	.+28     	; 0xbb0 <timer0Init+0x3c>
     b94:	61 31       	cpi	r22, 0x11	; 17
     b96:	18 f4       	brcc	.+6      	; 0xb9e <timer0Init+0x2a>
     b98:	66 23       	and	r22, r22
     b9a:	31 f0       	breq	.+12     	; 0xba8 <timer0Init+0x34>
     b9c:	14 c0       	rjmp	.+40     	; 0xbc6 <timer0Init+0x52>
     b9e:	60 32       	cpi	r22, 0x20	; 32
     ba0:	59 f0       	breq	.+22     	; 0xbb8 <timer0Init+0x44>
     ba2:	60 33       	cpi	r22, 0x30	; 48
     ba4:	81 f4       	brne	.+32     	; 0xbc6 <timer0Init+0x52>
     ba6:	0c c0       	rjmp	.+24     	; 0xbc0 <timer0Init+0x4c>
	case  T0_OC0_DIS:
	{
	TCCR0 &= 0xCF;
     ba8:	83 b7       	in	r24, 0x33	; 51
     baa:	8f 7c       	andi	r24, 0xCF	; 207
     bac:	83 bf       	out	0x33, r24	; 51
		break;
     bae:	0b c0       	rjmp	.+22     	; 0xbc6 <timer0Init+0x52>
	}
	case T0_OC0_TOGGLE:
	{
		TCCR0|=T0_OC0_TOGGLE;
     bb0:	83 b7       	in	r24, 0x33	; 51
     bb2:	80 61       	ori	r24, 0x10	; 16
     bb4:	83 bf       	out	0x33, r24	; 51
		break;
     bb6:	07 c0       	rjmp	.+14     	; 0xbc6 <timer0Init+0x52>
	}
	case  T0_OC0_CLEAR:
	{
	TCCR0 |= T0_OC0_CLEAR;
     bb8:	83 b7       	in	r24, 0x33	; 51
     bba:	80 62       	ori	r24, 0x20	; 32
     bbc:	83 bf       	out	0x33, r24	; 51

		break;
     bbe:	03 c0       	rjmp	.+6      	; 0xbc6 <timer0Init+0x52>
	}
	case T0_OC0_SET:
	{
		TCCR0 |=T0_OC0_SET;
     bc0:	83 b7       	in	r24, 0x33	; 51
     bc2:	80 63       	ori	r24, 0x30	; 48
     bc4:	83 bf       	out	0x33, r24	; 51
		break;
	}

}
OCR0  =u8_outputCompare;
     bc6:	0c bf       	out	0x3c, r16	; 60
switch(en_interruptMask){
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	e8 16       	cp	r14, r24
     bcc:	69 f0       	breq	.+26     	; 0xbe8 <timer0Init+0x74>
     bce:	e8 16       	cp	r14, r24
     bd0:	20 f0       	brcs	.+8      	; 0xbda <timer0Init+0x66>
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	e8 16       	cp	r14, r24
     bd6:	e9 f4       	brne	.+58     	; 0xc12 <timer0Init+0x9e>
     bd8:	10 c0       	rjmp	.+32     	; 0xbfa <timer0Init+0x86>
case  T0_POLLING:{
pooling=0;
     bda:	10 92 80 00 	sts	0x0080, r1
G_interrupt_Disable();
     bde:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <G_interrupt_Disable>
TIMSK &= T0_POLLING;
     be2:	89 b7       	in	r24, 0x39	; 57
     be4:	19 be       	out	0x39, r1	; 57
break;
     be6:	15 c0       	rjmp	.+42     	; 0xc12 <timer0Init+0x9e>
}
case T0_INTERRUPT_NORMAL :
{pooling=1;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	80 93 80 00 	sts	0x0080, r24
G_interrupt_Enable();
     bee:	0e 94 c8 01 	call	0x390	; 0x390 <G_interrupt_Enable>
TIMSK |= T0_INTERRUPT_NORMAL;
     bf2:	89 b7       	in	r24, 0x39	; 57
     bf4:	81 60       	ori	r24, 0x01	; 1
     bf6:	89 bf       	out	0x39, r24	; 57
break;
     bf8:	0c c0       	rjmp	.+24     	; 0xc12 <timer0Init+0x9e>
}
case T0_INTERRUPT_CMP:
{pooling=1;
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	80 93 80 00 	sts	0x0080, r24
//G_interrupt_Enable();
SET_BIT(SREG,7);
     c00:	8f b7       	in	r24, 0x3f	; 63
     c02:	80 68       	ori	r24, 0x80	; 128
     c04:	8f bf       	out	0x3f, r24	; 63
TIMSK |= T0_INTERRUPT_NORMAL;
     c06:	89 b7       	in	r24, 0x39	; 57
     c08:	81 60       	ori	r24, 0x01	; 1
     c0a:	89 bf       	out	0x39, r24	; 57
TIMSK |=T0_INTERRUPT_CMP;
     c0c:	89 b7       	in	r24, 0x39	; 57
     c0e:	82 60       	ori	r24, 0x02	; 2
     c10:	89 bf       	out	0x39, r24	; 57
}
}

}

}
     c12:	0f 91       	pop	r16
     c14:	ef 90       	pop	r14
     c16:	08 95       	ret

00000c18 <timer0DelayMs>:
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
     c18:	ac 01       	movw	r20, r24
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	41 15       	cp	r20, r1
     c20:	51 05       	cpc	r21, r1
     c22:	61 05       	cpc	r22, r1
     c24:	71 05       	cpc	r23, r1
     c26:	89 f0       	breq	.+34     	; 0xc4a <timer0DelayMs+0x32>
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	dc 01       	movw	r26, r24
{
	while ((TIFR&0x01)==0);
     c2e:	08 b6       	in	r0, 0x38	; 56
     c30:	00 fe       	sbrs	r0, 0
     c32:	fd cf       	rjmp	.-6      	; 0xc2e <timer0DelayMs+0x16>
	TIFR |=0x01;
     c34:	28 b7       	in	r18, 0x38	; 56
     c36:	21 60       	ori	r18, 0x01	; 1
     c38:	28 bf       	out	0x38, r18	; 56
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	a1 1d       	adc	r26, r1
     c3e:	b1 1d       	adc	r27, r1
     c40:	84 17       	cp	r24, r20
     c42:	95 07       	cpc	r25, r21
     c44:	a6 07       	cpc	r26, r22
     c46:	b7 07       	cpc	r27, r23
     c48:	90 f3       	brcs	.-28     	; 0xc2e <timer0DelayMs+0x16>
     c4a:	08 95       	ret

00000c4c <timer0DelayUs>:
 at pooling _no prescaling
 240at TCNT0

 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
     c4c:	dc 01       	movw	r26, r24
     c4e:	cb 01       	movw	r24, r22
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	a1 05       	cpc	r26, r1
     c54:	b1 05       	cpc	r27, r1
     c56:	31 f0       	breq	.+12     	; 0xc64 <timer0DelayUs+0x18>
	{
	timer0Set(240);
     c58:	80 ef       	ldi	r24, 0xF0	; 240
     c5a:	0e 94 a9 05 	call	0xb52	; 0xb52 <timer0Set>
	while(timer0Read()<=255);
     c5e:	0e 94 ab 05 	call	0xb56	; 0xb56 <timer0Read>
     c62:	fd cf       	rjmp	.-6      	; 0xc5e <timer0DelayUs+0x12>
	//while(u32_ovf_counter <= (8*u32_delay_in_us/1000));
	}
	TIFR |=(1<<TOV0);/*Clear the flag*/
     c64:	88 b7       	in	r24, 0x38	; 56
     c66:	81 60       	ori	r24, 0x01	; 1
     c68:	88 bf       	out	0x38, r24	; 56
}/*1*/
     c6a:	08 95       	ret

00000c6c <timer0SwPWM>:
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
     c6c:	cf 92       	push	r12
     c6e:	df 92       	push	r13
     c70:	ef 92       	push	r14
     c72:	ff 92       	push	r15
     c74:	cf 93       	push	r28
     c76:	c8 2f       	mov	r28, r24
float dutyReal;
pwm_time_on=MAX_HOLD;
     c78:	8f ef       	ldi	r24, 0xFF	; 255
     c7a:	80 93 7c 00 	sts	0x007C, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
     c7e:	60 91 7c 00 	lds	r22, 0x007C
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__floatunsisf>
     c8c:	6b 01       	movw	r12, r22
     c8e:	7c 01       	movw	r14, r24
}/*1*/
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
     c90:	6c 2f       	mov	r22, r28
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__floatunsisf>
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	48 ec       	ldi	r20, 0xC8	; 200
     ca2:	52 e4       	ldi	r21, 0x42	; 66
     ca4:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__divsf3>
     ca8:	9b 01       	movw	r18, r22
     caa:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
     cac:	c7 01       	movw	r24, r14
     cae:	b6 01       	movw	r22, r12
     cb0:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__mulsf3>
     cb4:	0e 94 3f 09 	call	0x127e	; 0x127e <__fixunssfsi>
     cb8:	60 93 7c 00 	sts	0x007C, r22
switch(pooling)
     cbc:	80 91 80 00 	lds	r24, 0x0080
     cc0:	88 23       	and	r24, r24
     cc2:	19 f0       	breq	.+6      	; 0xcca <timer0SwPWM+0x5e>
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	29 f5       	brne	.+74     	; 0xd12 <timer0SwPWM+0xa6>
     cc8:	1f c0       	rjmp	.+62     	; 0xd08 <timer0SwPWM+0x9c>
{
	case 0:
	{
	timer0Start();
     cca:	0e 94 ad 05 	call	0xb5a	; 0xb5a <timer0Start>
	timer0Set(pwm_time_on);
     cce:	80 91 7c 00 	lds	r24, 0x007C
     cd2:	0e 94 a9 05 	call	0xb52	; 0xb52 <timer0Set>
	//freq 50KHZ is the Max frequency possible
	while ((TIFR&0x01)==0);
     cd6:	08 b6       	in	r0, 0x38	; 56
     cd8:	00 fe       	sbrs	r0, 0
     cda:	fd cf       	rjmp	.-6      	; 0xcd6 <timer0SwPWM+0x6a>
	TIFR |=0x01;
     cdc:	88 b7       	in	r24, 0x38	; 56
     cde:	81 60       	ori	r24, 0x01	; 1
     ce0:	88 bf       	out	0x38, r24	; 56
	PORTC_DATA |=0xff;
     ce2:	85 b3       	in	r24, 0x15	; 21
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	85 bb       	out	0x15, r24	; 21
	timer0Start();
     ce8:	0e 94 ad 05 	call	0xb5a	; 0xb5a <timer0Start>
	timer0Set(MAX_HOLD-pwm_time_on);
     cec:	80 91 7c 00 	lds	r24, 0x007C
     cf0:	80 95       	com	r24
     cf2:	0e 94 a9 05 	call	0xb52	; 0xb52 <timer0Set>
	//freq
	while ((TIFR & 0x01)==0);
     cf6:	08 b6       	in	r0, 0x38	; 56
     cf8:	00 fe       	sbrs	r0, 0
     cfa:	fd cf       	rjmp	.-6      	; 0xcf6 <timer0SwPWM+0x8a>
	TIFR |=0x01;
     cfc:	88 b7       	in	r24, 0x38	; 56
     cfe:	81 60       	ori	r24, 0x01	; 1
     d00:	88 bf       	out	0x38, r24	; 56
	PORTC_DATA &=0x00;
     d02:	85 b3       	in	r24, 0x15	; 21
     d04:	15 ba       	out	0x15, r1	; 21

break;
     d06:	05 c0       	rjmp	.+10     	; 0xd12 <timer0SwPWM+0xa6>
}
case 1:
{
timer0Start();
     d08:	0e 94 ad 05 	call	0xb5a	; 0xb5a <timer0Start>
OCR0=pwm_time_on;
     d0c:	80 91 7c 00 	lds	r24, 0x007C
     d10:	8c bf       	out	0x3c, r24	; 60
break;
}

}

}
     d12:	cf 91       	pop	r28
     d14:	ff 90       	pop	r15
     d16:	ef 90       	pop	r14
     d18:	df 90       	pop	r13
     d1a:	cf 90       	pop	r12
     d1c:	08 95       	ret

00000d1e <Timer_interrupt_COMP_routine>:



void Timer_interrupt_COMP_routine(void)
{
	PORTD_DATA ^=0xff;
     d1e:	82 b3       	in	r24, 0x12	; 18
     d20:	80 95       	com	r24
     d22:	82 bb       	out	0x12, r24	; 18

}
     d24:	08 95       	ret

00000d26 <timer1Init>:
 */
void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC,
	En_timer1perscaler_t en_prescal,uint16_t u16_initialValue,
	uint16_t u16_outputCompareA,uint16_t u16_outputCompareB,
	 uint16_t u16_inputCapture,En_timer1Interrupt_t en_interruptMask)
 {
     d26:	af 92       	push	r10
     d28:	ef 92       	push	r14
     d2a:	ff 92       	push	r15
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	d9 01       	movw	r26, r18
     d32:	2a 2d       	mov	r18, r10
	TCCR1 |= en_mode | en_OC;
     d34:	ee b5       	in	r30, 0x2e	; 46
     d36:	ff b5       	in	r31, 0x2f	; 47
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	86 2b       	or	r24, r22
     d3c:	97 2b       	or	r25, r23
     d3e:	8e 2b       	or	r24, r30
     d40:	9f 2b       	or	r25, r31
     d42:	9f bd       	out	0x2f, r25	; 47
     d44:	8e bd       	out	0x2e, r24	; 46
	u8g_T1_Prescaler=en_prescal;
     d46:	40 93 7d 00 	sts	0x007D, r20
	OCR1A =u16_outputCompareA;
     d4a:	1b bd       	out	0x2b, r17	; 43
     d4c:	0a bd       	out	0x2a, r16	; 42
	OCR1B =u16_outputCompareB;
     d4e:	f9 bc       	out	0x29, r15	; 41
     d50:	e8 bc       	out	0x28, r14	; 40
	TCNT1=u16_initialValue;
     d52:	bd bd       	out	0x2d, r27	; 45
     d54:	ac bd       	out	0x2c, r26	; 44
	switch(en_interruptMask)
     d56:	28 30       	cpi	r18, 0x08	; 8
     d58:	d1 f0       	breq	.+52     	; 0xd8e <timer1Init+0x68>
     d5a:	29 30       	cpi	r18, 0x09	; 9
     d5c:	28 f4       	brcc	.+10     	; 0xd68 <timer1Init+0x42>
     d5e:	aa 20       	and	r10, r10
     d60:	51 f0       	breq	.+20     	; 0xd76 <timer1Init+0x50>
     d62:	24 30       	cpi	r18, 0x04	; 4
     d64:	f9 f4       	brne	.+62     	; 0xda4 <timer1Init+0x7e>
     d66:	0b c0       	rjmp	.+22     	; 0xd7e <timer1Init+0x58>
     d68:	20 32       	cpi	r18, 0x20	; 32
     d6a:	a9 f0       	breq	.+42     	; 0xd96 <timer1Init+0x70>
     d6c:	2c 33       	cpi	r18, 0x3C	; 60
     d6e:	b9 f0       	breq	.+46     	; 0xd9e <timer1Init+0x78>
     d70:	20 31       	cpi	r18, 0x10	; 16
     d72:	c1 f4       	brne	.+48     	; 0xda4 <timer1Init+0x7e>
     d74:	08 c0       	rjmp	.+16     	; 0xd86 <timer1Init+0x60>
	{
		case T1_POLLING:
		{
			TIMSK &=0xC3;
     d76:	89 b7       	in	r24, 0x39	; 57
     d78:	83 7c       	andi	r24, 0xC3	; 195
     d7a:	89 bf       	out	0x39, r24	; 57
			/*	     OCIE0 ToIE0   ALL INTERRUPT T1    	OCIE0 ToIE0
			TIMSK &=  1     1        0 0 0 0 	           1     1
			All T1 Interrupts enable are cleared
			but other timers interrupt enable are not effected
			*/
		break;
     d7c:	13 c0       	rjmp	.+38     	; 0xda4 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_NORMAL:
		{
			TIMSK |=T1_INTERRUPT_NORMAL;
     d7e:	89 b7       	in	r24, 0x39	; 57
     d80:	84 60       	ori	r24, 0x04	; 4
     d82:	89 bf       	out	0x39, r24	; 57
		break;
     d84:	0f c0       	rjmp	.+30     	; 0xda4 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_CMP_1A:
		{
			TIMSK |=T1_INTERRUPT_CMP_1A;
     d86:	89 b7       	in	r24, 0x39	; 57
     d88:	80 61       	ori	r24, 0x10	; 16
     d8a:	89 bf       	out	0x39, r24	; 57
			break;
     d8c:	0b c0       	rjmp	.+22     	; 0xda4 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_CMP_1B:
		{
			TIMSK |=T1_INTERRUPT_CMP_1B;
     d8e:	89 b7       	in	r24, 0x39	; 57
     d90:	88 60       	ori	r24, 0x08	; 8
     d92:	89 bf       	out	0x39, r24	; 57
			break;
     d94:	07 c0       	rjmp	.+14     	; 0xda4 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_ICAPTURE:
		{
			TIMSK |=T1_INTERRUPT_ICAPTURE;
     d96:	89 b7       	in	r24, 0x39	; 57
     d98:	80 62       	ori	r24, 0x20	; 32
     d9a:	89 bf       	out	0x39, r24	; 57
			break;
     d9c:	03 c0       	rjmp	.+6      	; 0xda4 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_All:
		{
			TIMSK|=T1_INTERRUPT_All;
     d9e:	89 b7       	in	r24, 0x39	; 57
     da0:	8c 63       	ori	r24, 0x3C	; 60
     da2:	89 bf       	out	0x39, r24	; 57
	}




	}
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	af 90       	pop	r10
     dae:	08 95       	ret

00000db0 <timer1Set>:


void timer1Set(uint16_t u16_value)
{
TCNT1=u16_value;
     db0:	9d bd       	out	0x2d, r25	; 45
     db2:	8c bd       	out	0x2c, r24	; 44
}
     db4:	08 95       	ret

00000db6 <timer1Read>:
 * Description:
 * @return TCNT1
 */
uint16_t timer1Read(void)
{
return TCNT1;
     db6:	8c b5       	in	r24, 0x2c	; 44
     db8:	9d b5       	in	r25, 0x2d	; 45
}
     dba:	08 95       	ret

00000dbc <timer1Start>:
 * Description:
 * @param
 */
void timer1Start(void)
{
TCCR1|=u8g_T1_Prescaler;
     dbc:	2e b5       	in	r18, 0x2e	; 46
     dbe:	3f b5       	in	r19, 0x2f	; 47
     dc0:	80 91 7d 00 	lds	r24, 0x007D
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	82 2b       	or	r24, r18
     dc8:	93 2b       	or	r25, r19
     dca:	9f bd       	out	0x2f, r25	; 47
     dcc:	8e bd       	out	0x2e, r24	; 46
}
     dce:	08 95       	ret

00000dd0 <timer1Stop>:
 * Description:
 * @param
 */
void timer1Stop(void)
{
TCCR1 &=0xfff8;
     dd0:	8e b5       	in	r24, 0x2e	; 46
     dd2:	9f b5       	in	r25, 0x2f	; 47
     dd4:	88 7f       	andi	r24, 0xF8	; 248
     dd6:	9f bd       	out	0x2f, r25	; 47
     dd8:	8e bd       	out	0x2e, r24	; 46
/*Keep all sittings as it is and put zeros in cs10,cs11,cs12*/
}
     dda:	08 95       	ret

00000ddc <timer1DelayMs>:
 */
void timer1DelayMs(uint16_t u16_delay_in_ms)
{


}
     ddc:	08 95       	ret

00000dde <timer1DelayUs>:
 */
void timer1DelayUs(uint32_t u32_delay_in_us)
{


}
     dde:	08 95       	ret

00000de0 <timer1SwPWM>:
 */
void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{


}
     de0:	08 95       	ret

00000de2 <timer2Set>:
* Description:
* @param value
*/
void timer2Set(uint8_t u8_a_value)
{
TCNT2=u8_a_value;
     de2:	84 bd       	out	0x24, r24	; 36
}
     de4:	08 95       	ret

00000de6 <timer2Read>:
/**
* Description:
* @return
*/
uint8_t timer2Read(void){
return TCNT2;
     de6:	84 b5       	in	r24, 0x24	; 36
}
     de8:	08 95       	ret

00000dea <timer2Start>:
/**
* Description:
*/
void timer2Start(void)
{
TCCR2 &= 0xf8;
     dea:	85 b5       	in	r24, 0x25	; 37
     dec:	88 7f       	andi	r24, 0xF8	; 248
     dee:	85 bd       	out	0x25, r24	; 37
TCCR2 |= Prescaler_Value2;
     df0:	95 b5       	in	r25, 0x25	; 37
     df2:	80 91 7e 00 	lds	r24, 0x007E
     df6:	89 2b       	or	r24, r25
     df8:	85 bd       	out	0x25, r24	; 37
}
     dfa:	08 95       	ret

00000dfc <timer2Stop>:
/**
* Description:
*/
void timer2Stop(void)
{
TCCR2 &= 0xf8;
     dfc:	85 b5       	in	r24, 0x25	; 37
     dfe:	88 7f       	andi	r24, 0xF8	; 248
     e00:	85 bd       	out	0x25, r24	; 37

}
     e02:	08 95       	ret

00000e04 <timer2Init>:


}

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC,En_timer2perscaler_t en_prescal2, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
     e04:	cf 92       	push	r12
     e06:	0f 93       	push	r16
if(en_prescal2 == T2_NO_CLOCK)
     e08:	44 23       	and	r20, r20
     e0a:	19 f4       	brne	.+6      	; 0xe12 <timer2Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer2Stop();
     e0c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <timer2Stop>
     e10:	46 c0       	rjmp	.+140    	; 0xe9e <timer2Init+0x9a>
}
else
{
TCCR2 |= en_mode|en_prescal2 ;
     e12:	95 b5       	in	r25, 0x25	; 37
     e14:	89 2b       	or	r24, r25
     e16:	84 2b       	or	r24, r20
     e18:	85 bd       	out	0x25, r24	; 37
Prescaler_Value2=en_prescal2;
     e1a:	40 93 7e 00 	sts	0x007E, r20
TCNT2 = u8_initialValue;
     e1e:	24 bd       	out	0x24, r18	; 36
switch(en_OC){
     e20:	60 31       	cpi	r22, 0x10	; 16
     e22:	71 f0       	breq	.+28     	; 0xe40 <timer2Init+0x3c>
     e24:	61 31       	cpi	r22, 0x11	; 17
     e26:	18 f4       	brcc	.+6      	; 0xe2e <timer2Init+0x2a>
     e28:	66 23       	and	r22, r22
     e2a:	31 f0       	breq	.+12     	; 0xe38 <timer2Init+0x34>
     e2c:	14 c0       	rjmp	.+40     	; 0xe56 <timer2Init+0x52>
     e2e:	60 32       	cpi	r22, 0x20	; 32
     e30:	59 f0       	breq	.+22     	; 0xe48 <timer2Init+0x44>
     e32:	60 33       	cpi	r22, 0x30	; 48
     e34:	81 f4       	brne	.+32     	; 0xe56 <timer2Init+0x52>
     e36:	0c c0       	rjmp	.+24     	; 0xe50 <timer2Init+0x4c>
	case  T2_OC2_DIS:
	{
	TCCR2 &= 0xCF;
     e38:	85 b5       	in	r24, 0x25	; 37
     e3a:	8f 7c       	andi	r24, 0xCF	; 207
     e3c:	85 bd       	out	0x25, r24	; 37
		break;
     e3e:	0b c0       	rjmp	.+22     	; 0xe56 <timer2Init+0x52>
	}
	case T2_OC2_TOGGLE:
	{
		TCCR2 |=T2_OC2_TOGGLE;
     e40:	85 b5       	in	r24, 0x25	; 37
     e42:	80 61       	ori	r24, 0x10	; 16
     e44:	85 bd       	out	0x25, r24	; 37
		break;
     e46:	07 c0       	rjmp	.+14     	; 0xe56 <timer2Init+0x52>
	}
	case  T2_OC2_CLEAR:
	{
	TCCR2 |= T2_OC2_CLEAR;
     e48:	85 b5       	in	r24, 0x25	; 37
     e4a:	80 62       	ori	r24, 0x20	; 32
     e4c:	85 bd       	out	0x25, r24	; 37

		break;
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <timer2Init+0x52>
	}
	case T2_OC2_SET:
	{
		TCCR2 |=T2_OC2_SET;
     e50:	85 b5       	in	r24, 0x25	; 37
     e52:	80 63       	ori	r24, 0x30	; 48
     e54:	85 bd       	out	0x25, r24	; 37
		break;
	}

}
OCR2  =u8_outputCompare;
     e56:	03 bd       	out	0x23, r16	; 35
switch(en_interruptMask){
     e58:	80 e4       	ldi	r24, 0x40	; 64
     e5a:	c8 16       	cp	r12, r24
     e5c:	61 f0       	breq	.+24     	; 0xe76 <timer2Init+0x72>
     e5e:	80 e8       	ldi	r24, 0x80	; 128
     e60:	c8 16       	cp	r12, r24
     e62:	91 f0       	breq	.+36     	; 0xe88 <timer2Init+0x84>
     e64:	cc 20       	and	r12, r12
     e66:	d9 f4       	brne	.+54     	; 0xe9e <timer2Init+0x9a>
case  T2_POLLING:
pooling_2=0;
     e68:	10 92 7f 00 	sts	0x007F, r1
G_interrupt_Disable();
     e6c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <G_interrupt_Disable>
TIMSK &= T2_POLLING;
     e70:	89 b7       	in	r24, 0x39	; 57
     e72:	19 be       	out	0x39, r1	; 57
break;
     e74:	14 c0       	rjmp	.+40     	; 0xe9e <timer2Init+0x9a>
case T2_INTERRUPT_NORMAL :
{
	pooling_2=1;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	80 93 7f 00 	sts	0x007F, r24
G_interrupt_Enable();
     e7c:	0e 94 c8 01 	call	0x390	; 0x390 <G_interrupt_Enable>
TIMSK |= T2_INTERRUPT_NORMAL;
     e80:	89 b7       	in	r24, 0x39	; 57
     e82:	80 64       	ori	r24, 0x40	; 64
     e84:	89 bf       	out	0x39, r24	; 57
break;
     e86:	0b c0       	rjmp	.+22     	; 0xe9e <timer2Init+0x9a>
}
case T2_INTERRUPT_CMP:
{
	pooling_2=1;
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	80 93 7f 00 	sts	0x007F, r24
G_interrupt_Enable();
     e8e:	0e 94 c8 01 	call	0x390	; 0x390 <G_interrupt_Enable>
//SET_BIT(SREG,7);
TIMSK |=T2_INTERRUPT_NORMAL;
     e92:	89 b7       	in	r24, 0x39	; 57
     e94:	80 64       	ori	r24, 0x40	; 64
     e96:	89 bf       	out	0x39, r24	; 57
TIMSK |=T2_INTERRUPT_CMP;
     e98:	89 b7       	in	r24, 0x39	; 57
     e9a:	80 68       	ori	r24, 0x80	; 128
     e9c:	89 bf       	out	0x39, r24	; 57

}



}
     e9e:	0f 91       	pop	r16
     ea0:	cf 90       	pop	r12
     ea2:	08 95       	ret

00000ea4 <timer2DelayMs>:
		Prescalercounst=1;
		break;

		}*/
void timer2DelayMs(uint16_t u16_delay_in_ms)
{
     ea4:	0f 93       	push	r16
     ea6:	1f 93       	push	r17
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	00 d0       	rcall	.+0      	; 0xeae <timer2DelayMs+0xa>
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <timer2DelayMs+0xc>
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	8c 01       	movw	r16, r24
	volatile uint16_t count=0;
     eb6:	1a 82       	std	Y+2, r1	; 0x02
     eb8:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t Prescalercounst=0,set_timer2=0;
     eba:	1b 82       	std	Y+3, r1	; 0x03
     ebc:	1c 82       	std	Y+4, r1	; 0x04
	switch(Prescaler_Value2)
     ebe:	80 91 7e 00 	lds	r24, 0x007E
     ec2:	84 30       	cpi	r24, 0x04	; 4
     ec4:	f9 f0       	breq	.+62     	; 0xf04 <timer2DelayMs+0x60>
     ec6:	85 30       	cpi	r24, 0x05	; 5
     ec8:	38 f4       	brcc	.+14     	; 0xed8 <timer2DelayMs+0x34>
     eca:	82 30       	cpi	r24, 0x02	; 2
     ecc:	89 f0       	breq	.+34     	; 0xef0 <timer2DelayMs+0x4c>
     ece:	83 30       	cpi	r24, 0x03	; 3
     ed0:	a0 f4       	brcc	.+40     	; 0xefa <timer2DelayMs+0x56>
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	51 f5       	brne	.+84     	; 0xf2a <timer2DelayMs+0x86>
     ed6:	07 c0       	rjmp	.+14     	; 0xee6 <timer2DelayMs+0x42>
     ed8:	86 30       	cpi	r24, 0x06	; 6
     eda:	f1 f0       	breq	.+60     	; 0xf18 <timer2DelayMs+0x74>
     edc:	86 30       	cpi	r24, 0x06	; 6
     ede:	b8 f0       	brcs	.+46     	; 0xf0e <timer2DelayMs+0x6a>
     ee0:	87 30       	cpi	r24, 0x07	; 7
     ee2:	19 f5       	brne	.+70     	; 0xf2a <timer2DelayMs+0x86>
     ee4:	1e c0       	rjmp	.+60     	; 0xf22 <timer2DelayMs+0x7e>
	{
		case T2_PRESCALER_NO:{
		Prescalercounst=58;
     ee6:	8a e3       	ldi	r24, 0x3A	; 58
     ee8:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=10;
     eea:	8a e0       	ldi	r24, 0x0A	; 10
     eec:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     eee:	1d c0       	rjmp	.+58     	; 0xf2a <timer2DelayMs+0x86>
		case T2_PRESCALER_8:
		{Prescalercounst=8;
     ef0:	88 e0       	ldi	r24, 0x08	; 8
     ef2:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=12;
     ef4:	8c e0       	ldi	r24, 0x0C	; 12
     ef6:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     ef8:	18 c0       	rjmp	.+48     	; 0xf2a <timer2DelayMs+0x86>
		case T2_PRESCALER_32:
		{Prescalercounst=2;
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=8;
     efe:	88 e0       	ldi	r24, 0x08	; 8
     f00:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     f02:	13 c0       	rjmp	.+38     	; 0xf2a <timer2DelayMs+0x86>
		case T2_PRESCALER_64:
		{Prescalercounst=1;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=6;
     f08:	86 e0       	ldi	r24, 0x06	; 6
     f0a:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     f0c:	0e c0       	rjmp	.+28     	; 0xf2a <timer2DelayMs+0x86>
		case T2_PRESCALER_128:
		{Prescalercounst=1;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=131;
     f12:	83 e8       	ldi	r24, 0x83	; 131
     f14:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     f16:	09 c0       	rjmp	.+18     	; 0xf2a <timer2DelayMs+0x86>
		case T2_PRESCALER_256:
		{Prescalercounst=1;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=194;
     f1c:	82 ec       	ldi	r24, 0xC2	; 194
     f1e:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     f20:	04 c0       	rjmp	.+8      	; 0xf2a <timer2DelayMs+0x86>
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=240;
     f26:	80 ef       	ldi	r24, 0xF0	; 240
     f28:	8c 83       	std	Y+4, r24	; 0x04
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
     f2a:	1a 82       	std	Y+2, r1	; 0x02
     f2c:	19 82       	std	Y+1, r1	; 0x01
     f2e:	2b 81       	ldd	r18, Y+3	; 0x03
     f30:	49 81       	ldd	r20, Y+1	; 0x01
     f32:	5a 81       	ldd	r21, Y+2	; 0x02
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	02 9f       	mul	r16, r18
     f38:	c0 01       	movw	r24, r0
     f3a:	03 9f       	mul	r16, r19
     f3c:	90 0d       	add	r25, r0
     f3e:	12 9f       	mul	r17, r18
     f40:	90 0d       	add	r25, r0
     f42:	11 24       	eor	r1, r1
     f44:	48 17       	cp	r20, r24
     f46:	59 07       	cpc	r21, r25
     f48:	e0 f4       	brcc	.+56     	; 0xf82 <timer2DelayMs+0xde>
	{
		timer2Set(set_timer2);//10 for no prescaler....12 for 8 prescaler .... 8 for 32 prescaler ....6 for prescaler 64 .....
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	0e 94 f1 06 	call	0xde2	; 0xde2 <timer2Set>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR & 0x40)==0);
     f50:	08 b6       	in	r0, 0x38	; 56
     f52:	06 fe       	sbrs	r0, 6
     f54:	fd cf       	rjmp	.-6      	; 0xf50 <timer2DelayMs+0xac>
		TIFR |=0x40;
     f56:	88 b7       	in	r24, 0x38	; 56
     f58:	80 64       	ori	r24, 0x40	; 64
     f5a:	88 bf       	out	0x38, r24	; 56
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
		set_timer2=240;
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	9a 81       	ldd	r25, Y+2	; 0x02
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	9a 83       	std	Y+2, r25	; 0x02
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	2b 81       	ldd	r18, Y+3	; 0x03
     f68:	49 81       	ldd	r20, Y+1	; 0x01
     f6a:	5a 81       	ldd	r21, Y+2	; 0x02
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	02 9f       	mul	r16, r18
     f70:	c0 01       	movw	r24, r0
     f72:	03 9f       	mul	r16, r19
     f74:	90 0d       	add	r25, r0
     f76:	12 9f       	mul	r17, r18
     f78:	90 0d       	add	r25, r0
     f7a:	11 24       	eor	r1, r1
     f7c:	48 17       	cp	r20, r24
     f7e:	59 07       	cpc	r21, r25
     f80:	20 f3       	brcs	.-56     	; 0xf4a <timer2DelayMs+0xa6>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR & 0x40)==0);
		TIFR |=0x40;

	}
}
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	08 95       	ret

00000f94 <timer2DelayUs>:

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
     f94:	cf 92       	push	r12
     f96:	df 92       	push	r13
     f98:	ef 92       	push	r14
     f9a:	ff 92       	push	r15
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <timer2DelayUs+0xe>
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	6b 01       	movw	r12, r22
     fa8:	7c 01       	movw	r14, r24
	volatile uint16_t count =0;
     faa:	1a 82       	std	Y+2, r1	; 0x02
     fac:	19 82       	std	Y+1, r1	; 0x01
	for (count=0;count<u16_delay_in_us;count++)
     fae:	1a 82       	std	Y+2, r1	; 0x02
     fb0:	19 82       	std	Y+1, r1	; 0x01
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	9a 81       	ldd	r25, Y+2	; 0x02
     fb6:	a0 e0       	ldi	r26, 0x00	; 0
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	8c 15       	cp	r24, r12
     fbc:	9d 05       	cpc	r25, r13
     fbe:	ae 05       	cpc	r26, r14
     fc0:	bf 05       	cpc	r27, r15
     fc2:	b8 f4       	brcc	.+46     	; 0xff2 <timer2DelayUs+0x5e>
	{
		timer2Set(254);//254 for no prescaler
     fc4:	8e ef       	ldi	r24, 0xFE	; 254
     fc6:	0e 94 f1 06 	call	0xde2	; 0xde2 <timer2Set>
		while ((TIFR & 0x40)==0);
     fca:	08 b6       	in	r0, 0x38	; 56
     fcc:	06 fe       	sbrs	r0, 6
     fce:	fd cf       	rjmp	.-6      	; 0xfca <timer2DelayUs+0x36>
		TIFR |=0x40;
     fd0:	88 b7       	in	r24, 0x38	; 56
     fd2:	80 64       	ori	r24, 0x40	; 64
     fd4:	88 bf       	out	0x38, r24	; 56

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
	volatile uint16_t count =0;
	for (count=0;count<u16_delay_in_us;count++)
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	9a 81       	ldd	r25, Y+2	; 0x02
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	9a 83       	std	Y+2, r25	; 0x02
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	a0 e0       	ldi	r26, 0x00	; 0
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	8c 15       	cp	r24, r12
     fea:	9d 05       	cpc	r25, r13
     fec:	ae 05       	cpc	r26, r14
     fee:	bf 05       	cpc	r27, r15
     ff0:	48 f3       	brcs	.-46     	; 0xfc4 <timer2DelayUs+0x30>
		while ((TIFR & 0x40)==0);
		TIFR |=0x40;

	}

}
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	ff 90       	pop	r15
     ffc:	ef 90       	pop	r14
     ffe:	df 90       	pop	r13
    1000:	cf 90       	pop	r12
    1002:	08 95       	ret

00001004 <timer2SwPWM>:
/**
* Description:
* @param dutyCycle
*/
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    1004:	cf 92       	push	r12
    1006:	df 92       	push	r13
    1008:	ef 92       	push	r14
    100a:	ff 92       	push	r15
    100c:	cf 93       	push	r28
    100e:	c8 2f       	mov	r28, r24

float dutyReal;
pwm_time_on=MAX_HOLD;
    1010:	8f ef       	ldi	r24, 0xFF	; 255
    1012:	80 93 7c 00 	sts	0x007C, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
    1016:	60 91 7c 00 	lds	r22, 0x007C
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__floatunsisf>
    1024:	6b 01       	movw	r12, r22
    1026:	7c 01       	movw	r14, r24
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{

float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
    1028:	6c 2f       	mov	r22, r28
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__floatunsisf>
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	48 ec       	ldi	r20, 0xC8	; 200
    103a:	52 e4       	ldi	r21, 0x42	; 66
    103c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__divsf3>
    1040:	9b 01       	movw	r18, r22
    1042:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
    1044:	c7 01       	movw	r24, r14
    1046:	b6 01       	movw	r22, r12
    1048:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__mulsf3>
    104c:	0e 94 3f 09 	call	0x127e	; 0x127e <__fixunssfsi>
    1050:	60 93 7c 00 	sts	0x007C, r22
switch(pooling_2)
    1054:	80 91 7f 00 	lds	r24, 0x007F
    1058:	88 23       	and	r24, r24
    105a:	19 f0       	breq	.+6      	; 0x1062 <timer2SwPWM+0x5e>
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	29 f5       	brne	.+74     	; 0x10aa <timer2SwPWM+0xa6>
    1060:	1f c0       	rjmp	.+62     	; 0x10a0 <timer2SwPWM+0x9c>
{
	case 0:
	{
		timer2Start();
    1062:	0e 94 f5 06 	call	0xdea	; 0xdea <timer2Start>
		timer2Set(pwm_time_on);
    1066:	80 91 7c 00 	lds	r24, 0x007C
    106a:	0e 94 f1 06 	call	0xde2	; 0xde2 <timer2Set>
		//freq 50KHZ is the Max frequency possible
		while ((TIFR&0x04)==0);
    106e:	08 b6       	in	r0, 0x38	; 56
    1070:	02 fe       	sbrs	r0, 2
    1072:	fd cf       	rjmp	.-6      	; 0x106e <timer2SwPWM+0x6a>
		TIFR |=0x04;
    1074:	88 b7       	in	r24, 0x38	; 56
    1076:	84 60       	ori	r24, 0x04	; 4
    1078:	88 bf       	out	0x38, r24	; 56
		PORTC_DATA |=0xff;
    107a:	85 b3       	in	r24, 0x15	; 21
    107c:	8f ef       	ldi	r24, 0xFF	; 255
    107e:	85 bb       	out	0x15, r24	; 21
		timer2Start();
    1080:	0e 94 f5 06 	call	0xdea	; 0xdea <timer2Start>
		timer2Set(MAX_HOLD-pwm_time_on);
    1084:	80 91 7c 00 	lds	r24, 0x007C
    1088:	80 95       	com	r24
    108a:	0e 94 f1 06 	call	0xde2	; 0xde2 <timer2Set>
		//freq
		while ((TIFR & 0x04)==0);
    108e:	08 b6       	in	r0, 0x38	; 56
    1090:	02 fe       	sbrs	r0, 2
    1092:	fd cf       	rjmp	.-6      	; 0x108e <timer2SwPWM+0x8a>
		TIFR |=0x04;
    1094:	88 b7       	in	r24, 0x38	; 56
    1096:	84 60       	ori	r24, 0x04	; 4
    1098:	88 bf       	out	0x38, r24	; 56
		PORTC_DATA &=0x00;
    109a:	85 b3       	in	r24, 0x15	; 21
    109c:	15 ba       	out	0x15, r1	; 21

		break;
    109e:	05 c0       	rjmp	.+10     	; 0x10aa <timer2SwPWM+0xa6>
	}
	case 1:
	{
		timer2Start();
    10a0:	0e 94 f5 06 	call	0xdea	; 0xdea <timer2Start>
		OCR2=pwm_time_on;
    10a4:	80 91 7c 00 	lds	r24, 0x007C
    10a8:	83 bd       	out	0x23, r24	; 35
	}

}


}
    10aa:	cf 91       	pop	r28
    10ac:	ff 90       	pop	r15
    10ae:	ef 90       	pop	r14
    10b0:	df 90       	pop	r13
    10b2:	cf 90       	pop	r12
    10b4:	08 95       	ret

000010b6 <Timer2_interrupt_COMP_routine>:
void Timer2_interrupt_COMP_routine(void)
{



}
    10b6:	08 95       	ret

000010b8 <Timer2_interrupt_routine>:
void Timer2_interrupt_routine(void)
{


}
    10b8:	08 95       	ret

000010ba <Uart_Init>:
uint8_t BufferRequested[Buffer_Size];
volatile uint8_t u8_index=0;
volatile uint8_t buf_is_full=0;
void Uart_Init(En_BAUD_Rate Baud_rate,En_Stop_config Stop_bits_num,
  EN_Parity parity_Bit,EN_Data_Size data_num_bits,EN_UartMode uart_mode)
{uint8_t Buffer=0;
    10ba:	0f 93       	push	r16
switch (Baud_rate) {
    10bc:	83 33       	cpi	r24, 0x33	; 51
    10be:	71 f0       	breq	.+28     	; 0x10dc <Uart_Init+0x22>
    10c0:	84 33       	cpi	r24, 0x34	; 52
    10c2:	18 f4       	brcc	.+6      	; 0x10ca <Uart_Init+0x10>
    10c4:	89 31       	cpi	r24, 0x19	; 25
    10c6:	79 f4       	brne	.+30     	; 0x10e6 <Uart_Init+0x2c>
    10c8:	0c c0       	rjmp	.+24     	; 0x10e2 <Uart_Init+0x28>
    10ca:	84 34       	cpi	r24, 0x44	; 68
    10cc:	21 f0       	breq	.+8      	; 0x10d6 <Uart_Init+0x1c>
    10ce:	87 36       	cpi	r24, 0x67	; 103
    10d0:	51 f4       	brne	.+20     	; 0x10e6 <Uart_Init+0x2c>
  case Baud9600:
  UBRRL=Baud9600;
    10d2:	89 b9       	out	0x09, r24	; 9
  break;
    10d4:	08 c0       	rjmp	.+16     	; 0x10e6 <Uart_Init+0x2c>
  case Baud14400:
  UBRRL=Baud14400;
    10d6:	84 e4       	ldi	r24, 0x44	; 68
    10d8:	89 b9       	out	0x09, r24	; 9
  break;
    10da:	05 c0       	rjmp	.+10     	; 0x10e6 <Uart_Init+0x2c>
  case Baud19200:
  UBRRL=Baud19200;
    10dc:	83 e3       	ldi	r24, 0x33	; 51
    10de:	89 b9       	out	0x09, r24	; 9
  break;
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <Uart_Init+0x2c>
  case Baud38400:
  UBRRL=Baud38400;
    10e2:	89 e1       	ldi	r24, 0x19	; 25
    10e4:	89 b9       	out	0x09, r24	; 9
  break;
}
switch (Stop_bits_num) {
    10e6:	66 23       	and	r22, r22
    10e8:	31 f0       	breq	.+12     	; 0x10f6 <Uart_Init+0x3c>
    10ea:	61 30       	cpi	r22, 0x01	; 1
    10ec:	11 f0       	breq	.+4      	; 0x10f2 <Uart_Init+0x38>
uint8_t BufferRequested[Buffer_Size];
volatile uint8_t u8_index=0;
volatile uint8_t buf_is_full=0;
void Uart_Init(En_BAUD_Rate Baud_rate,En_Stop_config Stop_bits_num,
  EN_Parity parity_Bit,EN_Data_Size data_num_bits,EN_UartMode uart_mode)
{uint8_t Buffer=0;
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	03 c0       	rjmp	.+6      	; 0x10f8 <Uart_Init+0x3e>
  break;
}
case TwoStopBits:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,USBS);
    10f2:	88 e8       	ldi	r24, 0x88	; 136
  break;
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <Uart_Init+0x3e>
  break;
}
switch (Stop_bits_num) {
case OneStopBit:
{ SET_BIT(Buffer,URSEL);
  CLEAR_BIT(Buffer,USBS);
    10f6:	80 e8       	ldi	r24, 0x80	; 128
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,USBS);
  break;
}
}
switch (data_num_bits)
    10f8:	22 30       	cpi	r18, 0x02	; 2
    10fa:	a1 f0       	breq	.+40     	; 0x1124 <Uart_Init+0x6a>
    10fc:	23 30       	cpi	r18, 0x03	; 3
    10fe:	28 f4       	brcc	.+10     	; 0x110a <Uart_Init+0x50>
    1100:	22 23       	and	r18, r18
    1102:	41 f0       	breq	.+16     	; 0x1114 <Uart_Init+0x5a>
    1104:	21 30       	cpi	r18, 0x01	; 1
    1106:	b9 f4       	brne	.+46     	; 0x1136 <Uart_Init+0x7c>
    1108:	09 c0       	rjmp	.+18     	; 0x111c <Uart_Init+0x62>
    110a:	23 30       	cpi	r18, 0x03	; 3
    110c:	79 f0       	breq	.+30     	; 0x112c <Uart_Init+0x72>
    110e:	24 30       	cpi	r18, 0x04	; 4
    1110:	91 f4       	brne	.+36     	; 0x1136 <Uart_Init+0x7c>
    1112:	0f c0       	rjmp	.+30     	; 0x1132 <Uart_Init+0x78>
{
case FiveBits:
{
SET_BIT(Buffer,URSEL);
    1114:	80 68       	ori	r24, 0x80	; 128
CLEAR_BIT(Buffer,UCSZ0);
CLEAR_BIT(Buffer,UCSZ1);
    1116:	89 7f       	andi	r24, 0xF9	; 249
CLEAR_BIT(UCSRB,UCSZ2);
    1118:	52 98       	cbi	0x0a, 2	; 10
break;
    111a:	0d c0       	rjmp	.+26     	; 0x1136 <Uart_Init+0x7c>
}
case SexBits:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,UCSZ0);
    111c:	82 68       	ori	r24, 0x82	; 130
  CLEAR_BIT(Buffer,UCSZ1);
    111e:	8b 7f       	andi	r24, 0xFB	; 251
  CLEAR_BIT(UCSRB,UCSZ2);
    1120:	52 98       	cbi	0x0a, 2	; 10
  break;
    1122:	09 c0       	rjmp	.+18     	; 0x1136 <Uart_Init+0x7c>
}
case SevenBits:
{
  SET_BIT(Buffer,URSEL);
  CLEAR_BIT(Buffer,UCSZ0);
    1124:	89 77       	andi	r24, 0x79	; 121
  SET_BIT(Buffer,UCSZ1);
    1126:	84 68       	ori	r24, 0x84	; 132
  CLEAR_BIT(UCSRB,UCSZ2);
    1128:	52 98       	cbi	0x0a, 2	; 10
  break;
    112a:	05 c0       	rjmp	.+10     	; 0x1136 <Uart_Init+0x7c>
}
case EightBits:
{   SET_BIT(Buffer,URSEL);
    SET_BIT(Buffer,UCSZ0);
    SET_BIT(Buffer,UCSZ1);
    112c:	86 68       	ori	r24, 0x86	; 134
    CLEAR_BIT(UCSRB,UCSZ2);
    112e:	52 98       	cbi	0x0a, 2	; 10
break;
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <Uart_Init+0x7c>
}

case NineBits:
{   SET_BIT(Buffer,URSEL);
	SET_BIT(Buffer,UCSZ0);
	SET_BIT(Buffer,UCSZ1);
    1132:	86 68       	ori	r24, 0x86	; 134
	SET_BIT(UCSRB,UCSZ2);
    1134:	52 9a       	sbi	0x0a, 2	; 10
	break;
}

}

switch (uart_mode) {
    1136:	00 23       	and	r16, r16
    1138:	19 f0       	breq	.+6      	; 0x1140 <Uart_Init+0x86>
    113a:	01 30       	cpi	r16, 0x01	; 1
    113c:	29 f4       	brne	.+10     	; 0x1148 <Uart_Init+0x8e>
    113e:	03 c0       	rjmp	.+6      	; 0x1146 <Uart_Init+0x8c>
  case ASynchronous:
  {
  SET_BIT(Buffer,URSEL);
    1140:	80 68       	ori	r24, 0x80	; 128
  CLEAR_BIT(Buffer,UMSEL);
    1142:	8f 7b       	andi	r24, 0xBF	; 191
  break;
    1144:	01 c0       	rjmp	.+2      	; 0x1148 <Uart_Init+0x8e>
  }
case Synchronous:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,UMSEL);
    1146:	80 6c       	ori	r24, 0xC0	; 192
  break;
}
}
switch (parity_Bit) {
    1148:	41 30       	cpi	r20, 0x01	; 1
    114a:	41 f0       	breq	.+16     	; 0x115c <Uart_Init+0xa2>
    114c:	41 30       	cpi	r20, 0x01	; 1
    114e:	18 f0       	brcs	.+6      	; 0x1156 <Uart_Init+0x9c>
    1150:	42 30       	cpi	r20, 0x02	; 2
    1152:	41 f4       	brne	.+16     	; 0x1164 <Uart_Init+0xaa>
    1154:	06 c0       	rjmp	.+12     	; 0x1162 <Uart_Init+0xa8>
  case NoParity:
{
SET_BIT(Buffer,URSEL);
    1156:	80 68       	ori	r24, 0x80	; 128
CLEAR_BIT(Buffer,UPM0);
CLEAR_BIT(Buffer,UPM1);
    1158:	8f 7c       	andi	r24, 0xCF	; 207
  break;
    115a:	04 c0       	rjmp	.+8      	; 0x1164 <Uart_Init+0xaa>
}
case EvenParity:
{
SET_BIT(Buffer,URSEL);
CLEAR_BIT(Buffer,UPM0);
    115c:	8f 74       	andi	r24, 0x4F	; 79
SET_BIT(Buffer,UPM1);
    115e:	80 6a       	ori	r24, 0xA0	; 160
break;
    1160:	01 c0       	rjmp	.+2      	; 0x1164 <Uart_Init+0xaa>
}
case OddParity:
{
SET_BIT(Buffer,URSEL);
SET_BIT(Buffer,UPM1);
SET_BIT(Buffer,UPM0);
    1162:	80 6b       	ori	r24, 0xB0	; 176
}


}

UCSRC=Buffer;
    1164:	80 bd       	out	0x20, r24	; 32
SET_BIT(UCSRB,TXEN);/*TXEN*/
    1166:	53 9a       	sbi	0x0a, 3	; 10
SET_BIT(UCSRB,RXEN);/*RXEN*/
    1168:	54 9a       	sbi	0x0a, 4	; 10
}
    116a:	0f 91       	pop	r16
    116c:	08 95       	ret

0000116e <UartTransmitPooling>:
void UartTransmitPooling(uint8_t Data)
{
while( !( UCSRA & (1<<UDRE)));
    116e:	5d 9b       	sbis	0x0b, 5	; 11
    1170:	fe cf       	rjmp	.-4      	; 0x116e <UartTransmitPooling>
UDR=Data;
    1172:	8c b9       	out	0x0c, r24	; 12
}
    1174:	08 95       	ret

00001176 <UartRecievePooling>:
uint8_t UartRecievePooling(void)
{
	uint8_t data=0;
while (!( UCSRA & (1 << RXC)));/* Wait until new data receive*/
    1176:	5f 9b       	sbis	0x0b, 7	; 11
    1178:	fe cf       	rjmp	.-4      	; 0x1176 <UartRecievePooling>
data=UDR;
    117a:	8c b1       	in	r24, 0x0c	; 12
return data;									/* Get and return received data */
}
    117c:	08 95       	ret

0000117e <Enable_communication_interrupt>:


void Enable_communication_interrupt(void)
{
G_interrupt_Enable();
    117e:	0e 94 c8 01 	call	0x390	; 0x390 <G_interrupt_Enable>
SET_BIT(UCSRB,RXCIE);
    1182:	57 9a       	sbi	0x0a, 7	; 10
SET_BIT(UCSRB,TXCIE);
    1184:	56 9a       	sbi	0x0a, 6	; 10
SET_BIT(SPCR,SPIE);
    1186:	6f 9a       	sbi	0x0d, 7	; 13
}
    1188:	08 95       	ret

0000118a <UartRecieveInterrupt>:
void UartRecieveInterrupt(void)
{/*
if(u8_index<Buffer_Size)
{
u8_Notification_RX=TRUE;
*/  u8_DATA=UDR;/*
    118a:	8c b1       	in	r24, 0x0c	; 12
    118c:	80 93 65 00 	sts	0x0065, r24
}
  else{
    u8_index=0;
      }
*/
}
    1190:	08 95       	ret

00001192 <UartTransmitInterrupt>:
 buf_is_full=1;
 u8_index=0;
     }
u8_Notification_TX=TRUE;
*/
UDR =u8_DATA;
    1192:	80 91 65 00 	lds	r24, 0x0065
    1196:	8c b9       	out	0x0c, r24	; 12
}
    1198:	08 95       	ret

0000119a <UartTransmitdataInt>:
void UartTransmitdataInt(uint8_t data_to_transmit)
{

	  u8_DATA=data_to_transmit;
    119a:	80 93 65 00 	sts	0x0065, r24

}
    119e:	08 95       	ret

000011a0 <Uart_tryansmitfirstbyte>:

void Uart_tryansmitfirstbyte(uint8_t data)
{
UDR=data;
    11a0:	8c b9       	out	0x0c, r24	; 12
}
    11a2:	08 95       	ret

000011a4 <Uart_recievefirstbyte>:
uint8_t Uart_recievefirstbyte(void)
{
uint8_t data=0;
data = UDR;
    11a4:	8c b1       	in	r24, 0x0c	; 12
return data;
}
    11a6:	08 95       	ret

000011a8 <Uart_De_Init>:
void Uart_De_Init(void)
{
  CLEAR_BIT(UCSRB,TXEN);/*TXEN*/
    11a8:	53 98       	cbi	0x0a, 3	; 10
  CLEAR_BIT(UCSRB,RXEN);/*RXEN*/
    11aa:	54 98       	cbi	0x0a, 4	; 10

}
    11ac:	08 95       	ret

000011ae <__divsf3>:
    11ae:	0c d0       	rcall	.+24     	; 0x11c8 <__divsf3x>
    11b0:	e6 c0       	rjmp	.+460    	; 0x137e <__fp_round>
    11b2:	de d0       	rcall	.+444    	; 0x1370 <__fp_pscB>
    11b4:	40 f0       	brcs	.+16     	; 0x11c6 <__divsf3+0x18>
    11b6:	d5 d0       	rcall	.+426    	; 0x1362 <__fp_pscA>
    11b8:	30 f0       	brcs	.+12     	; 0x11c6 <__divsf3+0x18>
    11ba:	21 f4       	brne	.+8      	; 0x11c4 <__divsf3+0x16>
    11bc:	5f 3f       	cpi	r21, 0xFF	; 255
    11be:	19 f0       	breq	.+6      	; 0x11c6 <__divsf3+0x18>
    11c0:	c7 c0       	rjmp	.+398    	; 0x1350 <__fp_inf>
    11c2:	51 11       	cpse	r21, r1
    11c4:	10 c1       	rjmp	.+544    	; 0x13e6 <__fp_szero>
    11c6:	ca c0       	rjmp	.+404    	; 0x135c <__fp_nan>

000011c8 <__divsf3x>:
    11c8:	eb d0       	rcall	.+470    	; 0x13a0 <__fp_split3>
    11ca:	98 f3       	brcs	.-26     	; 0x11b2 <__divsf3+0x4>

000011cc <__divsf3_pse>:
    11cc:	99 23       	and	r25, r25
    11ce:	c9 f3       	breq	.-14     	; 0x11c2 <__divsf3+0x14>
    11d0:	55 23       	and	r21, r21
    11d2:	b1 f3       	breq	.-20     	; 0x11c0 <__divsf3+0x12>
    11d4:	95 1b       	sub	r25, r21
    11d6:	55 0b       	sbc	r21, r21
    11d8:	bb 27       	eor	r27, r27
    11da:	aa 27       	eor	r26, r26
    11dc:	62 17       	cp	r22, r18
    11de:	73 07       	cpc	r23, r19
    11e0:	84 07       	cpc	r24, r20
    11e2:	38 f0       	brcs	.+14     	; 0x11f2 <__divsf3_pse+0x26>
    11e4:	9f 5f       	subi	r25, 0xFF	; 255
    11e6:	5f 4f       	sbci	r21, 0xFF	; 255
    11e8:	22 0f       	add	r18, r18
    11ea:	33 1f       	adc	r19, r19
    11ec:	44 1f       	adc	r20, r20
    11ee:	aa 1f       	adc	r26, r26
    11f0:	a9 f3       	breq	.-22     	; 0x11dc <__divsf3_pse+0x10>
    11f2:	33 d0       	rcall	.+102    	; 0x125a <__divsf3_pse+0x8e>
    11f4:	0e 2e       	mov	r0, r30
    11f6:	3a f0       	brmi	.+14     	; 0x1206 <__divsf3_pse+0x3a>
    11f8:	e0 e8       	ldi	r30, 0x80	; 128
    11fa:	30 d0       	rcall	.+96     	; 0x125c <__divsf3_pse+0x90>
    11fc:	91 50       	subi	r25, 0x01	; 1
    11fe:	50 40       	sbci	r21, 0x00	; 0
    1200:	e6 95       	lsr	r30
    1202:	00 1c       	adc	r0, r0
    1204:	ca f7       	brpl	.-14     	; 0x11f8 <__divsf3_pse+0x2c>
    1206:	29 d0       	rcall	.+82     	; 0x125a <__divsf3_pse+0x8e>
    1208:	fe 2f       	mov	r31, r30
    120a:	27 d0       	rcall	.+78     	; 0x125a <__divsf3_pse+0x8e>
    120c:	66 0f       	add	r22, r22
    120e:	77 1f       	adc	r23, r23
    1210:	88 1f       	adc	r24, r24
    1212:	bb 1f       	adc	r27, r27
    1214:	26 17       	cp	r18, r22
    1216:	37 07       	cpc	r19, r23
    1218:	48 07       	cpc	r20, r24
    121a:	ab 07       	cpc	r26, r27
    121c:	b0 e8       	ldi	r27, 0x80	; 128
    121e:	09 f0       	breq	.+2      	; 0x1222 <__divsf3_pse+0x56>
    1220:	bb 0b       	sbc	r27, r27
    1222:	80 2d       	mov	r24, r0
    1224:	bf 01       	movw	r22, r30
    1226:	ff 27       	eor	r31, r31
    1228:	93 58       	subi	r25, 0x83	; 131
    122a:	5f 4f       	sbci	r21, 0xFF	; 255
    122c:	2a f0       	brmi	.+10     	; 0x1238 <__divsf3_pse+0x6c>
    122e:	9e 3f       	cpi	r25, 0xFE	; 254
    1230:	51 05       	cpc	r21, r1
    1232:	68 f0       	brcs	.+26     	; 0x124e <__divsf3_pse+0x82>
    1234:	8d c0       	rjmp	.+282    	; 0x1350 <__fp_inf>
    1236:	d7 c0       	rjmp	.+430    	; 0x13e6 <__fp_szero>
    1238:	5f 3f       	cpi	r21, 0xFF	; 255
    123a:	ec f3       	brlt	.-6      	; 0x1236 <__divsf3_pse+0x6a>
    123c:	98 3e       	cpi	r25, 0xE8	; 232
    123e:	dc f3       	brlt	.-10     	; 0x1236 <__divsf3_pse+0x6a>
    1240:	86 95       	lsr	r24
    1242:	77 95       	ror	r23
    1244:	67 95       	ror	r22
    1246:	b7 95       	ror	r27
    1248:	f7 95       	ror	r31
    124a:	9f 5f       	subi	r25, 0xFF	; 255
    124c:	c9 f7       	brne	.-14     	; 0x1240 <__divsf3_pse+0x74>
    124e:	88 0f       	add	r24, r24
    1250:	91 1d       	adc	r25, r1
    1252:	96 95       	lsr	r25
    1254:	87 95       	ror	r24
    1256:	97 f9       	bld	r25, 7
    1258:	08 95       	ret
    125a:	e1 e0       	ldi	r30, 0x01	; 1
    125c:	66 0f       	add	r22, r22
    125e:	77 1f       	adc	r23, r23
    1260:	88 1f       	adc	r24, r24
    1262:	bb 1f       	adc	r27, r27
    1264:	62 17       	cp	r22, r18
    1266:	73 07       	cpc	r23, r19
    1268:	84 07       	cpc	r24, r20
    126a:	ba 07       	cpc	r27, r26
    126c:	20 f0       	brcs	.+8      	; 0x1276 <__divsf3_pse+0xaa>
    126e:	62 1b       	sub	r22, r18
    1270:	73 0b       	sbc	r23, r19
    1272:	84 0b       	sbc	r24, r20
    1274:	ba 0b       	sbc	r27, r26
    1276:	ee 1f       	adc	r30, r30
    1278:	88 f7       	brcc	.-30     	; 0x125c <__divsf3_pse+0x90>
    127a:	e0 95       	com	r30
    127c:	08 95       	ret

0000127e <__fixunssfsi>:
    127e:	98 d0       	rcall	.+304    	; 0x13b0 <__fp_splitA>
    1280:	88 f0       	brcs	.+34     	; 0x12a4 <__fixunssfsi+0x26>
    1282:	9f 57       	subi	r25, 0x7F	; 127
    1284:	90 f0       	brcs	.+36     	; 0x12aa <__fixunssfsi+0x2c>
    1286:	b9 2f       	mov	r27, r25
    1288:	99 27       	eor	r25, r25
    128a:	b7 51       	subi	r27, 0x17	; 23
    128c:	a0 f0       	brcs	.+40     	; 0x12b6 <__fixunssfsi+0x38>
    128e:	d1 f0       	breq	.+52     	; 0x12c4 <__fixunssfsi+0x46>
    1290:	66 0f       	add	r22, r22
    1292:	77 1f       	adc	r23, r23
    1294:	88 1f       	adc	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	1a f0       	brmi	.+6      	; 0x12a0 <__fixunssfsi+0x22>
    129a:	ba 95       	dec	r27
    129c:	c9 f7       	brne	.-14     	; 0x1290 <__fixunssfsi+0x12>
    129e:	12 c0       	rjmp	.+36     	; 0x12c4 <__fixunssfsi+0x46>
    12a0:	b1 30       	cpi	r27, 0x01	; 1
    12a2:	81 f0       	breq	.+32     	; 0x12c4 <__fixunssfsi+0x46>
    12a4:	9f d0       	rcall	.+318    	; 0x13e4 <__fp_zero>
    12a6:	b1 e0       	ldi	r27, 0x01	; 1
    12a8:	08 95       	ret
    12aa:	9c c0       	rjmp	.+312    	; 0x13e4 <__fp_zero>
    12ac:	67 2f       	mov	r22, r23
    12ae:	78 2f       	mov	r23, r24
    12b0:	88 27       	eor	r24, r24
    12b2:	b8 5f       	subi	r27, 0xF8	; 248
    12b4:	39 f0       	breq	.+14     	; 0x12c4 <__fixunssfsi+0x46>
    12b6:	b9 3f       	cpi	r27, 0xF9	; 249
    12b8:	cc f3       	brlt	.-14     	; 0x12ac <__fixunssfsi+0x2e>
    12ba:	86 95       	lsr	r24
    12bc:	77 95       	ror	r23
    12be:	67 95       	ror	r22
    12c0:	b3 95       	inc	r27
    12c2:	d9 f7       	brne	.-10     	; 0x12ba <__fixunssfsi+0x3c>
    12c4:	3e f4       	brtc	.+14     	; 0x12d4 <__fixunssfsi+0x56>
    12c6:	90 95       	com	r25
    12c8:	80 95       	com	r24
    12ca:	70 95       	com	r23
    12cc:	61 95       	neg	r22
    12ce:	7f 4f       	sbci	r23, 0xFF	; 255
    12d0:	8f 4f       	sbci	r24, 0xFF	; 255
    12d2:	9f 4f       	sbci	r25, 0xFF	; 255
    12d4:	08 95       	ret

000012d6 <__floatunsisf>:
    12d6:	e8 94       	clt
    12d8:	09 c0       	rjmp	.+18     	; 0x12ec <__floatsisf+0x12>

000012da <__floatsisf>:
    12da:	97 fb       	bst	r25, 7
    12dc:	3e f4       	brtc	.+14     	; 0x12ec <__floatsisf+0x12>
    12de:	90 95       	com	r25
    12e0:	80 95       	com	r24
    12e2:	70 95       	com	r23
    12e4:	61 95       	neg	r22
    12e6:	7f 4f       	sbci	r23, 0xFF	; 255
    12e8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ea:	9f 4f       	sbci	r25, 0xFF	; 255
    12ec:	99 23       	and	r25, r25
    12ee:	a9 f0       	breq	.+42     	; 0x131a <__floatsisf+0x40>
    12f0:	f9 2f       	mov	r31, r25
    12f2:	96 e9       	ldi	r25, 0x96	; 150
    12f4:	bb 27       	eor	r27, r27
    12f6:	93 95       	inc	r25
    12f8:	f6 95       	lsr	r31
    12fa:	87 95       	ror	r24
    12fc:	77 95       	ror	r23
    12fe:	67 95       	ror	r22
    1300:	b7 95       	ror	r27
    1302:	f1 11       	cpse	r31, r1
    1304:	f8 cf       	rjmp	.-16     	; 0x12f6 <__floatsisf+0x1c>
    1306:	fa f4       	brpl	.+62     	; 0x1346 <__floatsisf+0x6c>
    1308:	bb 0f       	add	r27, r27
    130a:	11 f4       	brne	.+4      	; 0x1310 <__floatsisf+0x36>
    130c:	60 ff       	sbrs	r22, 0
    130e:	1b c0       	rjmp	.+54     	; 0x1346 <__floatsisf+0x6c>
    1310:	6f 5f       	subi	r22, 0xFF	; 255
    1312:	7f 4f       	sbci	r23, 0xFF	; 255
    1314:	8f 4f       	sbci	r24, 0xFF	; 255
    1316:	9f 4f       	sbci	r25, 0xFF	; 255
    1318:	16 c0       	rjmp	.+44     	; 0x1346 <__floatsisf+0x6c>
    131a:	88 23       	and	r24, r24
    131c:	11 f0       	breq	.+4      	; 0x1322 <__floatsisf+0x48>
    131e:	96 e9       	ldi	r25, 0x96	; 150
    1320:	11 c0       	rjmp	.+34     	; 0x1344 <__floatsisf+0x6a>
    1322:	77 23       	and	r23, r23
    1324:	21 f0       	breq	.+8      	; 0x132e <__floatsisf+0x54>
    1326:	9e e8       	ldi	r25, 0x8E	; 142
    1328:	87 2f       	mov	r24, r23
    132a:	76 2f       	mov	r23, r22
    132c:	05 c0       	rjmp	.+10     	; 0x1338 <__floatsisf+0x5e>
    132e:	66 23       	and	r22, r22
    1330:	71 f0       	breq	.+28     	; 0x134e <__floatsisf+0x74>
    1332:	96 e8       	ldi	r25, 0x86	; 134
    1334:	86 2f       	mov	r24, r22
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	2a f0       	brmi	.+10     	; 0x1346 <__floatsisf+0x6c>
    133c:	9a 95       	dec	r25
    133e:	66 0f       	add	r22, r22
    1340:	77 1f       	adc	r23, r23
    1342:	88 1f       	adc	r24, r24
    1344:	da f7       	brpl	.-10     	; 0x133c <__floatsisf+0x62>
    1346:	88 0f       	add	r24, r24
    1348:	96 95       	lsr	r25
    134a:	87 95       	ror	r24
    134c:	97 f9       	bld	r25, 7
    134e:	08 95       	ret

00001350 <__fp_inf>:
    1350:	97 f9       	bld	r25, 7
    1352:	9f 67       	ori	r25, 0x7F	; 127
    1354:	80 e8       	ldi	r24, 0x80	; 128
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	08 95       	ret

0000135c <__fp_nan>:
    135c:	9f ef       	ldi	r25, 0xFF	; 255
    135e:	80 ec       	ldi	r24, 0xC0	; 192
    1360:	08 95       	ret

00001362 <__fp_pscA>:
    1362:	00 24       	eor	r0, r0
    1364:	0a 94       	dec	r0
    1366:	16 16       	cp	r1, r22
    1368:	17 06       	cpc	r1, r23
    136a:	18 06       	cpc	r1, r24
    136c:	09 06       	cpc	r0, r25
    136e:	08 95       	ret

00001370 <__fp_pscB>:
    1370:	00 24       	eor	r0, r0
    1372:	0a 94       	dec	r0
    1374:	12 16       	cp	r1, r18
    1376:	13 06       	cpc	r1, r19
    1378:	14 06       	cpc	r1, r20
    137a:	05 06       	cpc	r0, r21
    137c:	08 95       	ret

0000137e <__fp_round>:
    137e:	09 2e       	mov	r0, r25
    1380:	03 94       	inc	r0
    1382:	00 0c       	add	r0, r0
    1384:	11 f4       	brne	.+4      	; 0x138a <__fp_round+0xc>
    1386:	88 23       	and	r24, r24
    1388:	52 f0       	brmi	.+20     	; 0x139e <__fp_round+0x20>
    138a:	bb 0f       	add	r27, r27
    138c:	40 f4       	brcc	.+16     	; 0x139e <__fp_round+0x20>
    138e:	bf 2b       	or	r27, r31
    1390:	11 f4       	brne	.+4      	; 0x1396 <__fp_round+0x18>
    1392:	60 ff       	sbrs	r22, 0
    1394:	04 c0       	rjmp	.+8      	; 0x139e <__fp_round+0x20>
    1396:	6f 5f       	subi	r22, 0xFF	; 255
    1398:	7f 4f       	sbci	r23, 0xFF	; 255
    139a:	8f 4f       	sbci	r24, 0xFF	; 255
    139c:	9f 4f       	sbci	r25, 0xFF	; 255
    139e:	08 95       	ret

000013a0 <__fp_split3>:
    13a0:	57 fd       	sbrc	r21, 7
    13a2:	90 58       	subi	r25, 0x80	; 128
    13a4:	44 0f       	add	r20, r20
    13a6:	55 1f       	adc	r21, r21
    13a8:	59 f0       	breq	.+22     	; 0x13c0 <__fp_splitA+0x10>
    13aa:	5f 3f       	cpi	r21, 0xFF	; 255
    13ac:	71 f0       	breq	.+28     	; 0x13ca <__fp_splitA+0x1a>
    13ae:	47 95       	ror	r20

000013b0 <__fp_splitA>:
    13b0:	88 0f       	add	r24, r24
    13b2:	97 fb       	bst	r25, 7
    13b4:	99 1f       	adc	r25, r25
    13b6:	61 f0       	breq	.+24     	; 0x13d0 <__fp_splitA+0x20>
    13b8:	9f 3f       	cpi	r25, 0xFF	; 255
    13ba:	79 f0       	breq	.+30     	; 0x13da <__fp_splitA+0x2a>
    13bc:	87 95       	ror	r24
    13be:	08 95       	ret
    13c0:	12 16       	cp	r1, r18
    13c2:	13 06       	cpc	r1, r19
    13c4:	14 06       	cpc	r1, r20
    13c6:	55 1f       	adc	r21, r21
    13c8:	f2 cf       	rjmp	.-28     	; 0x13ae <__fp_split3+0xe>
    13ca:	46 95       	lsr	r20
    13cc:	f1 df       	rcall	.-30     	; 0x13b0 <__fp_splitA>
    13ce:	08 c0       	rjmp	.+16     	; 0x13e0 <__fp_splitA+0x30>
    13d0:	16 16       	cp	r1, r22
    13d2:	17 06       	cpc	r1, r23
    13d4:	18 06       	cpc	r1, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	f1 cf       	rjmp	.-30     	; 0x13bc <__fp_splitA+0xc>
    13da:	86 95       	lsr	r24
    13dc:	71 05       	cpc	r23, r1
    13de:	61 05       	cpc	r22, r1
    13e0:	08 94       	sec
    13e2:	08 95       	ret

000013e4 <__fp_zero>:
    13e4:	e8 94       	clt

000013e6 <__fp_szero>:
    13e6:	bb 27       	eor	r27, r27
    13e8:	66 27       	eor	r22, r22
    13ea:	77 27       	eor	r23, r23
    13ec:	cb 01       	movw	r24, r22
    13ee:	97 f9       	bld	r25, 7
    13f0:	08 95       	ret

000013f2 <__mulsf3>:
    13f2:	0b d0       	rcall	.+22     	; 0x140a <__mulsf3x>
    13f4:	c4 cf       	rjmp	.-120    	; 0x137e <__fp_round>
    13f6:	b5 df       	rcall	.-150    	; 0x1362 <__fp_pscA>
    13f8:	28 f0       	brcs	.+10     	; 0x1404 <__mulsf3+0x12>
    13fa:	ba df       	rcall	.-140    	; 0x1370 <__fp_pscB>
    13fc:	18 f0       	brcs	.+6      	; 0x1404 <__mulsf3+0x12>
    13fe:	95 23       	and	r25, r21
    1400:	09 f0       	breq	.+2      	; 0x1404 <__mulsf3+0x12>
    1402:	a6 cf       	rjmp	.-180    	; 0x1350 <__fp_inf>
    1404:	ab cf       	rjmp	.-170    	; 0x135c <__fp_nan>
    1406:	11 24       	eor	r1, r1
    1408:	ee cf       	rjmp	.-36     	; 0x13e6 <__fp_szero>

0000140a <__mulsf3x>:
    140a:	ca df       	rcall	.-108    	; 0x13a0 <__fp_split3>
    140c:	a0 f3       	brcs	.-24     	; 0x13f6 <__mulsf3+0x4>

0000140e <__mulsf3_pse>:
    140e:	95 9f       	mul	r25, r21
    1410:	d1 f3       	breq	.-12     	; 0x1406 <__mulsf3+0x14>
    1412:	95 0f       	add	r25, r21
    1414:	50 e0       	ldi	r21, 0x00	; 0
    1416:	55 1f       	adc	r21, r21
    1418:	62 9f       	mul	r22, r18
    141a:	f0 01       	movw	r30, r0
    141c:	72 9f       	mul	r23, r18
    141e:	bb 27       	eor	r27, r27
    1420:	f0 0d       	add	r31, r0
    1422:	b1 1d       	adc	r27, r1
    1424:	63 9f       	mul	r22, r19
    1426:	aa 27       	eor	r26, r26
    1428:	f0 0d       	add	r31, r0
    142a:	b1 1d       	adc	r27, r1
    142c:	aa 1f       	adc	r26, r26
    142e:	64 9f       	mul	r22, r20
    1430:	66 27       	eor	r22, r22
    1432:	b0 0d       	add	r27, r0
    1434:	a1 1d       	adc	r26, r1
    1436:	66 1f       	adc	r22, r22
    1438:	82 9f       	mul	r24, r18
    143a:	22 27       	eor	r18, r18
    143c:	b0 0d       	add	r27, r0
    143e:	a1 1d       	adc	r26, r1
    1440:	62 1f       	adc	r22, r18
    1442:	73 9f       	mul	r23, r19
    1444:	b0 0d       	add	r27, r0
    1446:	a1 1d       	adc	r26, r1
    1448:	62 1f       	adc	r22, r18
    144a:	83 9f       	mul	r24, r19
    144c:	a0 0d       	add	r26, r0
    144e:	61 1d       	adc	r22, r1
    1450:	22 1f       	adc	r18, r18
    1452:	74 9f       	mul	r23, r20
    1454:	33 27       	eor	r19, r19
    1456:	a0 0d       	add	r26, r0
    1458:	61 1d       	adc	r22, r1
    145a:	23 1f       	adc	r18, r19
    145c:	84 9f       	mul	r24, r20
    145e:	60 0d       	add	r22, r0
    1460:	21 1d       	adc	r18, r1
    1462:	82 2f       	mov	r24, r18
    1464:	76 2f       	mov	r23, r22
    1466:	6a 2f       	mov	r22, r26
    1468:	11 24       	eor	r1, r1
    146a:	9f 57       	subi	r25, 0x7F	; 127
    146c:	50 40       	sbci	r21, 0x00	; 0
    146e:	8a f0       	brmi	.+34     	; 0x1492 <__mulsf3_pse+0x84>
    1470:	e1 f0       	breq	.+56     	; 0x14aa <__mulsf3_pse+0x9c>
    1472:	88 23       	and	r24, r24
    1474:	4a f0       	brmi	.+18     	; 0x1488 <__mulsf3_pse+0x7a>
    1476:	ee 0f       	add	r30, r30
    1478:	ff 1f       	adc	r31, r31
    147a:	bb 1f       	adc	r27, r27
    147c:	66 1f       	adc	r22, r22
    147e:	77 1f       	adc	r23, r23
    1480:	88 1f       	adc	r24, r24
    1482:	91 50       	subi	r25, 0x01	; 1
    1484:	50 40       	sbci	r21, 0x00	; 0
    1486:	a9 f7       	brne	.-22     	; 0x1472 <__mulsf3_pse+0x64>
    1488:	9e 3f       	cpi	r25, 0xFE	; 254
    148a:	51 05       	cpc	r21, r1
    148c:	70 f0       	brcs	.+28     	; 0x14aa <__mulsf3_pse+0x9c>
    148e:	60 cf       	rjmp	.-320    	; 0x1350 <__fp_inf>
    1490:	aa cf       	rjmp	.-172    	; 0x13e6 <__fp_szero>
    1492:	5f 3f       	cpi	r21, 0xFF	; 255
    1494:	ec f3       	brlt	.-6      	; 0x1490 <__mulsf3_pse+0x82>
    1496:	98 3e       	cpi	r25, 0xE8	; 232
    1498:	dc f3       	brlt	.-10     	; 0x1490 <__mulsf3_pse+0x82>
    149a:	86 95       	lsr	r24
    149c:	77 95       	ror	r23
    149e:	67 95       	ror	r22
    14a0:	b7 95       	ror	r27
    14a2:	f7 95       	ror	r31
    14a4:	e7 95       	ror	r30
    14a6:	9f 5f       	subi	r25, 0xFF	; 255
    14a8:	c1 f7       	brne	.-16     	; 0x149a <__mulsf3_pse+0x8c>
    14aa:	fe 2b       	or	r31, r30
    14ac:	88 0f       	add	r24, r24
    14ae:	91 1d       	adc	r25, r1
    14b0:	96 95       	lsr	r25
    14b2:	87 95       	ror	r24
    14b4:	97 f9       	bld	r25, 7
    14b6:	08 95       	ret

000014b8 <_exit>:
    14b8:	f8 94       	cli

000014ba <__stop_program>:
    14ba:	ff cf       	rjmp	.-2      	; 0x14ba <__stop_program>
