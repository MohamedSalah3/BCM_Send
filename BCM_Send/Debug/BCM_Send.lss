
BCM_Send.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000014d8  0000156c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  0080007a  0080007a  00001586  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00001588  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00003154  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000036d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000207a  00000000  00000000  00003838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008eb  00000000  00000000  000058b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000803  00000000  00000000  0000619d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c60  00000000  00000000  000069a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fe7  00000000  00000000  00007600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001dad  00000000  00000000  000085e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_1>
       8:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__vector_2>
       c:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_3>
      10:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__vector_4>
      14:	0c 94 84 02 	jmp	0x508	; 0x508 <__vector_5>
      18:	0c 94 ab 02 	jmp	0x556	; 0x556 <__vector_6>
      1c:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__vector_7>
      20:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <__vector_8>
      24:	0c 94 20 03 	jmp	0x640	; 0x640 <__vector_9>
      28:	0c 94 47 03 	jmp	0x68e	; 0x68e <__vector_10>
      2c:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__vector_11>
      30:	0c 94 95 03 	jmp	0x72a	; 0x72a <__vector_12>
      34:	0c 94 bc 03 	jmp	0x778	; 0x778 <__vector_13>
      38:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__vector_14>
      3c:	0c 94 0a 04 	jmp	0x814	; 0x814 <__vector_15>
      40:	0c 94 31 04 	jmp	0x862	; 0x862 <__vector_16>
      44:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <__vector_17>
      48:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <__vector_18>
      4c:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__vector_19>
      50:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3a       	cpi	r26, 0xAE	; 174
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c4 00 	call	0x188	; 0x188 <main>
      8a:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BCM_Init>:
 */
#include "BCM_Send.h"
static uint8_t u8_Is_Intialized=0;
static uint8_t u8_frameID=0;
ERROR_STATUS BCM_Init (const BCM_ConfigType * ConfigPtr )
{uint8_t ret=E_OK;
      92:	0f 93       	push	r16
      94:	cf 93       	push	r28
      96:	df 93       	push	r29
      98:	ec 01       	movw	r28, r24

if(ConfigPtr == NULL){ret=NULL_PTR+BCM_MODULE;}
      9a:	00 97       	sbiw	r24, 0x00	; 0
      9c:	a9 f1       	breq	.+106    	; 0x108 <BCM_Init+0x76>
else{
/*Intialize SPI..*/
switch (ConfigPtr->u8_channel_Protcol) {
      9e:	88 81       	ld	r24, Y
      a0:	82 30       	cpi	r24, 0x02	; 2
      a2:	29 f0       	breq	.+10     	; 0xae <BCM_Init+0x1c>
      a4:	83 30       	cpi	r24, 0x03	; 3
      a6:	f1 f0       	breq	.+60     	; 0xe4 <BCM_Init+0x52>
      a8:	81 30       	cpi	r24, 0x01	; 1
      aa:	81 f5       	brne	.+96     	; 0x10c <BCM_Init+0x7a>
      ac:	0b c0       	rjmp	.+22     	; 0xc4 <BCM_Init+0x32>
  case SPI:
  u8_Is_Intialized++;
      ae:	80 91 7a 00 	lds	r24, 0x007A
      b2:	8f 5f       	subi	r24, 0xFF	; 255
      b4:	80 93 7a 00 	sts	0x007A, r24
	SPI_Init();
      b8:	0e 94 74 05 	call	0xae8	; 0xae8 <SPI_Init>
  Enable_communication_interrupt();
      bc:	0e 94 cd 08 	call	0x119a	; 0x119a <Enable_communication_interrupt>
 */
#include "BCM_Send.h"
static uint8_t u8_Is_Intialized=0;
static uint8_t u8_frameID=0;
ERROR_STATUS BCM_Init (const BCM_ConfigType * ConfigPtr )
{uint8_t ret=E_OK;
      c0:	80 e0       	ldi	r24, 0x00	; 0
switch (ConfigPtr->u8_channel_Protcol) {
  case SPI:
  u8_Is_Intialized++;
	SPI_Init();
  Enable_communication_interrupt();
  break;
      c2:	25 c0       	rjmp	.+74     	; 0x10e <BCM_Init+0x7c>
  case UART:
u8_Is_Intialized++;
      c4:	80 91 7a 00 	lds	r24, 0x007A
      c8:	8f 5f       	subi	r24, 0xFF	; 255
      ca:	80 93 7a 00 	sts	0x007A, r24
  Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
      ce:	87 e6       	ldi	r24, 0x67	; 103
      d0:	60 e0       	ldi	r22, 0x00	; 0
      d2:	40 e0       	ldi	r20, 0x00	; 0
      d4:	23 e0       	ldi	r18, 0x03	; 3
      d6:	00 e0       	ldi	r16, 0x00	; 0
      d8:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <Uart_Init>
	Enable_communication_interrupt();
      dc:	0e 94 cd 08 	call	0x119a	; 0x119a <Enable_communication_interrupt>
 */
#include "BCM_Send.h"
static uint8_t u8_Is_Intialized=0;
static uint8_t u8_frameID=0;
ERROR_STATUS BCM_Init (const BCM_ConfigType * ConfigPtr )
{uint8_t ret=E_OK;
      e0:	80 e0       	ldi	r24, 0x00	; 0
  break;
  case UART:
u8_Is_Intialized++;
  Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
	Enable_communication_interrupt();
  break;
      e2:	15 c0       	rjmp	.+42     	; 0x10e <BCM_Init+0x7c>
  case UARTANDSPI:
  u8_Is_Intialized++;
      e4:	80 91 7a 00 	lds	r24, 0x007A
      e8:	8f 5f       	subi	r24, 0xFF	; 255
      ea:	80 93 7a 00 	sts	0x007A, r24
  SPI_Init();
      ee:	0e 94 74 05 	call	0xae8	; 0xae8 <SPI_Init>
  Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
      f2:	87 e6       	ldi	r24, 0x67	; 103
      f4:	60 e0       	ldi	r22, 0x00	; 0
      f6:	40 e0       	ldi	r20, 0x00	; 0
      f8:	23 e0       	ldi	r18, 0x03	; 3
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <Uart_Init>
	Enable_communication_interrupt();
     100:	0e 94 cd 08 	call	0x119a	; 0x119a <Enable_communication_interrupt>
 */
#include "BCM_Send.h"
static uint8_t u8_Is_Intialized=0;
static uint8_t u8_frameID=0;
ERROR_STATUS BCM_Init (const BCM_ConfigType * ConfigPtr )
{uint8_t ret=E_OK;
     104:	80 e0       	ldi	r24, 0x00	; 0
  case UARTANDSPI:
  u8_Is_Intialized++;
  SPI_Init();
  Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
	Enable_communication_interrupt();
  break;
     106:	03 c0       	rjmp	.+6      	; 0x10e <BCM_Init+0x7c>
static uint8_t u8_Is_Intialized=0;
static uint8_t u8_frameID=0;
ERROR_STATUS BCM_Init (const BCM_ConfigType * ConfigPtr )
{uint8_t ret=E_OK;

if(ConfigPtr == NULL){ret=NULL_PTR+BCM_MODULE;}
     108:	84 e3       	ldi	r24, 0x34	; 52
     10a:	01 c0       	rjmp	.+2      	; 0x10e <BCM_Init+0x7c>
  SPI_Init();
  Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
	Enable_communication_interrupt();
  break;
  case I2C:
  ret=INVALID_PARM+BCM_MODULE;
     10c:	8a e3       	ldi	r24, 0x3A	; 58
  ret=INVALID_PARM+BCM_MODULE;
  break;

}
}
u8_frameID=ConfigPtr -> u8_BCM_ID;
     10e:	99 81       	ldd	r25, Y+1	; 0x01
     110:	90 93 7b 00 	sts	0x007B, r25
return ret;
}
     114:	df 91       	pop	r29
     116:	cf 91       	pop	r28
     118:	0f 91       	pop	r16
     11a:	08 95       	ret

0000011c <BCM_DeInit>:
ERROR_STATUS BCM_DeInit (const BCM_ConfigType * ConfigPtr)
{
uint8_t ret=E_OK;
if(u8_Is_Intialized==1)
     11c:	20 91 7a 00 	lds	r18, 0x007A
     120:	21 30       	cpi	r18, 0x01	; 1
     122:	19 f5       	brne	.+70     	; 0x16a <BCM_DeInit+0x4e>
{
  switch (ConfigPtr->u8_channel_Protcol) {
     124:	fc 01       	movw	r30, r24
     126:	80 81       	ld	r24, Z
     128:	82 30       	cpi	r24, 0x02	; 2
     12a:	59 f0       	breq	.+22     	; 0x142 <BCM_DeInit+0x26>
     12c:	83 30       	cpi	r24, 0x03	; 3
     12e:	18 f4       	brcc	.+6      	; 0x136 <BCM_DeInit+0x1a>
     130:	81 30       	cpi	r24, 0x01	; 1
     132:	29 f4       	brne	.+10     	; 0x13e <BCM_DeInit+0x22>
     134:	0c c0       	rjmp	.+24     	; 0x14e <BCM_DeInit+0x32>
     136:	83 30       	cpi	r24, 0x03	; 3
     138:	81 f0       	breq	.+32     	; 0x15a <BCM_DeInit+0x3e>
     13a:	84 30       	cpi	r24, 0x04	; 4
     13c:	d1 f0       	breq	.+52     	; 0x172 <BCM_DeInit+0x56>
u8_frameID=ConfigPtr -> u8_BCM_ID;
return ret;
}
ERROR_STATUS BCM_DeInit (const BCM_ConfigType * ConfigPtr)
{
uint8_t ret=E_OK;
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	08 95       	ret
if(u8_Is_Intialized==1)
{
  switch (ConfigPtr->u8_channel_Protcol) {
  case SPI:
  u8_Is_Intialized--;
     142:	10 92 7a 00 	sts	0x007A, r1
	SPI_De_Init();
     146:	0e 94 b3 05 	call	0xb66	; 0xb66 <SPI_De_Init>
u8_frameID=ConfigPtr -> u8_BCM_ID;
return ret;
}
ERROR_STATUS BCM_DeInit (const BCM_ConfigType * ConfigPtr)
{
uint8_t ret=E_OK;
     14a:	80 e0       	ldi	r24, 0x00	; 0
{
  switch (ConfigPtr->u8_channel_Protcol) {
  case SPI:
  u8_Is_Intialized--;
	SPI_De_Init();
  break;
     14c:	08 95       	ret
  case UART:
u8_Is_Intialized--;
     14e:	10 92 7a 00 	sts	0x007A, r1
Uart_De_Init();
     152:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <Uart_De_Init>
u8_frameID=ConfigPtr -> u8_BCM_ID;
return ret;
}
ERROR_STATUS BCM_DeInit (const BCM_ConfigType * ConfigPtr)
{
uint8_t ret=E_OK;
     156:	80 e0       	ldi	r24, 0x00	; 0
	SPI_De_Init();
  break;
  case UART:
u8_Is_Intialized--;
Uart_De_Init();
  break;
     158:	08 95       	ret
  case UARTANDSPI:
  u8_Is_Intialized--;
     15a:	10 92 7a 00 	sts	0x007A, r1
  SPI_De_Init();
     15e:	0e 94 b3 05 	call	0xb66	; 0xb66 <SPI_De_Init>
  Uart_De_Init();
     162:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <Uart_De_Init>
u8_frameID=ConfigPtr -> u8_BCM_ID;
return ret;
}
ERROR_STATUS BCM_DeInit (const BCM_ConfigType * ConfigPtr)
{
uint8_t ret=E_OK;
     166:	80 e0       	ldi	r24, 0x00	; 0
  break;
  case UARTANDSPI:
  u8_Is_Intialized--;
  SPI_De_Init();
  Uart_De_Init();
  break;
     168:	08 95       	ret
  case I2C:
  ret=INVALID_PARM+BCM_MODULE;
  break;
}
}else if(u8_Is_Intialized > 1){
     16a:	22 30       	cpi	r18, 0x02	; 2
     16c:	20 f0       	brcs	.+8      	; 0x176 <BCM_DeInit+0x5a>
ret=MULTIPLE_INIT+BCM_MODULE;
     16e:	88 e3       	ldi	r24, 0x38	; 56
     170:	08 95       	ret
  u8_Is_Intialized--;
  SPI_De_Init();
  Uart_De_Init();
  break;
  case I2C:
  ret=INVALID_PARM+BCM_MODULE;
     172:	8a e3       	ldi	r24, 0x3A	; 58
     174:	08 95       	ret
  break;
}
}else if(u8_Is_Intialized > 1){
ret=MULTIPLE_INIT+BCM_MODULE;
}else{
ret = NOT_INIT+BCM_MODULE;
     176:	86 e3       	ldi	r24, 0x36	; 54
}
return ret;
}
     178:	08 95       	ret

0000017a <BCM_TxDispatcher>:
{
uint8_t ret=E_OK;


return ret;
}
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	08 95       	ret

0000017e <BCM_Send>:



ERROR_STATUS BCM_Send(void)
{
spi_send_first(u8_frameID);
     17e:	80 91 7b 00 	lds	r24, 0x007B
     182:	0e 94 b5 05 	call	0xb6a	; 0xb6a <spi_send_first>
}
     186:	08 95       	ret

00000188 <main>:
 */
 #include "BCM_Send.h"
 volatile uint8_t u8_DATA='T';
int main(void)
{
	gpioPinDirection(GPIOB,BIT3,OUTPUT);
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	68 e0       	ldi	r22, 0x08	; 8
     18c:	4f ef       	ldi	r20, 0xFF	; 255
     18e:	0e 94 26 01 	call	0x24c	; 0x24c <gpioPinDirection>
	Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
     192:	87 e6       	ldi	r24, 0x67	; 103
     194:	60 e0       	ldi	r22, 0x00	; 0
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	23 e0       	ldi	r18, 0x03	; 3
     19a:	00 e0       	ldi	r16, 0x00	; 0
     19c:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <Uart_Init>
	Enable_communication_interrupt();
     1a0:	0e 94 cd 08 	call	0x119a	; 0x119a <Enable_communication_interrupt>
	SPI_Init();
     1a4:	0e 94 74 05 	call	0xae8	; 0xae8 <SPI_Init>
	//Led_On(LED_0);
	//Uart_tryansmitfirstbyte(data_signature);
  //u8_DATA=UDR;
	SPDR=u8_DATA;
     1a8:	80 91 65 00 	lds	r24, 0x0065
     1ac:	8f b9       	out	0x0f, r24	; 15
     1ae:	ff cf       	rjmp	.-2      	; 0x1ae <main+0x26>

000001b0 <gpioPortDirection>:
 * @param value: set the port value and takes the following values
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */

switch (u8_port)	
     1b0:	81 30       	cpi	r24, 0x01	; 1
     1b2:	49 f0       	breq	.+18     	; 0x1c6 <gpioPortDirection+0x16>
     1b4:	81 30       	cpi	r24, 0x01	; 1
     1b6:	28 f0       	brcs	.+10     	; 0x1c2 <gpioPortDirection+0x12>
     1b8:	82 30       	cpi	r24, 0x02	; 2
     1ba:	39 f0       	breq	.+14     	; 0x1ca <gpioPortDirection+0x1a>
     1bc:	83 30       	cpi	r24, 0x03	; 3
     1be:	41 f4       	brne	.+16     	; 0x1d0 <gpioPortDirection+0x20>
     1c0:	06 c0       	rjmp	.+12     	; 0x1ce <gpioPortDirection+0x1e>
{	case GPIOA:
	PORTA_DIR = u8_direction;
     1c2:	6a bb       	out	0x1a, r22	; 26
	break;
     1c4:	08 95       	ret
	case GPIOB:
	PORTB_DIR = u8_direction;
     1c6:	67 bb       	out	0x17, r22	; 23
	break;
     1c8:	08 95       	ret
	case GPIOC:
	PORTC_DIR = u8_direction;
     1ca:	64 bb       	out	0x14, r22	; 20
	break;
     1cc:	08 95       	ret
	case GPIOD:
	PORTD_DIR = u8_direction;
     1ce:	61 bb       	out	0x11, r22	; 17
     1d0:	08 95       	ret

000001d2 <gpioPortWrite>:
}

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	
switch (u8_port)	
     1d2:	81 30       	cpi	r24, 0x01	; 1
     1d4:	49 f0       	breq	.+18     	; 0x1e8 <gpioPortWrite+0x16>
     1d6:	81 30       	cpi	r24, 0x01	; 1
     1d8:	28 f0       	brcs	.+10     	; 0x1e4 <gpioPortWrite+0x12>
     1da:	82 30       	cpi	r24, 0x02	; 2
     1dc:	39 f0       	breq	.+14     	; 0x1ec <gpioPortWrite+0x1a>
     1de:	83 30       	cpi	r24, 0x03	; 3
     1e0:	41 f4       	brne	.+16     	; 0x1f2 <gpioPortWrite+0x20>
     1e2:	06 c0       	rjmp	.+12     	; 0x1f0 <gpioPortWrite+0x1e>
{	case GPIOA:
	PORTA_DATA = u8_value;
     1e4:	6b bb       	out	0x1b, r22	; 27
	break;
     1e6:	08 95       	ret
	case GPIOB:
	PORTB_DATA = u8_value;
     1e8:	68 bb       	out	0x18, r22	; 24
	break;
     1ea:	08 95       	ret
	case GPIOC:
	PORTC_DATA = u8_value;
     1ec:	65 bb       	out	0x15, r22	; 21
	break;
     1ee:	08 95       	ret
	case GPIOD:
	PORTD_DATA = u8_value;
     1f0:	62 bb       	out	0x12, r22	; 18
     1f2:	08 95       	ret

000001f4 <gpioPortToggle>:
	
}
void gpioPortToggle(uint8_t u8_port)
{
	
switch (u8_port)	
     1f4:	81 30       	cpi	r24, 0x01	; 1
     1f6:	59 f0       	breq	.+22     	; 0x20e <gpioPortToggle+0x1a>
     1f8:	81 30       	cpi	r24, 0x01	; 1
     1fa:	28 f0       	brcs	.+10     	; 0x206 <gpioPortToggle+0x12>
     1fc:	82 30       	cpi	r24, 0x02	; 2
     1fe:	59 f0       	breq	.+22     	; 0x216 <gpioPortToggle+0x22>
     200:	83 30       	cpi	r24, 0x03	; 3
     202:	81 f4       	brne	.+32     	; 0x224 <gpioPortToggle+0x30>
     204:	0c c0       	rjmp	.+24     	; 0x21e <gpioPortToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^= HIGH;
     206:	8b b3       	in	r24, 0x1b	; 27
     208:	80 95       	com	r24
     20a:	8b bb       	out	0x1b, r24	; 27
	break;
     20c:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^= HIGH;
     20e:	88 b3       	in	r24, 0x18	; 24
     210:	80 95       	com	r24
     212:	88 bb       	out	0x18, r24	; 24
	break;
     214:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^= HIGH;
     216:	85 b3       	in	r24, 0x15	; 21
     218:	80 95       	com	r24
     21a:	85 bb       	out	0x15, r24	; 21
	break;
     21c:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^= HIGH;
     21e:	82 b3       	in	r24, 0x12	; 18
     220:	80 95       	com	r24
     222:	82 bb       	out	0x12, r24	; 18
     224:	08 95       	ret

00000226 <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
	
switch (u8_port)	
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	49 f0       	breq	.+18     	; 0x23c <gpioPortRead+0x16>
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	28 f0       	brcs	.+10     	; 0x238 <gpioPortRead+0x12>
     22e:	82 30       	cpi	r24, 0x02	; 2
     230:	39 f0       	breq	.+14     	; 0x240 <gpioPortRead+0x1a>
     232:	83 30       	cpi	r24, 0x03	; 3
     234:	49 f4       	brne	.+18     	; 0x248 <gpioPortRead+0x22>
     236:	06 c0       	rjmp	.+12     	; 0x244 <gpioPortRead+0x1e>
{	case GPIOA:
	U8_ret_Port_data=PORTA_DATA & HIGH;
     238:	8b b3       	in	r24, 0x1b	; 27
	break;
     23a:	08 95       	ret
	case GPIOB:
	U8_ret_Port_data=PORTB_DATA & HIGH;
     23c:	88 b3       	in	r24, 0x18	; 24
	break;
     23e:	08 95       	ret
	case GPIOC:
	U8_ret_Port_data=PORTC_DATA & HIGH;
     240:	85 b3       	in	r24, 0x15	; 21
	break;
     242:	08 95       	ret
	case GPIOD:
	U8_ret_Port_data=PORTD_DATA & HIGH;
     244:	82 b3       	in	r24, 0x12	; 18
	break;
     246:	08 95       	ret
	
}

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
     248:	80 e0       	ldi	r24, 0x00	; 0
	break;
	
}

return 	U8_ret_Port_data;
}
     24a:	08 95       	ret

0000024c <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
switch(u8_direction){
     24c:	44 23       	and	r20, r20
     24e:	19 f0       	breq	.+6      	; 0x256 <gpioPinDirection+0xa>
     250:	4f 3f       	cpi	r20, 0xFF	; 255
     252:	d1 f5       	brne	.+116    	; 0x2c8 <gpioPinDirection+0x7c>
     254:	21 c0       	rjmp	.+66     	; 0x298 <gpioPinDirection+0x4c>
case INPUT:
{
switch (u8_port)	
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	69 f0       	breq	.+26     	; 0x274 <gpioPinDirection+0x28>
     25a:	81 30       	cpi	r24, 0x01	; 1
     25c:	28 f0       	brcs	.+10     	; 0x268 <gpioPinDirection+0x1c>
     25e:	82 30       	cpi	r24, 0x02	; 2
     260:	79 f0       	breq	.+30     	; 0x280 <gpioPinDirection+0x34>
     262:	83 30       	cpi	r24, 0x03	; 3
     264:	c9 f4       	brne	.+50     	; 0x298 <gpioPinDirection+0x4c>
     266:	12 c0       	rjmp	.+36     	; 0x28c <gpioPinDirection+0x40>
{	case GPIOA:
	PORTA_DIR &=(~u8_pins);   // 0b01111111
     268:	8a b3       	in	r24, 0x1a	; 26
     26a:	96 2f       	mov	r25, r22
     26c:	90 95       	com	r25
     26e:	89 23       	and	r24, r25
     270:	8a bb       	out	0x1a, r24	; 26
     272:	1b c0       	rjmp	.+54     	; 0x2aa <gpioPinDirection+0x5e>
	break;
	case GPIOB:
	PORTB_DIR &=(~u8_pins);
     274:	87 b3       	in	r24, 0x17	; 23
     276:	96 2f       	mov	r25, r22
     278:	90 95       	com	r25
     27a:	89 23       	and	r24, r25
     27c:	87 bb       	out	0x17, r24	; 23
     27e:	19 c0       	rjmp	.+50     	; 0x2b2 <gpioPinDirection+0x66>
	break;
	case GPIOC:
	PORTC_DIR &=(~u8_pins);
     280:	84 b3       	in	r24, 0x14	; 20
     282:	96 2f       	mov	r25, r22
     284:	90 95       	com	r25
     286:	89 23       	and	r24, r25
     288:	84 bb       	out	0x14, r24	; 20
     28a:	17 c0       	rjmp	.+46     	; 0x2ba <gpioPinDirection+0x6e>
	break;
	case GPIOD:
	PORTD_DIR &=(~u8_pins);
     28c:	81 b3       	in	r24, 0x11	; 17
     28e:	96 2f       	mov	r25, r22
     290:	90 95       	com	r25
     292:	89 23       	and	r24, r25
     294:	81 bb       	out	0x11, r24	; 17
     296:	15 c0       	rjmp	.+42     	; 0x2c2 <gpioPinDirection+0x76>
	break;
	
}
}
case OUTPUT:{
switch (u8_port)	
     298:	81 30       	cpi	r24, 0x01	; 1
     29a:	59 f0       	breq	.+22     	; 0x2b2 <gpioPinDirection+0x66>
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	28 f0       	brcs	.+10     	; 0x2aa <gpioPinDirection+0x5e>
     2a0:	82 30       	cpi	r24, 0x02	; 2
     2a2:	59 f0       	breq	.+22     	; 0x2ba <gpioPinDirection+0x6e>
     2a4:	83 30       	cpi	r24, 0x03	; 3
     2a6:	81 f4       	brne	.+32     	; 0x2c8 <gpioPinDirection+0x7c>
     2a8:	0c c0       	rjmp	.+24     	; 0x2c2 <gpioPinDirection+0x76>
{	case GPIOA:
	PORTA_DIR |=(u8_pins);
     2aa:	8a b3       	in	r24, 0x1a	; 26
     2ac:	68 2b       	or	r22, r24
     2ae:	6a bb       	out	0x1a, r22	; 26
	break;
     2b0:	08 95       	ret
	case GPIOB:
	PORTB_DIR |=(u8_pins);
     2b2:	87 b3       	in	r24, 0x17	; 23
     2b4:	68 2b       	or	r22, r24
     2b6:	67 bb       	out	0x17, r22	; 23
	break;
     2b8:	08 95       	ret
	case GPIOC:
	PORTC_DIR |=(u8_pins);
     2ba:	84 b3       	in	r24, 0x14	; 20
     2bc:	68 2b       	or	r22, r24
     2be:	64 bb       	out	0x14, r22	; 20
	break;
     2c0:	08 95       	ret
	case GPIOD:
	PORTD_DIR |=(u8_pins);
     2c2:	81 b3       	in	r24, 0x11	; 17
     2c4:	68 2b       	or	r22, r24
     2c6:	61 bb       	out	0x11, r22	; 17
     2c8:	08 95       	ret

000002ca <gpioPinWrite>:
	
	
}

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{switch(u8_value){
     2ca:	44 23       	and	r20, r20
     2cc:	19 f0       	breq	.+6      	; 0x2d4 <gpioPinWrite+0xa>
     2ce:	4f 3f       	cpi	r20, 0xFF	; 255
     2d0:	b1 f5       	brne	.+108    	; 0x33e <gpioPinWrite+0x74>
     2d2:	1d c0       	rjmp	.+58     	; 0x30e <gpioPinWrite+0x44>
case LOW:
{
switch (u8_port)	
     2d4:	81 30       	cpi	r24, 0x01	; 1
     2d6:	61 f0       	breq	.+24     	; 0x2f0 <gpioPinWrite+0x26>
     2d8:	81 30       	cpi	r24, 0x01	; 1
     2da:	28 f0       	brcs	.+10     	; 0x2e6 <gpioPinWrite+0x1c>
     2dc:	82 30       	cpi	r24, 0x02	; 2
     2de:	69 f0       	breq	.+26     	; 0x2fa <gpioPinWrite+0x30>
     2e0:	83 30       	cpi	r24, 0x03	; 3
     2e2:	69 f5       	brne	.+90     	; 0x33e <gpioPinWrite+0x74>
     2e4:	0f c0       	rjmp	.+30     	; 0x304 <gpioPinWrite+0x3a>
{	case GPIOA:
	PORTA_DATA &= ~(u8_pins);   // 0b01111111
     2e6:	8b b3       	in	r24, 0x1b	; 27
     2e8:	60 95       	com	r22
     2ea:	68 23       	and	r22, r24
     2ec:	6b bb       	out	0x1b, r22	; 27
	break;
     2ee:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(u8_pins);
     2f0:	88 b3       	in	r24, 0x18	; 24
     2f2:	60 95       	com	r22
     2f4:	68 23       	and	r22, r24
     2f6:	68 bb       	out	0x18, r22	; 24
	break;
     2f8:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(u8_pins);
     2fa:	85 b3       	in	r24, 0x15	; 21
     2fc:	60 95       	com	r22
     2fe:	68 23       	and	r22, r24
     300:	65 bb       	out	0x15, r22	; 21
	break;
     302:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(u8_pins);
     304:	82 b3       	in	r24, 0x12	; 18
     306:	60 95       	com	r22
     308:	68 23       	and	r22, r24
     30a:	62 bb       	out	0x12, r22	; 18
	break;
     30c:	08 95       	ret
	
}
break;
}
case HIGH:{
switch (u8_port)	
     30e:	81 30       	cpi	r24, 0x01	; 1
     310:	59 f0       	breq	.+22     	; 0x328 <gpioPinWrite+0x5e>
     312:	81 30       	cpi	r24, 0x01	; 1
     314:	28 f0       	brcs	.+10     	; 0x320 <gpioPinWrite+0x56>
     316:	82 30       	cpi	r24, 0x02	; 2
     318:	59 f0       	breq	.+22     	; 0x330 <gpioPinWrite+0x66>
     31a:	83 30       	cpi	r24, 0x03	; 3
     31c:	81 f4       	brne	.+32     	; 0x33e <gpioPinWrite+0x74>
     31e:	0c c0       	rjmp	.+24     	; 0x338 <gpioPinWrite+0x6e>
{	case GPIOA:
	PORTA_DATA |=(u8_pins);
     320:	8b b3       	in	r24, 0x1b	; 27
     322:	68 2b       	or	r22, r24
     324:	6b bb       	out	0x1b, r22	; 27
	break;
     326:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(u8_pins);
     328:	88 b3       	in	r24, 0x18	; 24
     32a:	68 2b       	or	r22, r24
     32c:	68 bb       	out	0x18, r22	; 24
	break;
     32e:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(u8_pins);
     330:	85 b3       	in	r24, 0x15	; 21
     332:	68 2b       	or	r22, r24
     334:	65 bb       	out	0x15, r22	; 21
	break;
     336:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(u8_pins);
     338:	82 b3       	in	r24, 0x12	; 18
     33a:	68 2b       	or	r22, r24
     33c:	62 bb       	out	0x12, r22	; 18
     33e:	08 95       	ret

00000340 <gpioPinToggle>:
}

}
void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
switch (u8_port)	
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	59 f0       	breq	.+22     	; 0x35a <gpioPinToggle+0x1a>
     344:	81 30       	cpi	r24, 0x01	; 1
     346:	28 f0       	brcs	.+10     	; 0x352 <gpioPinToggle+0x12>
     348:	82 30       	cpi	r24, 0x02	; 2
     34a:	59 f0       	breq	.+22     	; 0x362 <gpioPinToggle+0x22>
     34c:	83 30       	cpi	r24, 0x03	; 3
     34e:	81 f4       	brne	.+32     	; 0x370 <gpioPinToggle+0x30>
     350:	0c c0       	rjmp	.+24     	; 0x36a <gpioPinToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^=(u8_pins);
     352:	8b b3       	in	r24, 0x1b	; 27
     354:	68 27       	eor	r22, r24
     356:	6b bb       	out	0x1b, r22	; 27
	break;
     358:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^=(u8_pins);
     35a:	88 b3       	in	r24, 0x18	; 24
     35c:	68 27       	eor	r22, r24
     35e:	68 bb       	out	0x18, r22	; 24
	break;
     360:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^=(u8_pins);
     362:	85 b3       	in	r24, 0x15	; 21
     364:	68 27       	eor	r22, r24
     366:	65 bb       	out	0x15, r22	; 21
	break;
     368:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^=(u8_pins);
     36a:	82 b3       	in	r24, 0x12	; 18
     36c:	68 27       	eor	r22, r24
     36e:	62 bb       	out	0x12, r22	; 18
     370:	08 95       	ret

00000372 <gpioPinRead>:
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
switch (u8_port)	
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	51 f0       	breq	.+20     	; 0x38a <gpioPinRead+0x18>
     376:	81 30       	cpi	r24, 0x01	; 1
     378:	28 f0       	brcs	.+10     	; 0x384 <gpioPinRead+0x12>
     37a:	82 30       	cpi	r24, 0x02	; 2
     37c:	49 f0       	breq	.+18     	; 0x390 <gpioPinRead+0x1e>
     37e:	83 30       	cpi	r24, 0x03	; 3
     380:	69 f4       	brne	.+26     	; 0x39c <gpioPinRead+0x2a>
     382:	09 c0       	rjmp	.+18     	; 0x396 <gpioPinRead+0x24>
{	case GPIOA:
	U8_ret_BIT_data=(PORTA_PIN & u8_pin);
     384:	89 b3       	in	r24, 0x19	; 25
     386:	68 23       	and	r22, r24
	break;
     388:	0a c0       	rjmp	.+20     	; 0x39e <gpioPinRead+0x2c>
	case GPIOB:
	U8_ret_BIT_data=(PORTB_PIN & u8_pin);
     38a:	86 b3       	in	r24, 0x16	; 22
     38c:	68 23       	and	r22, r24
	break;
     38e:	07 c0       	rjmp	.+14     	; 0x39e <gpioPinRead+0x2c>
	case GPIOC:
	U8_ret_BIT_data=(PORTC_PIN & u8_pin);
     390:	83 b3       	in	r24, 0x13	; 19
     392:	68 23       	and	r22, r24
	break;
     394:	04 c0       	rjmp	.+8      	; 0x39e <gpioPinRead+0x2c>
	case GPIOD:
	U8_ret_BIT_data=(PORTD_PIN & u8_pin);
     396:	80 b3       	in	r24, 0x10	; 16
     398:	68 23       	and	r22, r24
	break;
     39a:	01 c0       	rjmp	.+2      	; 0x39e <gpioPinRead+0x2c>
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
     39c:	60 e0       	ldi	r22, 0x00	; 0
}
	
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	66 23       	and	r22, r22
     3a2:	09 f4       	brne	.+2      	; 0x3a6 <gpioPinRead+0x34>
     3a4:	80 e0       	ldi	r24, 0x00	; 0
if(U8_ret_BIT_data > 0)
{
	U8_ret_BIT_data = 1;
}
return U8_ret_BIT_data;
     3a6:	08 95       	ret

000003a8 <G_interrupt_Enable>:
ptr_to_Fun SPM_RDY;

void G_interrupt_Enable(void)
{
//	sei();
 SREG |=(0x80);
     3a8:	8f b7       	in	r24, 0x3f	; 63
     3aa:	80 68       	ori	r24, 0x80	; 128
     3ac:	8f bf       	out	0x3f, r24	; 63
}
     3ae:	08 95       	ret

000003b0 <EX_interrupt_enable2>:
void EX_interrupt_enable2(void)
{
gpioPinDirection(GPIOB,BIT2,LOW);
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	64 e0       	ldi	r22, 0x04	; 4
     3b4:	40 e0       	ldi	r20, 0x00	; 0
     3b6:	0e 94 26 01 	call	0x24c	; 0x24c <gpioPinDirection>
SET_BIT(GICR,INT2);
     3ba:	8b b7       	in	r24, 0x3b	; 59
     3bc:	80 62       	ori	r24, 0x20	; 32
     3be:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCSR,6);
     3c0:	84 b7       	in	r24, 0x34	; 52
     3c2:	80 64       	ori	r24, 0x40	; 64
     3c4:	84 bf       	out	0x34, r24	; 52
}
     3c6:	08 95       	ret

000003c8 <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     3c8:	8f b7       	in	r24, 0x3f	; 63
     3ca:	8f 77       	andi	r24, 0x7F	; 127
     3cc:	8f bf       	out	0x3f, r24	; 63
}
     3ce:	08 95       	ret

000003d0 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	2f 93       	push	r18
     3dc:	3f 93       	push	r19
     3de:	4f 93       	push	r20
     3e0:	5f 93       	push	r21
     3e2:	6f 93       	push	r22
     3e4:	7f 93       	push	r23
     3e6:	8f 93       	push	r24
     3e8:	9f 93       	push	r25
     3ea:	af 93       	push	r26
     3ec:	bf 93       	push	r27
     3ee:	ef 93       	push	r30
     3f0:	ff 93       	push	r31
  INT0_external_interrupt();
     3f2:	e0 91 98 00 	lds	r30, 0x0098
     3f6:	f0 91 99 00 	lds	r31, 0x0099
     3fa:	09 95       	icall
}
     3fc:	ff 91       	pop	r31
     3fe:	ef 91       	pop	r30
     400:	bf 91       	pop	r27
     402:	af 91       	pop	r26
     404:	9f 91       	pop	r25
     406:	8f 91       	pop	r24
     408:	7f 91       	pop	r23
     40a:	6f 91       	pop	r22
     40c:	5f 91       	pop	r21
     40e:	4f 91       	pop	r20
     410:	3f 91       	pop	r19
     412:	2f 91       	pop	r18
     414:	0f 90       	pop	r0
     416:	0f be       	out	0x3f, r0	; 63
     418:	0f 90       	pop	r0
     41a:	1f 90       	pop	r1
     41c:	18 95       	reti

0000041e <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
     41e:	1f 92       	push	r1
     420:	0f 92       	push	r0
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	0f 92       	push	r0
     426:	11 24       	eor	r1, r1
     428:	2f 93       	push	r18
     42a:	3f 93       	push	r19
     42c:	4f 93       	push	r20
     42e:	5f 93       	push	r21
     430:	6f 93       	push	r22
     432:	7f 93       	push	r23
     434:	8f 93       	push	r24
     436:	9f 93       	push	r25
     438:	af 93       	push	r26
     43a:	bf 93       	push	r27
     43c:	ef 93       	push	r30
     43e:	ff 93       	push	r31
  INT1_external_interrupt();
     440:	e0 91 9e 00 	lds	r30, 0x009E
     444:	f0 91 9f 00 	lds	r31, 0x009F
     448:	09 95       	icall
}
     44a:	ff 91       	pop	r31
     44c:	ef 91       	pop	r30
     44e:	bf 91       	pop	r27
     450:	af 91       	pop	r26
     452:	9f 91       	pop	r25
     454:	8f 91       	pop	r24
     456:	7f 91       	pop	r23
     458:	6f 91       	pop	r22
     45a:	5f 91       	pop	r21
     45c:	4f 91       	pop	r20
     45e:	3f 91       	pop	r19
     460:	2f 91       	pop	r18
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     46c:	1f 92       	push	r1
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	0f 92       	push	r0
     474:	11 24       	eor	r1, r1
     476:	2f 93       	push	r18
     478:	3f 93       	push	r19
     47a:	4f 93       	push	r20
     47c:	5f 93       	push	r21
     47e:	6f 93       	push	r22
     480:	7f 93       	push	r23
     482:	8f 93       	push	r24
     484:	9f 93       	push	r25
     486:	af 93       	push	r26
     488:	bf 93       	push	r27
     48a:	ef 93       	push	r30
     48c:	ff 93       	push	r31
  INT2_external_interrupt();
     48e:	e0 91 8e 00 	lds	r30, 0x008E
     492:	f0 91 8f 00 	lds	r31, 0x008F
     496:	09 95       	icall
}
     498:	ff 91       	pop	r31
     49a:	ef 91       	pop	r30
     49c:	bf 91       	pop	r27
     49e:	af 91       	pop	r26
     4a0:	9f 91       	pop	r25
     4a2:	8f 91       	pop	r24
     4a4:	7f 91       	pop	r23
     4a6:	6f 91       	pop	r22
     4a8:	5f 91       	pop	r21
     4aa:	4f 91       	pop	r20
     4ac:	3f 91       	pop	r19
     4ae:	2f 91       	pop	r18
     4b0:	0f 90       	pop	r0
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	0f 90       	pop	r0
     4b6:	1f 90       	pop	r1
     4b8:	18 95       	reti

000004ba <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     4ba:	1f 92       	push	r1
     4bc:	0f 92       	push	r0
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	0f 92       	push	r0
     4c2:	11 24       	eor	r1, r1
     4c4:	2f 93       	push	r18
     4c6:	3f 93       	push	r19
     4c8:	4f 93       	push	r20
     4ca:	5f 93       	push	r21
     4cc:	6f 93       	push	r22
     4ce:	7f 93       	push	r23
     4d0:	8f 93       	push	r24
     4d2:	9f 93       	push	r25
     4d4:	af 93       	push	r26
     4d6:	bf 93       	push	r27
     4d8:	ef 93       	push	r30
     4da:	ff 93       	push	r31
TIMER2COMP();
     4dc:	e0 91 6e 00 	lds	r30, 0x006E
     4e0:	f0 91 6f 00 	lds	r31, 0x006F
     4e4:	09 95       	icall
}
     4e6:	ff 91       	pop	r31
     4e8:	ef 91       	pop	r30
     4ea:	bf 91       	pop	r27
     4ec:	af 91       	pop	r26
     4ee:	9f 91       	pop	r25
     4f0:	8f 91       	pop	r24
     4f2:	7f 91       	pop	r23
     4f4:	6f 91       	pop	r22
     4f6:	5f 91       	pop	r21
     4f8:	4f 91       	pop	r20
     4fa:	3f 91       	pop	r19
     4fc:	2f 91       	pop	r18
     4fe:	0f 90       	pop	r0
     500:	0f be       	out	0x3f, r0	; 63
     502:	0f 90       	pop	r0
     504:	1f 90       	pop	r1
     506:	18 95       	reti

00000508 <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     508:	1f 92       	push	r1
     50a:	0f 92       	push	r0
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	0f 92       	push	r0
     510:	11 24       	eor	r1, r1
     512:	2f 93       	push	r18
     514:	3f 93       	push	r19
     516:	4f 93       	push	r20
     518:	5f 93       	push	r21
     51a:	6f 93       	push	r22
     51c:	7f 93       	push	r23
     51e:	8f 93       	push	r24
     520:	9f 93       	push	r25
     522:	af 93       	push	r26
     524:	bf 93       	push	r27
     526:	ef 93       	push	r30
     528:	ff 93       	push	r31
  TIMER2OVF();
     52a:	e0 91 6c 00 	lds	r30, 0x006C
     52e:	f0 91 6d 00 	lds	r31, 0x006D
     532:	09 95       	icall
}
     534:	ff 91       	pop	r31
     536:	ef 91       	pop	r30
     538:	bf 91       	pop	r27
     53a:	af 91       	pop	r26
     53c:	9f 91       	pop	r25
     53e:	8f 91       	pop	r24
     540:	7f 91       	pop	r23
     542:	6f 91       	pop	r22
     544:	5f 91       	pop	r21
     546:	4f 91       	pop	r20
     548:	3f 91       	pop	r19
     54a:	2f 91       	pop	r18
     54c:	0f 90       	pop	r0
     54e:	0f be       	out	0x3f, r0	; 63
     550:	0f 90       	pop	r0
     552:	1f 90       	pop	r1
     554:	18 95       	reti

00000556 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     556:	1f 92       	push	r1
     558:	0f 92       	push	r0
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	0f 92       	push	r0
     55e:	11 24       	eor	r1, r1
     560:	2f 93       	push	r18
     562:	3f 93       	push	r19
     564:	4f 93       	push	r20
     566:	5f 93       	push	r21
     568:	6f 93       	push	r22
     56a:	7f 93       	push	r23
     56c:	8f 93       	push	r24
     56e:	9f 93       	push	r25
     570:	af 93       	push	r26
     572:	bf 93       	push	r27
     574:	ef 93       	push	r30
     576:	ff 93       	push	r31
  TIMER1CAPT();
     578:	e0 91 a0 00 	lds	r30, 0x00A0
     57c:	f0 91 a1 00 	lds	r31, 0x00A1
     580:	09 95       	icall
}
     582:	ff 91       	pop	r31
     584:	ef 91       	pop	r30
     586:	bf 91       	pop	r27
     588:	af 91       	pop	r26
     58a:	9f 91       	pop	r25
     58c:	8f 91       	pop	r24
     58e:	7f 91       	pop	r23
     590:	6f 91       	pop	r22
     592:	5f 91       	pop	r21
     594:	4f 91       	pop	r20
     596:	3f 91       	pop	r19
     598:	2f 91       	pop	r18
     59a:	0f 90       	pop	r0
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	0f 90       	pop	r0
     5a0:	1f 90       	pop	r1
     5a2:	18 95       	reti

000005a4 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     5a4:	1f 92       	push	r1
     5a6:	0f 92       	push	r0
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	0f 92       	push	r0
     5ac:	11 24       	eor	r1, r1
     5ae:	2f 93       	push	r18
     5b0:	3f 93       	push	r19
     5b2:	4f 93       	push	r20
     5b4:	5f 93       	push	r21
     5b6:	6f 93       	push	r22
     5b8:	7f 93       	push	r23
     5ba:	8f 93       	push	r24
     5bc:	9f 93       	push	r25
     5be:	af 93       	push	r26
     5c0:	bf 93       	push	r27
     5c2:	ef 93       	push	r30
     5c4:	ff 93       	push	r31
TIMER1COMPA();
     5c6:	e0 91 8c 00 	lds	r30, 0x008C
     5ca:	f0 91 8d 00 	lds	r31, 0x008D
     5ce:	09 95       	icall
}
     5d0:	ff 91       	pop	r31
     5d2:	ef 91       	pop	r30
     5d4:	bf 91       	pop	r27
     5d6:	af 91       	pop	r26
     5d8:	9f 91       	pop	r25
     5da:	8f 91       	pop	r24
     5dc:	7f 91       	pop	r23
     5de:	6f 91       	pop	r22
     5e0:	5f 91       	pop	r21
     5e2:	4f 91       	pop	r20
     5e4:	3f 91       	pop	r19
     5e6:	2f 91       	pop	r18
     5e8:	0f 90       	pop	r0
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	0f 90       	pop	r0
     5ee:	1f 90       	pop	r1
     5f0:	18 95       	reti

000005f2 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
     5f2:	1f 92       	push	r1
     5f4:	0f 92       	push	r0
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	0f 92       	push	r0
     5fa:	11 24       	eor	r1, r1
     5fc:	2f 93       	push	r18
     5fe:	3f 93       	push	r19
     600:	4f 93       	push	r20
     602:	5f 93       	push	r21
     604:	6f 93       	push	r22
     606:	7f 93       	push	r23
     608:	8f 93       	push	r24
     60a:	9f 93       	push	r25
     60c:	af 93       	push	r26
     60e:	bf 93       	push	r27
     610:	ef 93       	push	r30
     612:	ff 93       	push	r31
  TIMER1COMPB();
     614:	e0 91 8a 00 	lds	r30, 0x008A
     618:	f0 91 8b 00 	lds	r31, 0x008B
     61c:	09 95       	icall
}
     61e:	ff 91       	pop	r31
     620:	ef 91       	pop	r30
     622:	bf 91       	pop	r27
     624:	af 91       	pop	r26
     626:	9f 91       	pop	r25
     628:	8f 91       	pop	r24
     62a:	7f 91       	pop	r23
     62c:	6f 91       	pop	r22
     62e:	5f 91       	pop	r21
     630:	4f 91       	pop	r20
     632:	3f 91       	pop	r19
     634:	2f 91       	pop	r18
     636:	0f 90       	pop	r0
     638:	0f be       	out	0x3f, r0	; 63
     63a:	0f 90       	pop	r0
     63c:	1f 90       	pop	r1
     63e:	18 95       	reti

00000640 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     640:	1f 92       	push	r1
     642:	0f 92       	push	r0
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	0f 92       	push	r0
     648:	11 24       	eor	r1, r1
     64a:	2f 93       	push	r18
     64c:	3f 93       	push	r19
     64e:	4f 93       	push	r20
     650:	5f 93       	push	r21
     652:	6f 93       	push	r22
     654:	7f 93       	push	r23
     656:	8f 93       	push	r24
     658:	9f 93       	push	r25
     65a:	af 93       	push	r26
     65c:	bf 93       	push	r27
     65e:	ef 93       	push	r30
     660:	ff 93       	push	r31
  TIMER1OVF();
     662:	e0 91 a2 00 	lds	r30, 0x00A2
     666:	f0 91 a3 00 	lds	r31, 0x00A3
     66a:	09 95       	icall
}
     66c:	ff 91       	pop	r31
     66e:	ef 91       	pop	r30
     670:	bf 91       	pop	r27
     672:	af 91       	pop	r26
     674:	9f 91       	pop	r25
     676:	8f 91       	pop	r24
     678:	7f 91       	pop	r23
     67a:	6f 91       	pop	r22
     67c:	5f 91       	pop	r21
     67e:	4f 91       	pop	r20
     680:	3f 91       	pop	r19
     682:	2f 91       	pop	r18
     684:	0f 90       	pop	r0
     686:	0f be       	out	0x3f, r0	; 63
     688:	0f 90       	pop	r0
     68a:	1f 90       	pop	r1
     68c:	18 95       	reti

0000068e <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     68e:	1f 92       	push	r1
     690:	0f 92       	push	r0
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	0f 92       	push	r0
     696:	11 24       	eor	r1, r1
     698:	2f 93       	push	r18
     69a:	3f 93       	push	r19
     69c:	4f 93       	push	r20
     69e:	5f 93       	push	r21
     6a0:	6f 93       	push	r22
     6a2:	7f 93       	push	r23
     6a4:	8f 93       	push	r24
     6a6:	9f 93       	push	r25
     6a8:	af 93       	push	r26
     6aa:	bf 93       	push	r27
     6ac:	ef 93       	push	r30
     6ae:	ff 93       	push	r31

  TIMER0COMP();
     6b0:	e0 91 6a 00 	lds	r30, 0x006A
     6b4:	f0 91 6b 00 	lds	r31, 0x006B
     6b8:	09 95       	icall
}
     6ba:	ff 91       	pop	r31
     6bc:	ef 91       	pop	r30
     6be:	bf 91       	pop	r27
     6c0:	af 91       	pop	r26
     6c2:	9f 91       	pop	r25
     6c4:	8f 91       	pop	r24
     6c6:	7f 91       	pop	r23
     6c8:	6f 91       	pop	r22
     6ca:	5f 91       	pop	r21
     6cc:	4f 91       	pop	r20
     6ce:	3f 91       	pop	r19
     6d0:	2f 91       	pop	r18
     6d2:	0f 90       	pop	r0
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	0f 90       	pop	r0
     6d8:	1f 90       	pop	r1
     6da:	18 95       	reti

000006dc <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     6dc:	1f 92       	push	r1
     6de:	0f 92       	push	r0
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	0f 92       	push	r0
     6e4:	11 24       	eor	r1, r1
     6e6:	2f 93       	push	r18
     6e8:	3f 93       	push	r19
     6ea:	4f 93       	push	r20
     6ec:	5f 93       	push	r21
     6ee:	6f 93       	push	r22
     6f0:	7f 93       	push	r23
     6f2:	8f 93       	push	r24
     6f4:	9f 93       	push	r25
     6f6:	af 93       	push	r26
     6f8:	bf 93       	push	r27
     6fa:	ef 93       	push	r30
     6fc:	ff 93       	push	r31

  TIMER0OVF_INT();
     6fe:	e0 91 90 00 	lds	r30, 0x0090
     702:	f0 91 91 00 	lds	r31, 0x0091
     706:	09 95       	icall
}
     708:	ff 91       	pop	r31
     70a:	ef 91       	pop	r30
     70c:	bf 91       	pop	r27
     70e:	af 91       	pop	r26
     710:	9f 91       	pop	r25
     712:	8f 91       	pop	r24
     714:	7f 91       	pop	r23
     716:	6f 91       	pop	r22
     718:	5f 91       	pop	r21
     71a:	4f 91       	pop	r20
     71c:	3f 91       	pop	r19
     71e:	2f 91       	pop	r18
     720:	0f 90       	pop	r0
     722:	0f be       	out	0x3f, r0	; 63
     724:	0f 90       	pop	r0
     726:	1f 90       	pop	r1
     728:	18 95       	reti

0000072a <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
     72a:	1f 92       	push	r1
     72c:	0f 92       	push	r0
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	0f 92       	push	r0
     732:	11 24       	eor	r1, r1
     734:	2f 93       	push	r18
     736:	3f 93       	push	r19
     738:	4f 93       	push	r20
     73a:	5f 93       	push	r21
     73c:	6f 93       	push	r22
     73e:	7f 93       	push	r23
     740:	8f 93       	push	r24
     742:	9f 93       	push	r25
     744:	af 93       	push	r26
     746:	bf 93       	push	r27
     748:	ef 93       	push	r30
     74a:	ff 93       	push	r31
  SPI_STC();
     74c:	e0 91 68 00 	lds	r30, 0x0068
     750:	f0 91 69 00 	lds	r31, 0x0069
     754:	09 95       	icall
}
     756:	ff 91       	pop	r31
     758:	ef 91       	pop	r30
     75a:	bf 91       	pop	r27
     75c:	af 91       	pop	r26
     75e:	9f 91       	pop	r25
     760:	8f 91       	pop	r24
     762:	7f 91       	pop	r23
     764:	6f 91       	pop	r22
     766:	5f 91       	pop	r21
     768:	4f 91       	pop	r20
     76a:	3f 91       	pop	r19
     76c:	2f 91       	pop	r18
     76e:	0f 90       	pop	r0
     770:	0f be       	out	0x3f, r0	; 63
     772:	0f 90       	pop	r0
     774:	1f 90       	pop	r1
     776:	18 95       	reti

00000778 <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     778:	1f 92       	push	r1
     77a:	0f 92       	push	r0
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	0f 92       	push	r0
     780:	11 24       	eor	r1, r1
     782:	2f 93       	push	r18
     784:	3f 93       	push	r19
     786:	4f 93       	push	r20
     788:	5f 93       	push	r21
     78a:	6f 93       	push	r22
     78c:	7f 93       	push	r23
     78e:	8f 93       	push	r24
     790:	9f 93       	push	r25
     792:	af 93       	push	r26
     794:	bf 93       	push	r27
     796:	ef 93       	push	r30
     798:	ff 93       	push	r31
  USART_RXC();
     79a:	e0 91 66 00 	lds	r30, 0x0066
     79e:	f0 91 67 00 	lds	r31, 0x0067
     7a2:	09 95       	icall
}
     7a4:	ff 91       	pop	r31
     7a6:	ef 91       	pop	r30
     7a8:	bf 91       	pop	r27
     7aa:	af 91       	pop	r26
     7ac:	9f 91       	pop	r25
     7ae:	8f 91       	pop	r24
     7b0:	7f 91       	pop	r23
     7b2:	6f 91       	pop	r22
     7b4:	5f 91       	pop	r21
     7b6:	4f 91       	pop	r20
     7b8:	3f 91       	pop	r19
     7ba:	2f 91       	pop	r18
     7bc:	0f 90       	pop	r0
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	0f 90       	pop	r0
     7c2:	1f 90       	pop	r1
     7c4:	18 95       	reti

000007c6 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     7c6:	1f 92       	push	r1
     7c8:	0f 92       	push	r0
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	0f 92       	push	r0
     7ce:	11 24       	eor	r1, r1
     7d0:	2f 93       	push	r18
     7d2:	3f 93       	push	r19
     7d4:	4f 93       	push	r20
     7d6:	5f 93       	push	r21
     7d8:	6f 93       	push	r22
     7da:	7f 93       	push	r23
     7dc:	8f 93       	push	r24
     7de:	9f 93       	push	r25
     7e0:	af 93       	push	r26
     7e2:	bf 93       	push	r27
     7e4:	ef 93       	push	r30
     7e6:	ff 93       	push	r31
  USART_UDRE();
     7e8:	e0 91 9c 00 	lds	r30, 0x009C
     7ec:	f0 91 9d 00 	lds	r31, 0x009D
     7f0:	09 95       	icall
}
     7f2:	ff 91       	pop	r31
     7f4:	ef 91       	pop	r30
     7f6:	bf 91       	pop	r27
     7f8:	af 91       	pop	r26
     7fa:	9f 91       	pop	r25
     7fc:	8f 91       	pop	r24
     7fe:	7f 91       	pop	r23
     800:	6f 91       	pop	r22
     802:	5f 91       	pop	r21
     804:	4f 91       	pop	r20
     806:	3f 91       	pop	r19
     808:	2f 91       	pop	r18
     80a:	0f 90       	pop	r0
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	0f 90       	pop	r0
     810:	1f 90       	pop	r1
     812:	18 95       	reti

00000814 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     814:	1f 92       	push	r1
     816:	0f 92       	push	r0
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	0f 92       	push	r0
     81c:	11 24       	eor	r1, r1
     81e:	2f 93       	push	r18
     820:	3f 93       	push	r19
     822:	4f 93       	push	r20
     824:	5f 93       	push	r21
     826:	6f 93       	push	r22
     828:	7f 93       	push	r23
     82a:	8f 93       	push	r24
     82c:	9f 93       	push	r25
     82e:	af 93       	push	r26
     830:	bf 93       	push	r27
     832:	ef 93       	push	r30
     834:	ff 93       	push	r31
  USART_TXC();
     836:	e0 91 9a 00 	lds	r30, 0x009A
     83a:	f0 91 9b 00 	lds	r31, 0x009B
     83e:	09 95       	icall
}
     840:	ff 91       	pop	r31
     842:	ef 91       	pop	r30
     844:	bf 91       	pop	r27
     846:	af 91       	pop	r26
     848:	9f 91       	pop	r25
     84a:	8f 91       	pop	r24
     84c:	7f 91       	pop	r23
     84e:	6f 91       	pop	r22
     850:	5f 91       	pop	r21
     852:	4f 91       	pop	r20
     854:	3f 91       	pop	r19
     856:	2f 91       	pop	r18
     858:	0f 90       	pop	r0
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	0f 90       	pop	r0
     85e:	1f 90       	pop	r1
     860:	18 95       	reti

00000862 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     862:	1f 92       	push	r1
     864:	0f 92       	push	r0
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	0f 92       	push	r0
     86a:	11 24       	eor	r1, r1
     86c:	2f 93       	push	r18
     86e:	3f 93       	push	r19
     870:	4f 93       	push	r20
     872:	5f 93       	push	r21
     874:	6f 93       	push	r22
     876:	7f 93       	push	r23
     878:	8f 93       	push	r24
     87a:	9f 93       	push	r25
     87c:	af 93       	push	r26
     87e:	bf 93       	push	r27
     880:	ef 93       	push	r30
     882:	ff 93       	push	r31
  ADC_INT();
     884:	e0 91 94 00 	lds	r30, 0x0094
     888:	f0 91 95 00 	lds	r31, 0x0095
     88c:	09 95       	icall
}
     88e:	ff 91       	pop	r31
     890:	ef 91       	pop	r30
     892:	bf 91       	pop	r27
     894:	af 91       	pop	r26
     896:	9f 91       	pop	r25
     898:	8f 91       	pop	r24
     89a:	7f 91       	pop	r23
     89c:	6f 91       	pop	r22
     89e:	5f 91       	pop	r21
     8a0:	4f 91       	pop	r20
     8a2:	3f 91       	pop	r19
     8a4:	2f 91       	pop	r18
     8a6:	0f 90       	pop	r0
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	0f 90       	pop	r0
     8ac:	1f 90       	pop	r1
     8ae:	18 95       	reti

000008b0 <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
     8b0:	1f 92       	push	r1
     8b2:	0f 92       	push	r0
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	0f 92       	push	r0
     8b8:	11 24       	eor	r1, r1
     8ba:	2f 93       	push	r18
     8bc:	3f 93       	push	r19
     8be:	4f 93       	push	r20
     8c0:	5f 93       	push	r21
     8c2:	6f 93       	push	r22
     8c4:	7f 93       	push	r23
     8c6:	8f 93       	push	r24
     8c8:	9f 93       	push	r25
     8ca:	af 93       	push	r26
     8cc:	bf 93       	push	r27
     8ce:	ef 93       	push	r30
     8d0:	ff 93       	push	r31
  EE_RDY();
     8d2:	e0 91 96 00 	lds	r30, 0x0096
     8d6:	f0 91 97 00 	lds	r31, 0x0097
     8da:	09 95       	icall
}
     8dc:	ff 91       	pop	r31
     8de:	ef 91       	pop	r30
     8e0:	bf 91       	pop	r27
     8e2:	af 91       	pop	r26
     8e4:	9f 91       	pop	r25
     8e6:	8f 91       	pop	r24
     8e8:	7f 91       	pop	r23
     8ea:	6f 91       	pop	r22
     8ec:	5f 91       	pop	r21
     8ee:	4f 91       	pop	r20
     8f0:	3f 91       	pop	r19
     8f2:	2f 91       	pop	r18
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
     8fe:	1f 92       	push	r1
     900:	0f 92       	push	r0
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	0f 92       	push	r0
     906:	11 24       	eor	r1, r1
     908:	2f 93       	push	r18
     90a:	3f 93       	push	r19
     90c:	4f 93       	push	r20
     90e:	5f 93       	push	r21
     910:	6f 93       	push	r22
     912:	7f 93       	push	r23
     914:	8f 93       	push	r24
     916:	9f 93       	push	r25
     918:	af 93       	push	r26
     91a:	bf 93       	push	r27
     91c:	ef 93       	push	r30
     91e:	ff 93       	push	r31
  ANA_COMP();
     920:	e0 91 92 00 	lds	r30, 0x0092
     924:	f0 91 93 00 	lds	r31, 0x0093
     928:	09 95       	icall
}
     92a:	ff 91       	pop	r31
     92c:	ef 91       	pop	r30
     92e:	bf 91       	pop	r27
     930:	af 91       	pop	r26
     932:	9f 91       	pop	r25
     934:	8f 91       	pop	r24
     936:	7f 91       	pop	r23
     938:	6f 91       	pop	r22
     93a:	5f 91       	pop	r21
     93c:	4f 91       	pop	r20
     93e:	3f 91       	pop	r19
     940:	2f 91       	pop	r18
     942:	0f 90       	pop	r0
     944:	0f be       	out	0x3f, r0	; 63
     946:	0f 90       	pop	r0
     948:	1f 90       	pop	r1
     94a:	18 95       	reti

0000094c <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
     94c:	1f 92       	push	r1
     94e:	0f 92       	push	r0
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	0f 92       	push	r0
     954:	11 24       	eor	r1, r1
     956:	2f 93       	push	r18
     958:	3f 93       	push	r19
     95a:	4f 93       	push	r20
     95c:	5f 93       	push	r21
     95e:	6f 93       	push	r22
     960:	7f 93       	push	r23
     962:	8f 93       	push	r24
     964:	9f 93       	push	r25
     966:	af 93       	push	r26
     968:	bf 93       	push	r27
     96a:	ef 93       	push	r30
     96c:	ff 93       	push	r31
  TWI_I2C();
     96e:	e0 91 86 00 	lds	r30, 0x0086
     972:	f0 91 87 00 	lds	r31, 0x0087
     976:	09 95       	icall
}
     978:	ff 91       	pop	r31
     97a:	ef 91       	pop	r30
     97c:	bf 91       	pop	r27
     97e:	af 91       	pop	r26
     980:	9f 91       	pop	r25
     982:	8f 91       	pop	r24
     984:	7f 91       	pop	r23
     986:	6f 91       	pop	r22
     988:	5f 91       	pop	r21
     98a:	4f 91       	pop	r20
     98c:	3f 91       	pop	r19
     98e:	2f 91       	pop	r18
     990:	0f 90       	pop	r0
     992:	0f be       	out	0x3f, r0	; 63
     994:	0f 90       	pop	r0
     996:	1f 90       	pop	r1
     998:	18 95       	reti

0000099a <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
     99a:	1f 92       	push	r1
     99c:	0f 92       	push	r0
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	0f 92       	push	r0
     9a2:	11 24       	eor	r1, r1
     9a4:	2f 93       	push	r18
     9a6:	3f 93       	push	r19
     9a8:	4f 93       	push	r20
     9aa:	5f 93       	push	r21
     9ac:	6f 93       	push	r22
     9ae:	7f 93       	push	r23
     9b0:	8f 93       	push	r24
     9b2:	9f 93       	push	r25
     9b4:	af 93       	push	r26
     9b6:	bf 93       	push	r27
     9b8:	ef 93       	push	r30
     9ba:	ff 93       	push	r31
  SPM_RDY();
     9bc:	e0 91 88 00 	lds	r30, 0x0088
     9c0:	f0 91 89 00 	lds	r31, 0x0089
     9c4:	09 95       	icall
}
     9c6:	ff 91       	pop	r31
     9c8:	ef 91       	pop	r30
     9ca:	bf 91       	pop	r27
     9cc:	af 91       	pop	r26
     9ce:	9f 91       	pop	r25
     9d0:	8f 91       	pop	r24
     9d2:	7f 91       	pop	r23
     9d4:	6f 91       	pop	r22
     9d6:	5f 91       	pop	r21
     9d8:	4f 91       	pop	r20
     9da:	3f 91       	pop	r19
     9dc:	2f 91       	pop	r18
     9de:	0f 90       	pop	r0
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	0f 90       	pop	r0
     9e4:	1f 90       	pop	r1
     9e6:	18 95       	reti

000009e8 <Led_Init>:
	LED_3

*/
void Led_Init(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     9e8:	81 30       	cpi	r24, 0x01	; 1
     9ea:	69 f0       	breq	.+26     	; 0xa06 <Led_Init+0x1e>
     9ec:	81 30       	cpi	r24, 0x01	; 1
     9ee:	28 f0       	brcs	.+10     	; 0x9fa <Led_Init+0x12>
     9f0:	82 30       	cpi	r24, 0x02	; 2
     9f2:	79 f0       	breq	.+30     	; 0xa12 <Led_Init+0x2a>
     9f4:	83 30       	cpi	r24, 0x03	; 3
     9f6:	c1 f4       	brne	.+48     	; 0xa28 <Led_Init+0x40>
     9f8:	12 c0       	rjmp	.+36     	; 0xa1e <Led_Init+0x36>
{
case LED_0:
gpioPinDirection(LED_0_GPIO,LED_0_BIT,HIGH);
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	60 e1       	ldi	r22, 0x10	; 16
     9fe:	4f ef       	ldi	r20, 0xFF	; 255
     a00:	0e 94 26 01 	call	0x24c	; 0x24c <gpioPinDirection>
break;
     a04:	08 95       	ret

case LED_1:
gpioPinDirection(LED_1_GPIO,LED_1_BIT,HIGH);
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	60 e2       	ldi	r22, 0x20	; 32
     a0a:	4f ef       	ldi	r20, 0xFF	; 255
     a0c:	0e 94 26 01 	call	0x24c	; 0x24c <gpioPinDirection>
break;
     a10:	08 95       	ret

case LED_2:
gpioPinDirection(LED_2_GPIO,LED_2_BIT,HIGH);
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	60 e4       	ldi	r22, 0x40	; 64
     a16:	4f ef       	ldi	r20, 0xFF	; 255
     a18:	0e 94 26 01 	call	0x24c	; 0x24c <gpioPinDirection>
break;
     a1c:	08 95       	ret

case LED_3:
gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	60 e8       	ldi	r22, 0x80	; 128
     a22:	4f ef       	ldi	r20, 0xFF	; 255
     a24:	0e 94 26 01 	call	0x24c	; 0x24c <gpioPinDirection>
     a28:	08 95       	ret

00000a2a <Led_On>:
}


void Led_On(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     a2a:	81 30       	cpi	r24, 0x01	; 1
     a2c:	69 f0       	breq	.+26     	; 0xa48 <Led_On+0x1e>
     a2e:	81 30       	cpi	r24, 0x01	; 1
     a30:	28 f0       	brcs	.+10     	; 0xa3c <Led_On+0x12>
     a32:	82 30       	cpi	r24, 0x02	; 2
     a34:	79 f0       	breq	.+30     	; 0xa54 <Led_On+0x2a>
     a36:	83 30       	cpi	r24, 0x03	; 3
     a38:	c1 f4       	brne	.+48     	; 0xa6a <Led_On+0x40>
     a3a:	12 c0       	rjmp	.+36     	; 0xa60 <Led_On+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,HIGH);
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	60 e1       	ldi	r22, 0x10	; 16
     a40:	4f ef       	ldi	r20, 0xFF	; 255
     a42:	0e 94 65 01 	call	0x2ca	; 0x2ca <gpioPinWrite>
break;
     a46:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,HIGH);
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	60 e2       	ldi	r22, 0x20	; 32
     a4c:	4f ef       	ldi	r20, 0xFF	; 255
     a4e:	0e 94 65 01 	call	0x2ca	; 0x2ca <gpioPinWrite>
break;
     a52:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,HIGH);
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	60 e4       	ldi	r22, 0x40	; 64
     a58:	4f ef       	ldi	r20, 0xFF	; 255
     a5a:	0e 94 65 01 	call	0x2ca	; 0x2ca <gpioPinWrite>
break;
     a5e:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,HIGH);
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	60 e8       	ldi	r22, 0x80	; 128
     a64:	4f ef       	ldi	r20, 0xFF	; 255
     a66:	0e 94 65 01 	call	0x2ca	; 0x2ca <gpioPinWrite>
     a6a:	08 95       	ret

00000a6c <Led_Off>:
}

void Led_Off(En_LedNumber_t en_led_id)
{

switch(en_led_id)
     a6c:	81 30       	cpi	r24, 0x01	; 1
     a6e:	69 f0       	breq	.+26     	; 0xa8a <Led_Off+0x1e>
     a70:	81 30       	cpi	r24, 0x01	; 1
     a72:	28 f0       	brcs	.+10     	; 0xa7e <Led_Off+0x12>
     a74:	82 30       	cpi	r24, 0x02	; 2
     a76:	79 f0       	breq	.+30     	; 0xa96 <Led_Off+0x2a>
     a78:	83 30       	cpi	r24, 0x03	; 3
     a7a:	c1 f4       	brne	.+48     	; 0xaac <Led_Off+0x40>
     a7c:	12 c0       	rjmp	.+36     	; 0xaa2 <Led_Off+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,LOW);
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	60 e1       	ldi	r22, 0x10	; 16
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	0e 94 65 01 	call	0x2ca	; 0x2ca <gpioPinWrite>
break;
     a88:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,LOW);
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	60 e2       	ldi	r22, 0x20	; 32
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	0e 94 65 01 	call	0x2ca	; 0x2ca <gpioPinWrite>
break;
     a94:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,LOW);
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	60 e4       	ldi	r22, 0x40	; 64
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	0e 94 65 01 	call	0x2ca	; 0x2ca <gpioPinWrite>
break;
     aa0:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,LOW);
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	60 e8       	ldi	r22, 0x80	; 128
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	0e 94 65 01 	call	0x2ca	; 0x2ca <gpioPinWrite>
     aac:	08 95       	ret

00000aae <Led_Toggle>:


}
void Led_Toggle(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     aae:	81 30       	cpi	r24, 0x01	; 1
     ab0:	61 f0       	breq	.+24     	; 0xaca <Led_Toggle+0x1c>
     ab2:	81 30       	cpi	r24, 0x01	; 1
     ab4:	28 f0       	brcs	.+10     	; 0xac0 <Led_Toggle+0x12>
     ab6:	82 30       	cpi	r24, 0x02	; 2
     ab8:	69 f0       	breq	.+26     	; 0xad4 <Led_Toggle+0x26>
     aba:	83 30       	cpi	r24, 0x03	; 3
     abc:	a1 f4       	brne	.+40     	; 0xae6 <Led_Toggle+0x38>
     abe:	0f c0       	rjmp	.+30     	; 0xade <Led_Toggle+0x30>
{
case LED_0:
gpioPinToggle(LED_0_GPIO,LED_0_BIT);
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	60 e1       	ldi	r22, 0x10	; 16
     ac4:	0e 94 a0 01 	call	0x340	; 0x340 <gpioPinToggle>
break;
     ac8:	08 95       	ret

case LED_1:
gpioPinToggle(LED_1_GPIO,LED_1_BIT);
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	60 e2       	ldi	r22, 0x20	; 32
     ace:	0e 94 a0 01 	call	0x340	; 0x340 <gpioPinToggle>
break;
     ad2:	08 95       	ret

case LED_2:
gpioPinToggle(LED_2_GPIO,LED_2_BIT);
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	60 e4       	ldi	r22, 0x40	; 64
     ad8:	0e 94 a0 01 	call	0x340	; 0x340 <gpioPinToggle>
break;
     adc:	08 95       	ret

case LED_3:
gpioPinToggle(LED_3_GPIO,LED_3_BIT);
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	60 e8       	ldi	r22, 0x80	; 128
     ae2:	0e 94 a0 01 	call	0x340	; 0x340 <gpioPinToggle>
     ae6:	08 95       	ret

00000ae8 <SPI_Init>:
#include "gpio.h"
extern ST_SPI_Configuration SPI_Config ;
extern volatile uint8_t u8_DATA;

void SPI_Init()
{
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
	 ST_SPI_Configuration *gConfig = & SPI_Config;

	/********************Enable SPI Interrupt ******************/

	//SPCR = SPCR | (SPI_INT_ENABLE<<SPIE);
	SPCR = gConfig->MASTER_SLAVE_MODE | gConfig->DATA_ORDER
     aec:	c0 e7       	ldi	r28, 0x70	; 112
     aee:	d0 e0       	ldi	r29, 0x00	; 0
     af0:	90 91 77 00 	lds	r25, 0x0077
     af4:	88 81       	ld	r24, Y
     af6:	89 2b       	or	r24, r25
     af8:	9c 81       	ldd	r25, Y+4	; 0x04
     afa:	89 2b       	or	r24, r25
     afc:	99 81       	ldd	r25, Y+1	; 0x01
     afe:	89 2b       	or	r24, r25
     b00:	9d 81       	ldd	r25, Y+5	; 0x05
     b02:	89 2b       	or	r24, r25
     b04:	9e 81       	ldd	r25, Y+6	; 0x06
     b06:	89 2b       	or	r24, r25
     b08:	8d b9       	out	0x0d, r24	; 13
			  | gConfig->OPERATING_LEVEL | gConfig->PRESCALAR
			 | gConfig->SAMPLING_EDGE | gConfig ->INT_ENABLE;

	SPSR |= gConfig->DOUBLE_SPEED;
     b0a:	9e b1       	in	r25, 0x0e	; 14
     b0c:	8b 81       	ldd	r24, Y+3	; 0x03
     b0e:	89 2b       	or	r24, r25
     b10:	8e b9       	out	0x0e, r24	; 14
			 gpioPinDirection(GPIOB, BIT4 | BIT5 | BIT7, OUTPUT);
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	60 eb       	ldi	r22, 0xB0	; 176
     b16:	4f ef       	ldi	r20, 0xFF	; 255
     b18:	0e 94 26 01 	call	0x24c	; 0x24c <gpioPinDirection>
			 gpioPinDirection(GPIOB, BIT6, INPUT);
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	60 e4       	ldi	r22, 0x40	; 64
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	0e 94 26 01 	call	0x24c	; 0x24c <gpioPinDirection>

		SPCR |=  gConfig->ENABLE;
     b26:	9d b1       	in	r25, 0x0d	; 13
     b28:	8a 81       	ldd	r24, Y+2	; 0x02
     b2a:	89 2b       	or	r24, r25
     b2c:	8d b9       	out	0x0d, r24	; 13



}
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <SPI_Transciever_INT>:
void SPI_Transciever_INT(void)
{
	SPDR=u8_DATA;
     b34:	80 91 65 00 	lds	r24, 0x0065
     b38:	8f b9       	out	0x0f, r24	; 15
}
     b3a:	08 95       	ret

00000b3c <SPI_Send>:
void  SPI_Send(uint8_t u8_data)
{
     /* Start transmission */
     SPDR = u8_data;
     b3c:	8f b9       	out	0x0f, r24	; 15
    if (!(READBIT(SPCR,SPIE)))
     b3e:	6f 99       	sbic	0x0d, 7	; 13
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <SPI_Send+0xa>
    {
	 	/* Wait for transmission complete */
     while(!(SPSR & (1<<SPIF)));
     b42:	77 9b       	sbis	0x0e, 7	; 14
     b44:	fe cf       	rjmp	.-4      	; 0xb42 <SPI_Send+0x6>
     b46:	08 95       	ret

00000b48 <spi_INT_CALLED>:
		}
}


uint8_t spi_INT_CALLED(void){
	return SPDR;
     b48:	8f b1       	in	r24, 0x0f	; 15
}
     b4a:	08 95       	ret

00000b4c <SPI_Receive>:

uint8_t  SPI_Receive(void)
{
	if (!(READBIT(SPCR,SPIE)))
     b4c:	6f 99       	sbic	0x0d, 7	; 13
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <SPI_Receive+0x8>
	{
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));
     b50:	77 9b       	sbis	0x0e, 7	; 14
     b52:	fe cf       	rjmp	.-4      	; 0xb50 <SPI_Receive+0x4>
		//return SPDR ; // Received data
	}
	return SPDR;
     b54:	8f b1       	in	r24, 0x0f	; 15
}
     b56:	08 95       	ret

00000b58 <SPI_Checks_for_collision>:


 uint8_t SPI_Checks_for_collision(void)
{
	 return READBIT(SPSR, WCOL);
     b58:	8e b1       	in	r24, 0x0e	; 14
     b5a:	82 95       	swap	r24
     b5c:	86 95       	lsr	r24
     b5e:	86 95       	lsr	r24
     b60:	83 70       	andi	r24, 0x03	; 3
}
     b62:	81 70       	andi	r24, 0x01	; 1
     b64:	08 95       	ret

00000b66 <SPI_De_Init>:

void SPI_De_Init(void)
{
SPCR=0;
     b66:	1d b8       	out	0x0d, r1	; 13
}
     b68:	08 95       	ret

00000b6a <spi_send_first>:
void spi_send_first(uint8_t data)
{
SPDR=data;
     b6a:	8f b9       	out	0x0f, r24	; 15

}
     b6c:	08 95       	ret

00000b6e <timer0Set>:
}

}
void timer0Set(uint8_t u8_value)
{
TCNT0 =	u8_value;
     b6e:	82 bf       	out	0x32, r24	; 50
}
     b70:	08 95       	ret

00000b72 <timer0Read>:

uint8_t timer0Read(void)
{
	 return TCNT0;
     b72:	82 b7       	in	r24, 0x32	; 50
}
     b74:	08 95       	ret

00000b76 <timer0Start>:
Depending on prescaler	x     X    X

*/
void timer0Start(void)
{
	 TCCR0 &= (0xF8);
     b76:	83 b7       	in	r24, 0x33	; 51
     b78:	88 7f       	andi	r24, 0xF8	; 248
     b7a:	83 bf       	out	0x33, r24	; 51
	 TCCR0 |= Prescaler_Value;
     b7c:	93 b7       	in	r25, 0x33	; 51
     b7e:	80 91 82 00 	lds	r24, 0x0082
     b82:	89 2b       	or	r24, r25
     b84:	83 bf       	out	0x33, r24	; 51
}
     b86:	08 95       	ret

00000b88 <timer0Stop>:
						      0     0    0
*/
void timer0Stop(void)
 {

TCCR0 &= (0xF8);
     b88:	83 b7       	in	r24, 0x33	; 51
     b8a:	88 7f       	andi	r24, 0xF8	; 248
     b8c:	83 bf       	out	0x33, r24	; 51

 }
     b8e:	08 95       	ret

00000b90 <timer0Init>:
uint8_t Prescaler_Value2=0;
uint8_t u8g_T1_Prescaler=0;
volatile uint8_t pwm_time_on=0,flag=0;

void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal,uint8_t u8_initialValue, uint8_t u8_outputCompare,En_timer0Interrupt_t en_interruptMask)
{
     b90:	ef 92       	push	r14
     b92:	0f 93       	push	r16
if(en_prescal == T0_NO_CLOCK)
     b94:	44 23       	and	r20, r20
     b96:	19 f4       	brne	.+6      	; 0xb9e <timer0Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer0Stop();
     b98:	0e 94 c4 05 	call	0xb88	; 0xb88 <timer0Stop>
     b9c:	48 c0       	rjmp	.+144    	; 0xc2e <timer0Init+0x9e>
}
else
{
TCCR0 |= en_mode|en_prescal;
     b9e:	93 b7       	in	r25, 0x33	; 51
     ba0:	89 2b       	or	r24, r25
     ba2:	84 2b       	or	r24, r20
     ba4:	83 bf       	out	0x33, r24	; 51
Prescaler_Value=en_prescal;
     ba6:	40 93 82 00 	sts	0x0082, r20
TCNT0 = u8_initialValue;
     baa:	22 bf       	out	0x32, r18	; 50
switch(en_OC0){
     bac:	60 31       	cpi	r22, 0x10	; 16
     bae:	71 f0       	breq	.+28     	; 0xbcc <timer0Init+0x3c>
     bb0:	61 31       	cpi	r22, 0x11	; 17
     bb2:	18 f4       	brcc	.+6      	; 0xbba <timer0Init+0x2a>
     bb4:	66 23       	and	r22, r22
     bb6:	31 f0       	breq	.+12     	; 0xbc4 <timer0Init+0x34>
     bb8:	14 c0       	rjmp	.+40     	; 0xbe2 <timer0Init+0x52>
     bba:	60 32       	cpi	r22, 0x20	; 32
     bbc:	59 f0       	breq	.+22     	; 0xbd4 <timer0Init+0x44>
     bbe:	60 33       	cpi	r22, 0x30	; 48
     bc0:	81 f4       	brne	.+32     	; 0xbe2 <timer0Init+0x52>
     bc2:	0c c0       	rjmp	.+24     	; 0xbdc <timer0Init+0x4c>
	case  T0_OC0_DIS:
	{
	TCCR0 &= 0xCF;
     bc4:	83 b7       	in	r24, 0x33	; 51
     bc6:	8f 7c       	andi	r24, 0xCF	; 207
     bc8:	83 bf       	out	0x33, r24	; 51
		break;
     bca:	0b c0       	rjmp	.+22     	; 0xbe2 <timer0Init+0x52>
	}
	case T0_OC0_TOGGLE:
	{
		TCCR0|=T0_OC0_TOGGLE;
     bcc:	83 b7       	in	r24, 0x33	; 51
     bce:	80 61       	ori	r24, 0x10	; 16
     bd0:	83 bf       	out	0x33, r24	; 51
		break;
     bd2:	07 c0       	rjmp	.+14     	; 0xbe2 <timer0Init+0x52>
	}
	case  T0_OC0_CLEAR:
	{
	TCCR0 |= T0_OC0_CLEAR;
     bd4:	83 b7       	in	r24, 0x33	; 51
     bd6:	80 62       	ori	r24, 0x20	; 32
     bd8:	83 bf       	out	0x33, r24	; 51

		break;
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <timer0Init+0x52>
	}
	case T0_OC0_SET:
	{
		TCCR0 |=T0_OC0_SET;
     bdc:	83 b7       	in	r24, 0x33	; 51
     bde:	80 63       	ori	r24, 0x30	; 48
     be0:	83 bf       	out	0x33, r24	; 51
		break;
	}

}
OCR0  =u8_outputCompare;
     be2:	0c bf       	out	0x3c, r16	; 60
switch(en_interruptMask){
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	e8 16       	cp	r14, r24
     be8:	69 f0       	breq	.+26     	; 0xc04 <timer0Init+0x74>
     bea:	e8 16       	cp	r14, r24
     bec:	20 f0       	brcs	.+8      	; 0xbf6 <timer0Init+0x66>
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	e8 16       	cp	r14, r24
     bf2:	e9 f4       	brne	.+58     	; 0xc2e <timer0Init+0x9e>
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <timer0Init+0x86>
case  T0_POLLING:{
pooling=0;
     bf6:	10 92 81 00 	sts	0x0081, r1
G_interrupt_Disable();
     bfa:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <G_interrupt_Disable>
TIMSK &= T0_POLLING;
     bfe:	89 b7       	in	r24, 0x39	; 57
     c00:	19 be       	out	0x39, r1	; 57
break;
     c02:	15 c0       	rjmp	.+42     	; 0xc2e <timer0Init+0x9e>
}
case T0_INTERRUPT_NORMAL :
{pooling=1;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	80 93 81 00 	sts	0x0081, r24
G_interrupt_Enable();
     c0a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <G_interrupt_Enable>
TIMSK |= T0_INTERRUPT_NORMAL;
     c0e:	89 b7       	in	r24, 0x39	; 57
     c10:	81 60       	ori	r24, 0x01	; 1
     c12:	89 bf       	out	0x39, r24	; 57
break;
     c14:	0c c0       	rjmp	.+24     	; 0xc2e <timer0Init+0x9e>
}
case T0_INTERRUPT_CMP:
{pooling=1;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	80 93 81 00 	sts	0x0081, r24
//G_interrupt_Enable();
SET_BIT(SREG,7);
     c1c:	8f b7       	in	r24, 0x3f	; 63
     c1e:	80 68       	ori	r24, 0x80	; 128
     c20:	8f bf       	out	0x3f, r24	; 63
TIMSK |= T0_INTERRUPT_NORMAL;
     c22:	89 b7       	in	r24, 0x39	; 57
     c24:	81 60       	ori	r24, 0x01	; 1
     c26:	89 bf       	out	0x39, r24	; 57
TIMSK |=T0_INTERRUPT_CMP;
     c28:	89 b7       	in	r24, 0x39	; 57
     c2a:	82 60       	ori	r24, 0x02	; 2
     c2c:	89 bf       	out	0x39, r24	; 57
}
}

}

}
     c2e:	0f 91       	pop	r16
     c30:	ef 90       	pop	r14
     c32:	08 95       	ret

00000c34 <timer0DelayMs>:
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
     c34:	ac 01       	movw	r20, r24
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	41 15       	cp	r20, r1
     c3c:	51 05       	cpc	r21, r1
     c3e:	61 05       	cpc	r22, r1
     c40:	71 05       	cpc	r23, r1
     c42:	89 f0       	breq	.+34     	; 0xc66 <timer0DelayMs+0x32>
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	dc 01       	movw	r26, r24
{
	while ((TIFR&0x01)==0);
     c4a:	08 b6       	in	r0, 0x38	; 56
     c4c:	00 fe       	sbrs	r0, 0
     c4e:	fd cf       	rjmp	.-6      	; 0xc4a <timer0DelayMs+0x16>
	TIFR |=0x01;
     c50:	28 b7       	in	r18, 0x38	; 56
     c52:	21 60       	ori	r18, 0x01	; 1
     c54:	28 bf       	out	0x38, r18	; 56
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	a1 1d       	adc	r26, r1
     c5a:	b1 1d       	adc	r27, r1
     c5c:	84 17       	cp	r24, r20
     c5e:	95 07       	cpc	r25, r21
     c60:	a6 07       	cpc	r26, r22
     c62:	b7 07       	cpc	r27, r23
     c64:	90 f3       	brcs	.-28     	; 0xc4a <timer0DelayMs+0x16>
     c66:	08 95       	ret

00000c68 <timer0DelayUs>:
 at pooling _no prescaling
 240at TCNT0

 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	a1 05       	cpc	r26, r1
     c70:	b1 05       	cpc	r27, r1
     c72:	31 f0       	breq	.+12     	; 0xc80 <timer0DelayUs+0x18>
	{
	timer0Set(240);
     c74:	80 ef       	ldi	r24, 0xF0	; 240
     c76:	0e 94 b7 05 	call	0xb6e	; 0xb6e <timer0Set>
	while(timer0Read()<=255);
     c7a:	0e 94 b9 05 	call	0xb72	; 0xb72 <timer0Read>
     c7e:	fd cf       	rjmp	.-6      	; 0xc7a <timer0DelayUs+0x12>
	//while(u32_ovf_counter <= (8*u32_delay_in_us/1000));
	}
	TIFR |=(1<<TOV0);/*Clear the flag*/
     c80:	88 b7       	in	r24, 0x38	; 56
     c82:	81 60       	ori	r24, 0x01	; 1
     c84:	88 bf       	out	0x38, r24	; 56
}/*1*/
     c86:	08 95       	ret

00000c88 <timer0SwPWM>:
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
     c88:	cf 92       	push	r12
     c8a:	df 92       	push	r13
     c8c:	ef 92       	push	r14
     c8e:	ff 92       	push	r15
     c90:	cf 93       	push	r28
     c92:	c8 2f       	mov	r28, r24
float dutyReal;
pwm_time_on=MAX_HOLD;
     c94:	8f ef       	ldi	r24, 0xFF	; 255
     c96:	80 93 7d 00 	sts	0x007D, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
     c9a:	60 91 7d 00 	lds	r22, 0x007D
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 79 09 	call	0x12f2	; 0x12f2 <__floatunsisf>
     ca8:	6b 01       	movw	r12, r22
     caa:	7c 01       	movw	r14, r24
}/*1*/
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
     cac:	6c 2f       	mov	r22, r28
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 79 09 	call	0x12f2	; 0x12f2 <__floatunsisf>
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	48 ec       	ldi	r20, 0xC8	; 200
     cbe:	52 e4       	ldi	r21, 0x42	; 66
     cc0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__divsf3>
     cc4:	9b 01       	movw	r18, r22
     cc6:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
     cc8:	c7 01       	movw	r24, r14
     cca:	b6 01       	movw	r22, r12
     ccc:	0e 94 07 0a 	call	0x140e	; 0x140e <__mulsf3>
     cd0:	0e 94 4d 09 	call	0x129a	; 0x129a <__fixunssfsi>
     cd4:	60 93 7d 00 	sts	0x007D, r22
switch(pooling)
     cd8:	80 91 81 00 	lds	r24, 0x0081
     cdc:	88 23       	and	r24, r24
     cde:	19 f0       	breq	.+6      	; 0xce6 <timer0SwPWM+0x5e>
     ce0:	81 30       	cpi	r24, 0x01	; 1
     ce2:	29 f5       	brne	.+74     	; 0xd2e <timer0SwPWM+0xa6>
     ce4:	1f c0       	rjmp	.+62     	; 0xd24 <timer0SwPWM+0x9c>
{
	case 0:
	{
	timer0Start();
     ce6:	0e 94 bb 05 	call	0xb76	; 0xb76 <timer0Start>
	timer0Set(pwm_time_on);
     cea:	80 91 7d 00 	lds	r24, 0x007D
     cee:	0e 94 b7 05 	call	0xb6e	; 0xb6e <timer0Set>
	//freq 50KHZ is the Max frequency possible
	while ((TIFR&0x01)==0);
     cf2:	08 b6       	in	r0, 0x38	; 56
     cf4:	00 fe       	sbrs	r0, 0
     cf6:	fd cf       	rjmp	.-6      	; 0xcf2 <timer0SwPWM+0x6a>
	TIFR |=0x01;
     cf8:	88 b7       	in	r24, 0x38	; 56
     cfa:	81 60       	ori	r24, 0x01	; 1
     cfc:	88 bf       	out	0x38, r24	; 56
	PORTC_DATA |=0xff;
     cfe:	85 b3       	in	r24, 0x15	; 21
     d00:	8f ef       	ldi	r24, 0xFF	; 255
     d02:	85 bb       	out	0x15, r24	; 21
	timer0Start();
     d04:	0e 94 bb 05 	call	0xb76	; 0xb76 <timer0Start>
	timer0Set(MAX_HOLD-pwm_time_on);
     d08:	80 91 7d 00 	lds	r24, 0x007D
     d0c:	80 95       	com	r24
     d0e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <timer0Set>
	//freq
	while ((TIFR & 0x01)==0);
     d12:	08 b6       	in	r0, 0x38	; 56
     d14:	00 fe       	sbrs	r0, 0
     d16:	fd cf       	rjmp	.-6      	; 0xd12 <timer0SwPWM+0x8a>
	TIFR |=0x01;
     d18:	88 b7       	in	r24, 0x38	; 56
     d1a:	81 60       	ori	r24, 0x01	; 1
     d1c:	88 bf       	out	0x38, r24	; 56
	PORTC_DATA &=0x00;
     d1e:	85 b3       	in	r24, 0x15	; 21
     d20:	15 ba       	out	0x15, r1	; 21

break;
     d22:	05 c0       	rjmp	.+10     	; 0xd2e <timer0SwPWM+0xa6>
}
case 1:
{
timer0Start();
     d24:	0e 94 bb 05 	call	0xb76	; 0xb76 <timer0Start>
OCR0=pwm_time_on;
     d28:	80 91 7d 00 	lds	r24, 0x007D
     d2c:	8c bf       	out	0x3c, r24	; 60
break;
}

}

}
     d2e:	cf 91       	pop	r28
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	cf 90       	pop	r12
     d38:	08 95       	ret

00000d3a <Timer_interrupt_COMP_routine>:



void Timer_interrupt_COMP_routine(void)
{
	PORTD_DATA ^=0xff;
     d3a:	82 b3       	in	r24, 0x12	; 18
     d3c:	80 95       	com	r24
     d3e:	82 bb       	out	0x12, r24	; 18

}
     d40:	08 95       	ret

00000d42 <timer1Init>:
 */
void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC,
	En_timer1perscaler_t en_prescal,uint16_t u16_initialValue,
	uint16_t u16_outputCompareA,uint16_t u16_outputCompareB,
	 uint16_t u16_inputCapture,En_timer1Interrupt_t en_interruptMask)
 {
     d42:	af 92       	push	r10
     d44:	ef 92       	push	r14
     d46:	ff 92       	push	r15
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	d9 01       	movw	r26, r18
     d4e:	2a 2d       	mov	r18, r10
	TCCR1 |= en_mode | en_OC;
     d50:	ee b5       	in	r30, 0x2e	; 46
     d52:	ff b5       	in	r31, 0x2f	; 47
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	86 2b       	or	r24, r22
     d58:	97 2b       	or	r25, r23
     d5a:	8e 2b       	or	r24, r30
     d5c:	9f 2b       	or	r25, r31
     d5e:	9f bd       	out	0x2f, r25	; 47
     d60:	8e bd       	out	0x2e, r24	; 46
	u8g_T1_Prescaler=en_prescal;
     d62:	40 93 7e 00 	sts	0x007E, r20
	OCR1A =u16_outputCompareA;
     d66:	1b bd       	out	0x2b, r17	; 43
     d68:	0a bd       	out	0x2a, r16	; 42
	OCR1B =u16_outputCompareB;
     d6a:	f9 bc       	out	0x29, r15	; 41
     d6c:	e8 bc       	out	0x28, r14	; 40
	TCNT1=u16_initialValue;
     d6e:	bd bd       	out	0x2d, r27	; 45
     d70:	ac bd       	out	0x2c, r26	; 44
	switch(en_interruptMask)
     d72:	28 30       	cpi	r18, 0x08	; 8
     d74:	d1 f0       	breq	.+52     	; 0xdaa <timer1Init+0x68>
     d76:	29 30       	cpi	r18, 0x09	; 9
     d78:	28 f4       	brcc	.+10     	; 0xd84 <timer1Init+0x42>
     d7a:	aa 20       	and	r10, r10
     d7c:	51 f0       	breq	.+20     	; 0xd92 <timer1Init+0x50>
     d7e:	24 30       	cpi	r18, 0x04	; 4
     d80:	f9 f4       	brne	.+62     	; 0xdc0 <timer1Init+0x7e>
     d82:	0b c0       	rjmp	.+22     	; 0xd9a <timer1Init+0x58>
     d84:	20 32       	cpi	r18, 0x20	; 32
     d86:	a9 f0       	breq	.+42     	; 0xdb2 <timer1Init+0x70>
     d88:	2c 33       	cpi	r18, 0x3C	; 60
     d8a:	b9 f0       	breq	.+46     	; 0xdba <timer1Init+0x78>
     d8c:	20 31       	cpi	r18, 0x10	; 16
     d8e:	c1 f4       	brne	.+48     	; 0xdc0 <timer1Init+0x7e>
     d90:	08 c0       	rjmp	.+16     	; 0xda2 <timer1Init+0x60>
	{
		case T1_POLLING:
		{
			TIMSK &=0xC3;
     d92:	89 b7       	in	r24, 0x39	; 57
     d94:	83 7c       	andi	r24, 0xC3	; 195
     d96:	89 bf       	out	0x39, r24	; 57
			/*	     OCIE0 ToIE0   ALL INTERRUPT T1    	OCIE0 ToIE0
			TIMSK &=  1     1        0 0 0 0 	           1     1
			All T1 Interrupts enable are cleared
			but other timers interrupt enable are not effected
			*/
		break;
     d98:	13 c0       	rjmp	.+38     	; 0xdc0 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_NORMAL:
		{
			TIMSK |=T1_INTERRUPT_NORMAL;
     d9a:	89 b7       	in	r24, 0x39	; 57
     d9c:	84 60       	ori	r24, 0x04	; 4
     d9e:	89 bf       	out	0x39, r24	; 57
		break;
     da0:	0f c0       	rjmp	.+30     	; 0xdc0 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_CMP_1A:
		{
			TIMSK |=T1_INTERRUPT_CMP_1A;
     da2:	89 b7       	in	r24, 0x39	; 57
     da4:	80 61       	ori	r24, 0x10	; 16
     da6:	89 bf       	out	0x39, r24	; 57
			break;
     da8:	0b c0       	rjmp	.+22     	; 0xdc0 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_CMP_1B:
		{
			TIMSK |=T1_INTERRUPT_CMP_1B;
     daa:	89 b7       	in	r24, 0x39	; 57
     dac:	88 60       	ori	r24, 0x08	; 8
     dae:	89 bf       	out	0x39, r24	; 57
			break;
     db0:	07 c0       	rjmp	.+14     	; 0xdc0 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_ICAPTURE:
		{
			TIMSK |=T1_INTERRUPT_ICAPTURE;
     db2:	89 b7       	in	r24, 0x39	; 57
     db4:	80 62       	ori	r24, 0x20	; 32
     db6:	89 bf       	out	0x39, r24	; 57
			break;
     db8:	03 c0       	rjmp	.+6      	; 0xdc0 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_All:
		{
			TIMSK|=T1_INTERRUPT_All;
     dba:	89 b7       	in	r24, 0x39	; 57
     dbc:	8c 63       	ori	r24, 0x3C	; 60
     dbe:	89 bf       	out	0x39, r24	; 57
	}




	}
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	af 90       	pop	r10
     dca:	08 95       	ret

00000dcc <timer1Set>:


void timer1Set(uint16_t u16_value)
{
TCNT1=u16_value;
     dcc:	9d bd       	out	0x2d, r25	; 45
     dce:	8c bd       	out	0x2c, r24	; 44
}
     dd0:	08 95       	ret

00000dd2 <timer1Read>:
 * Description:
 * @return TCNT1
 */
uint16_t timer1Read(void)
{
return TCNT1;
     dd2:	8c b5       	in	r24, 0x2c	; 44
     dd4:	9d b5       	in	r25, 0x2d	; 45
}
     dd6:	08 95       	ret

00000dd8 <timer1Start>:
 * Description:
 * @param
 */
void timer1Start(void)
{
TCCR1|=u8g_T1_Prescaler;
     dd8:	2e b5       	in	r18, 0x2e	; 46
     dda:	3f b5       	in	r19, 0x2f	; 47
     ddc:	80 91 7e 00 	lds	r24, 0x007E
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	82 2b       	or	r24, r18
     de4:	93 2b       	or	r25, r19
     de6:	9f bd       	out	0x2f, r25	; 47
     de8:	8e bd       	out	0x2e, r24	; 46
}
     dea:	08 95       	ret

00000dec <timer1Stop>:
 * Description:
 * @param
 */
void timer1Stop(void)
{
TCCR1 &=0xfff8;
     dec:	8e b5       	in	r24, 0x2e	; 46
     dee:	9f b5       	in	r25, 0x2f	; 47
     df0:	88 7f       	andi	r24, 0xF8	; 248
     df2:	9f bd       	out	0x2f, r25	; 47
     df4:	8e bd       	out	0x2e, r24	; 46
/*Keep all sittings as it is and put zeros in cs10,cs11,cs12*/
}
     df6:	08 95       	ret

00000df8 <timer1DelayMs>:
 */
void timer1DelayMs(uint16_t u16_delay_in_ms)
{


}
     df8:	08 95       	ret

00000dfa <timer1DelayUs>:
 */
void timer1DelayUs(uint32_t u32_delay_in_us)
{


}
     dfa:	08 95       	ret

00000dfc <timer1SwPWM>:
 */
void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{


}
     dfc:	08 95       	ret

00000dfe <timer2Set>:
* Description:
* @param value
*/
void timer2Set(uint8_t u8_a_value)
{
TCNT2=u8_a_value;
     dfe:	84 bd       	out	0x24, r24	; 36
}
     e00:	08 95       	ret

00000e02 <timer2Read>:
/**
* Description:
* @return
*/
uint8_t timer2Read(void){
return TCNT2;
     e02:	84 b5       	in	r24, 0x24	; 36
}
     e04:	08 95       	ret

00000e06 <timer2Start>:
/**
* Description:
*/
void timer2Start(void)
{
TCCR2 &= 0xf8;
     e06:	85 b5       	in	r24, 0x25	; 37
     e08:	88 7f       	andi	r24, 0xF8	; 248
     e0a:	85 bd       	out	0x25, r24	; 37
TCCR2 |= Prescaler_Value2;
     e0c:	95 b5       	in	r25, 0x25	; 37
     e0e:	80 91 7f 00 	lds	r24, 0x007F
     e12:	89 2b       	or	r24, r25
     e14:	85 bd       	out	0x25, r24	; 37
}
     e16:	08 95       	ret

00000e18 <timer2Stop>:
/**
* Description:
*/
void timer2Stop(void)
{
TCCR2 &= 0xf8;
     e18:	85 b5       	in	r24, 0x25	; 37
     e1a:	88 7f       	andi	r24, 0xF8	; 248
     e1c:	85 bd       	out	0x25, r24	; 37

}
     e1e:	08 95       	ret

00000e20 <timer2Init>:


}

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC,En_timer2perscaler_t en_prescal2, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
     e20:	cf 92       	push	r12
     e22:	0f 93       	push	r16
if(en_prescal2 == T2_NO_CLOCK)
     e24:	44 23       	and	r20, r20
     e26:	19 f4       	brne	.+6      	; 0xe2e <timer2Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer2Stop();
     e28:	0e 94 0c 07 	call	0xe18	; 0xe18 <timer2Stop>
     e2c:	46 c0       	rjmp	.+140    	; 0xeba <timer2Init+0x9a>
}
else
{
TCCR2 |= en_mode|en_prescal2 ;
     e2e:	95 b5       	in	r25, 0x25	; 37
     e30:	89 2b       	or	r24, r25
     e32:	84 2b       	or	r24, r20
     e34:	85 bd       	out	0x25, r24	; 37
Prescaler_Value2=en_prescal2;
     e36:	40 93 7f 00 	sts	0x007F, r20
TCNT2 = u8_initialValue;
     e3a:	24 bd       	out	0x24, r18	; 36
switch(en_OC){
     e3c:	60 31       	cpi	r22, 0x10	; 16
     e3e:	71 f0       	breq	.+28     	; 0xe5c <timer2Init+0x3c>
     e40:	61 31       	cpi	r22, 0x11	; 17
     e42:	18 f4       	brcc	.+6      	; 0xe4a <timer2Init+0x2a>
     e44:	66 23       	and	r22, r22
     e46:	31 f0       	breq	.+12     	; 0xe54 <timer2Init+0x34>
     e48:	14 c0       	rjmp	.+40     	; 0xe72 <timer2Init+0x52>
     e4a:	60 32       	cpi	r22, 0x20	; 32
     e4c:	59 f0       	breq	.+22     	; 0xe64 <timer2Init+0x44>
     e4e:	60 33       	cpi	r22, 0x30	; 48
     e50:	81 f4       	brne	.+32     	; 0xe72 <timer2Init+0x52>
     e52:	0c c0       	rjmp	.+24     	; 0xe6c <timer2Init+0x4c>
	case  T2_OC2_DIS:
	{
	TCCR2 &= 0xCF;
     e54:	85 b5       	in	r24, 0x25	; 37
     e56:	8f 7c       	andi	r24, 0xCF	; 207
     e58:	85 bd       	out	0x25, r24	; 37
		break;
     e5a:	0b c0       	rjmp	.+22     	; 0xe72 <timer2Init+0x52>
	}
	case T2_OC2_TOGGLE:
	{
		TCCR2 |=T2_OC2_TOGGLE;
     e5c:	85 b5       	in	r24, 0x25	; 37
     e5e:	80 61       	ori	r24, 0x10	; 16
     e60:	85 bd       	out	0x25, r24	; 37
		break;
     e62:	07 c0       	rjmp	.+14     	; 0xe72 <timer2Init+0x52>
	}
	case  T2_OC2_CLEAR:
	{
	TCCR2 |= T2_OC2_CLEAR;
     e64:	85 b5       	in	r24, 0x25	; 37
     e66:	80 62       	ori	r24, 0x20	; 32
     e68:	85 bd       	out	0x25, r24	; 37

		break;
     e6a:	03 c0       	rjmp	.+6      	; 0xe72 <timer2Init+0x52>
	}
	case T2_OC2_SET:
	{
		TCCR2 |=T2_OC2_SET;
     e6c:	85 b5       	in	r24, 0x25	; 37
     e6e:	80 63       	ori	r24, 0x30	; 48
     e70:	85 bd       	out	0x25, r24	; 37
		break;
	}

}
OCR2  =u8_outputCompare;
     e72:	03 bd       	out	0x23, r16	; 35
switch(en_interruptMask){
     e74:	80 e4       	ldi	r24, 0x40	; 64
     e76:	c8 16       	cp	r12, r24
     e78:	61 f0       	breq	.+24     	; 0xe92 <timer2Init+0x72>
     e7a:	80 e8       	ldi	r24, 0x80	; 128
     e7c:	c8 16       	cp	r12, r24
     e7e:	91 f0       	breq	.+36     	; 0xea4 <timer2Init+0x84>
     e80:	cc 20       	and	r12, r12
     e82:	d9 f4       	brne	.+54     	; 0xeba <timer2Init+0x9a>
case  T2_POLLING:
pooling_2=0;
     e84:	10 92 80 00 	sts	0x0080, r1
G_interrupt_Disable();
     e88:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <G_interrupt_Disable>
TIMSK &= T2_POLLING;
     e8c:	89 b7       	in	r24, 0x39	; 57
     e8e:	19 be       	out	0x39, r1	; 57
break;
     e90:	14 c0       	rjmp	.+40     	; 0xeba <timer2Init+0x9a>
case T2_INTERRUPT_NORMAL :
{
	pooling_2=1;
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	80 93 80 00 	sts	0x0080, r24
G_interrupt_Enable();
     e98:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <G_interrupt_Enable>
TIMSK |= T2_INTERRUPT_NORMAL;
     e9c:	89 b7       	in	r24, 0x39	; 57
     e9e:	80 64       	ori	r24, 0x40	; 64
     ea0:	89 bf       	out	0x39, r24	; 57
break;
     ea2:	0b c0       	rjmp	.+22     	; 0xeba <timer2Init+0x9a>
}
case T2_INTERRUPT_CMP:
{
	pooling_2=1;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	80 93 80 00 	sts	0x0080, r24
G_interrupt_Enable();
     eaa:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <G_interrupt_Enable>
//SET_BIT(SREG,7);
TIMSK |=T2_INTERRUPT_NORMAL;
     eae:	89 b7       	in	r24, 0x39	; 57
     eb0:	80 64       	ori	r24, 0x40	; 64
     eb2:	89 bf       	out	0x39, r24	; 57
TIMSK |=T2_INTERRUPT_CMP;
     eb4:	89 b7       	in	r24, 0x39	; 57
     eb6:	80 68       	ori	r24, 0x80	; 128
     eb8:	89 bf       	out	0x39, r24	; 57

}



}
     eba:	0f 91       	pop	r16
     ebc:	cf 90       	pop	r12
     ebe:	08 95       	ret

00000ec0 <timer2DelayMs>:
		Prescalercounst=1;
		break;

		}*/
void timer2DelayMs(uint16_t u16_delay_in_ms)
{
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	00 d0       	rcall	.+0      	; 0xeca <timer2DelayMs+0xa>
     eca:	00 d0       	rcall	.+0      	; 0xecc <timer2DelayMs+0xc>
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	8c 01       	movw	r16, r24
	volatile uint16_t count=0;
     ed2:	1a 82       	std	Y+2, r1	; 0x02
     ed4:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t Prescalercounst=0,set_timer2=0;
     ed6:	1b 82       	std	Y+3, r1	; 0x03
     ed8:	1c 82       	std	Y+4, r1	; 0x04
	switch(Prescaler_Value2)
     eda:	80 91 7f 00 	lds	r24, 0x007F
     ede:	84 30       	cpi	r24, 0x04	; 4
     ee0:	f9 f0       	breq	.+62     	; 0xf20 <timer2DelayMs+0x60>
     ee2:	85 30       	cpi	r24, 0x05	; 5
     ee4:	38 f4       	brcc	.+14     	; 0xef4 <timer2DelayMs+0x34>
     ee6:	82 30       	cpi	r24, 0x02	; 2
     ee8:	89 f0       	breq	.+34     	; 0xf0c <timer2DelayMs+0x4c>
     eea:	83 30       	cpi	r24, 0x03	; 3
     eec:	a0 f4       	brcc	.+40     	; 0xf16 <timer2DelayMs+0x56>
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	51 f5       	brne	.+84     	; 0xf46 <timer2DelayMs+0x86>
     ef2:	07 c0       	rjmp	.+14     	; 0xf02 <timer2DelayMs+0x42>
     ef4:	86 30       	cpi	r24, 0x06	; 6
     ef6:	f1 f0       	breq	.+60     	; 0xf34 <timer2DelayMs+0x74>
     ef8:	86 30       	cpi	r24, 0x06	; 6
     efa:	b8 f0       	brcs	.+46     	; 0xf2a <timer2DelayMs+0x6a>
     efc:	87 30       	cpi	r24, 0x07	; 7
     efe:	19 f5       	brne	.+70     	; 0xf46 <timer2DelayMs+0x86>
     f00:	1e c0       	rjmp	.+60     	; 0xf3e <timer2DelayMs+0x7e>
	{
		case T2_PRESCALER_NO:{
		Prescalercounst=58;
     f02:	8a e3       	ldi	r24, 0x3A	; 58
     f04:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=10;
     f06:	8a e0       	ldi	r24, 0x0A	; 10
     f08:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     f0a:	1d c0       	rjmp	.+58     	; 0xf46 <timer2DelayMs+0x86>
		case T2_PRESCALER_8:
		{Prescalercounst=8;
     f0c:	88 e0       	ldi	r24, 0x08	; 8
     f0e:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=12;
     f10:	8c e0       	ldi	r24, 0x0C	; 12
     f12:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     f14:	18 c0       	rjmp	.+48     	; 0xf46 <timer2DelayMs+0x86>
		case T2_PRESCALER_32:
		{Prescalercounst=2;
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=8;
     f1a:	88 e0       	ldi	r24, 0x08	; 8
     f1c:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     f1e:	13 c0       	rjmp	.+38     	; 0xf46 <timer2DelayMs+0x86>
		case T2_PRESCALER_64:
		{Prescalercounst=1;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=6;
     f24:	86 e0       	ldi	r24, 0x06	; 6
     f26:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     f28:	0e c0       	rjmp	.+28     	; 0xf46 <timer2DelayMs+0x86>
		case T2_PRESCALER_128:
		{Prescalercounst=1;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=131;
     f2e:	83 e8       	ldi	r24, 0x83	; 131
     f30:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     f32:	09 c0       	rjmp	.+18     	; 0xf46 <timer2DelayMs+0x86>
		case T2_PRESCALER_256:
		{Prescalercounst=1;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=194;
     f38:	82 ec       	ldi	r24, 0xC2	; 194
     f3a:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <timer2DelayMs+0x86>
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=240;
     f42:	80 ef       	ldi	r24, 0xF0	; 240
     f44:	8c 83       	std	Y+4, r24	; 0x04
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
     f46:	1a 82       	std	Y+2, r1	; 0x02
     f48:	19 82       	std	Y+1, r1	; 0x01
     f4a:	2b 81       	ldd	r18, Y+3	; 0x03
     f4c:	49 81       	ldd	r20, Y+1	; 0x01
     f4e:	5a 81       	ldd	r21, Y+2	; 0x02
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	02 9f       	mul	r16, r18
     f54:	c0 01       	movw	r24, r0
     f56:	03 9f       	mul	r16, r19
     f58:	90 0d       	add	r25, r0
     f5a:	12 9f       	mul	r17, r18
     f5c:	90 0d       	add	r25, r0
     f5e:	11 24       	eor	r1, r1
     f60:	48 17       	cp	r20, r24
     f62:	59 07       	cpc	r21, r25
     f64:	e0 f4       	brcc	.+56     	; 0xf9e <timer2DelayMs+0xde>
	{
		timer2Set(set_timer2);//10 for no prescaler....12 for 8 prescaler .... 8 for 32 prescaler ....6 for prescaler 64 .....
     f66:	8c 81       	ldd	r24, Y+4	; 0x04
     f68:	0e 94 ff 06 	call	0xdfe	; 0xdfe <timer2Set>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR & 0x40)==0);
     f6c:	08 b6       	in	r0, 0x38	; 56
     f6e:	06 fe       	sbrs	r0, 6
     f70:	fd cf       	rjmp	.-6      	; 0xf6c <timer2DelayMs+0xac>
		TIFR |=0x40;
     f72:	88 b7       	in	r24, 0x38	; 56
     f74:	80 64       	ori	r24, 0x40	; 64
     f76:	88 bf       	out	0x38, r24	; 56
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
		set_timer2=240;
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	9a 81       	ldd	r25, Y+2	; 0x02
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	9a 83       	std	Y+2, r25	; 0x02
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	2b 81       	ldd	r18, Y+3	; 0x03
     f84:	49 81       	ldd	r20, Y+1	; 0x01
     f86:	5a 81       	ldd	r21, Y+2	; 0x02
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	02 9f       	mul	r16, r18
     f8c:	c0 01       	movw	r24, r0
     f8e:	03 9f       	mul	r16, r19
     f90:	90 0d       	add	r25, r0
     f92:	12 9f       	mul	r17, r18
     f94:	90 0d       	add	r25, r0
     f96:	11 24       	eor	r1, r1
     f98:	48 17       	cp	r20, r24
     f9a:	59 07       	cpc	r21, r25
     f9c:	20 f3       	brcs	.-56     	; 0xf66 <timer2DelayMs+0xa6>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR & 0x40)==0);
		TIFR |=0x40;

	}
}
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	08 95       	ret

00000fb0 <timer2DelayUs>:

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
     fb0:	cf 92       	push	r12
     fb2:	df 92       	push	r13
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <timer2DelayUs+0xe>
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	6b 01       	movw	r12, r22
     fc4:	7c 01       	movw	r14, r24
	volatile uint16_t count =0;
     fc6:	1a 82       	std	Y+2, r1	; 0x02
     fc8:	19 82       	std	Y+1, r1	; 0x01
	for (count=0;count<u16_delay_in_us;count++)
     fca:	1a 82       	std	Y+2, r1	; 0x02
     fcc:	19 82       	std	Y+1, r1	; 0x01
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	9a 81       	ldd	r25, Y+2	; 0x02
     fd2:	a0 e0       	ldi	r26, 0x00	; 0
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	8c 15       	cp	r24, r12
     fd8:	9d 05       	cpc	r25, r13
     fda:	ae 05       	cpc	r26, r14
     fdc:	bf 05       	cpc	r27, r15
     fde:	b8 f4       	brcc	.+46     	; 0x100e <timer2DelayUs+0x5e>
	{
		timer2Set(254);//254 for no prescaler
     fe0:	8e ef       	ldi	r24, 0xFE	; 254
     fe2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <timer2Set>
		while ((TIFR & 0x40)==0);
     fe6:	08 b6       	in	r0, 0x38	; 56
     fe8:	06 fe       	sbrs	r0, 6
     fea:	fd cf       	rjmp	.-6      	; 0xfe6 <timer2DelayUs+0x36>
		TIFR |=0x40;
     fec:	88 b7       	in	r24, 0x38	; 56
     fee:	80 64       	ori	r24, 0x40	; 64
     ff0:	88 bf       	out	0x38, r24	; 56

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
	volatile uint16_t count =0;
	for (count=0;count<u16_delay_in_us;count++)
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	9a 81       	ldd	r25, Y+2	; 0x02
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	9a 83       	std	Y+2, r25	; 0x02
     ffa:	89 83       	std	Y+1, r24	; 0x01
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    1000:	a0 e0       	ldi	r26, 0x00	; 0
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	8c 15       	cp	r24, r12
    1006:	9d 05       	cpc	r25, r13
    1008:	ae 05       	cpc	r26, r14
    100a:	bf 05       	cpc	r27, r15
    100c:	48 f3       	brcs	.-46     	; 0xfe0 <timer2DelayUs+0x30>
		while ((TIFR & 0x40)==0);
		TIFR |=0x40;

	}

}
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	ff 90       	pop	r15
    1018:	ef 90       	pop	r14
    101a:	df 90       	pop	r13
    101c:	cf 90       	pop	r12
    101e:	08 95       	ret

00001020 <timer2SwPWM>:
/**
* Description:
* @param dutyCycle
*/
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    1020:	cf 92       	push	r12
    1022:	df 92       	push	r13
    1024:	ef 92       	push	r14
    1026:	ff 92       	push	r15
    1028:	cf 93       	push	r28
    102a:	c8 2f       	mov	r28, r24

float dutyReal;
pwm_time_on=MAX_HOLD;
    102c:	8f ef       	ldi	r24, 0xFF	; 255
    102e:	80 93 7d 00 	sts	0x007D, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
    1032:	60 91 7d 00 	lds	r22, 0x007D
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <__floatunsisf>
    1040:	6b 01       	movw	r12, r22
    1042:	7c 01       	movw	r14, r24
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{

float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
    1044:	6c 2f       	mov	r22, r28
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <__floatunsisf>
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	48 ec       	ldi	r20, 0xC8	; 200
    1056:	52 e4       	ldi	r21, 0x42	; 66
    1058:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__divsf3>
    105c:	9b 01       	movw	r18, r22
    105e:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
    1060:	c7 01       	movw	r24, r14
    1062:	b6 01       	movw	r22, r12
    1064:	0e 94 07 0a 	call	0x140e	; 0x140e <__mulsf3>
    1068:	0e 94 4d 09 	call	0x129a	; 0x129a <__fixunssfsi>
    106c:	60 93 7d 00 	sts	0x007D, r22
switch(pooling_2)
    1070:	80 91 80 00 	lds	r24, 0x0080
    1074:	88 23       	and	r24, r24
    1076:	19 f0       	breq	.+6      	; 0x107e <timer2SwPWM+0x5e>
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	29 f5       	brne	.+74     	; 0x10c6 <timer2SwPWM+0xa6>
    107c:	1f c0       	rjmp	.+62     	; 0x10bc <timer2SwPWM+0x9c>
{
	case 0:
	{
		timer2Start();
    107e:	0e 94 03 07 	call	0xe06	; 0xe06 <timer2Start>
		timer2Set(pwm_time_on);
    1082:	80 91 7d 00 	lds	r24, 0x007D
    1086:	0e 94 ff 06 	call	0xdfe	; 0xdfe <timer2Set>
		//freq 50KHZ is the Max frequency possible
		while ((TIFR&0x04)==0);
    108a:	08 b6       	in	r0, 0x38	; 56
    108c:	02 fe       	sbrs	r0, 2
    108e:	fd cf       	rjmp	.-6      	; 0x108a <timer2SwPWM+0x6a>
		TIFR |=0x04;
    1090:	88 b7       	in	r24, 0x38	; 56
    1092:	84 60       	ori	r24, 0x04	; 4
    1094:	88 bf       	out	0x38, r24	; 56
		PORTC_DATA |=0xff;
    1096:	85 b3       	in	r24, 0x15	; 21
    1098:	8f ef       	ldi	r24, 0xFF	; 255
    109a:	85 bb       	out	0x15, r24	; 21
		timer2Start();
    109c:	0e 94 03 07 	call	0xe06	; 0xe06 <timer2Start>
		timer2Set(MAX_HOLD-pwm_time_on);
    10a0:	80 91 7d 00 	lds	r24, 0x007D
    10a4:	80 95       	com	r24
    10a6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <timer2Set>
		//freq
		while ((TIFR & 0x04)==0);
    10aa:	08 b6       	in	r0, 0x38	; 56
    10ac:	02 fe       	sbrs	r0, 2
    10ae:	fd cf       	rjmp	.-6      	; 0x10aa <timer2SwPWM+0x8a>
		TIFR |=0x04;
    10b0:	88 b7       	in	r24, 0x38	; 56
    10b2:	84 60       	ori	r24, 0x04	; 4
    10b4:	88 bf       	out	0x38, r24	; 56
		PORTC_DATA &=0x00;
    10b6:	85 b3       	in	r24, 0x15	; 21
    10b8:	15 ba       	out	0x15, r1	; 21

		break;
    10ba:	05 c0       	rjmp	.+10     	; 0x10c6 <timer2SwPWM+0xa6>
	}
	case 1:
	{
		timer2Start();
    10bc:	0e 94 03 07 	call	0xe06	; 0xe06 <timer2Start>
		OCR2=pwm_time_on;
    10c0:	80 91 7d 00 	lds	r24, 0x007D
    10c4:	83 bd       	out	0x23, r24	; 35
	}

}


}
    10c6:	cf 91       	pop	r28
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	df 90       	pop	r13
    10ce:	cf 90       	pop	r12
    10d0:	08 95       	ret

000010d2 <Timer2_interrupt_COMP_routine>:
void Timer2_interrupt_COMP_routine(void)
{



}
    10d2:	08 95       	ret

000010d4 <Timer2_interrupt_routine>:
void Timer2_interrupt_routine(void)
{


}
    10d4:	08 95       	ret

000010d6 <Uart_Init>:
uint8_t BufferRequested[Buffer_Size];
volatile uint8_t u8_index=0;
volatile uint8_t buf_is_full=0;
void Uart_Init(En_BAUD_Rate Baud_rate,En_Stop_config Stop_bits_num,
  EN_Parity parity_Bit,EN_Data_Size data_num_bits,EN_UartMode uart_mode)
{uint8_t Buffer=0;
    10d6:	0f 93       	push	r16
switch (Baud_rate) {
    10d8:	83 33       	cpi	r24, 0x33	; 51
    10da:	71 f0       	breq	.+28     	; 0x10f8 <Uart_Init+0x22>
    10dc:	84 33       	cpi	r24, 0x34	; 52
    10de:	18 f4       	brcc	.+6      	; 0x10e6 <Uart_Init+0x10>
    10e0:	89 31       	cpi	r24, 0x19	; 25
    10e2:	79 f4       	brne	.+30     	; 0x1102 <Uart_Init+0x2c>
    10e4:	0c c0       	rjmp	.+24     	; 0x10fe <Uart_Init+0x28>
    10e6:	84 34       	cpi	r24, 0x44	; 68
    10e8:	21 f0       	breq	.+8      	; 0x10f2 <Uart_Init+0x1c>
    10ea:	87 36       	cpi	r24, 0x67	; 103
    10ec:	51 f4       	brne	.+20     	; 0x1102 <Uart_Init+0x2c>
  case Baud9600:
  UBRRL=Baud9600;
    10ee:	89 b9       	out	0x09, r24	; 9
  break;
    10f0:	08 c0       	rjmp	.+16     	; 0x1102 <Uart_Init+0x2c>
  case Baud14400:
  UBRRL=Baud14400;
    10f2:	84 e4       	ldi	r24, 0x44	; 68
    10f4:	89 b9       	out	0x09, r24	; 9
  break;
    10f6:	05 c0       	rjmp	.+10     	; 0x1102 <Uart_Init+0x2c>
  case Baud19200:
  UBRRL=Baud19200;
    10f8:	83 e3       	ldi	r24, 0x33	; 51
    10fa:	89 b9       	out	0x09, r24	; 9
  break;
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <Uart_Init+0x2c>
  case Baud38400:
  UBRRL=Baud38400;
    10fe:	89 e1       	ldi	r24, 0x19	; 25
    1100:	89 b9       	out	0x09, r24	; 9
  break;
}
switch (Stop_bits_num) {
    1102:	66 23       	and	r22, r22
    1104:	31 f0       	breq	.+12     	; 0x1112 <Uart_Init+0x3c>
    1106:	61 30       	cpi	r22, 0x01	; 1
    1108:	11 f0       	breq	.+4      	; 0x110e <Uart_Init+0x38>
uint8_t BufferRequested[Buffer_Size];
volatile uint8_t u8_index=0;
volatile uint8_t buf_is_full=0;
void Uart_Init(En_BAUD_Rate Baud_rate,En_Stop_config Stop_bits_num,
  EN_Parity parity_Bit,EN_Data_Size data_num_bits,EN_UartMode uart_mode)
{uint8_t Buffer=0;
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	03 c0       	rjmp	.+6      	; 0x1114 <Uart_Init+0x3e>
  break;
}
case TwoStopBits:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,USBS);
    110e:	88 e8       	ldi	r24, 0x88	; 136
  break;
    1110:	01 c0       	rjmp	.+2      	; 0x1114 <Uart_Init+0x3e>
  break;
}
switch (Stop_bits_num) {
case OneStopBit:
{ SET_BIT(Buffer,URSEL);
  CLEAR_BIT(Buffer,USBS);
    1112:	80 e8       	ldi	r24, 0x80	; 128
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,USBS);
  break;
}
}
switch (data_num_bits)
    1114:	22 30       	cpi	r18, 0x02	; 2
    1116:	a1 f0       	breq	.+40     	; 0x1140 <Uart_Init+0x6a>
    1118:	23 30       	cpi	r18, 0x03	; 3
    111a:	28 f4       	brcc	.+10     	; 0x1126 <Uart_Init+0x50>
    111c:	22 23       	and	r18, r18
    111e:	41 f0       	breq	.+16     	; 0x1130 <Uart_Init+0x5a>
    1120:	21 30       	cpi	r18, 0x01	; 1
    1122:	b9 f4       	brne	.+46     	; 0x1152 <Uart_Init+0x7c>
    1124:	09 c0       	rjmp	.+18     	; 0x1138 <Uart_Init+0x62>
    1126:	23 30       	cpi	r18, 0x03	; 3
    1128:	79 f0       	breq	.+30     	; 0x1148 <Uart_Init+0x72>
    112a:	24 30       	cpi	r18, 0x04	; 4
    112c:	91 f4       	brne	.+36     	; 0x1152 <Uart_Init+0x7c>
    112e:	0f c0       	rjmp	.+30     	; 0x114e <Uart_Init+0x78>
{
case FiveBits:
{
SET_BIT(Buffer,URSEL);
    1130:	80 68       	ori	r24, 0x80	; 128
CLEAR_BIT(Buffer,UCSZ0);
CLEAR_BIT(Buffer,UCSZ1);
    1132:	89 7f       	andi	r24, 0xF9	; 249
CLEAR_BIT(UCSRB,UCSZ2);
    1134:	52 98       	cbi	0x0a, 2	; 10
break;
    1136:	0d c0       	rjmp	.+26     	; 0x1152 <Uart_Init+0x7c>
}
case SexBits:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,UCSZ0);
    1138:	82 68       	ori	r24, 0x82	; 130
  CLEAR_BIT(Buffer,UCSZ1);
    113a:	8b 7f       	andi	r24, 0xFB	; 251
  CLEAR_BIT(UCSRB,UCSZ2);
    113c:	52 98       	cbi	0x0a, 2	; 10
  break;
    113e:	09 c0       	rjmp	.+18     	; 0x1152 <Uart_Init+0x7c>
}
case SevenBits:
{
  SET_BIT(Buffer,URSEL);
  CLEAR_BIT(Buffer,UCSZ0);
    1140:	89 77       	andi	r24, 0x79	; 121
  SET_BIT(Buffer,UCSZ1);
    1142:	84 68       	ori	r24, 0x84	; 132
  CLEAR_BIT(UCSRB,UCSZ2);
    1144:	52 98       	cbi	0x0a, 2	; 10
  break;
    1146:	05 c0       	rjmp	.+10     	; 0x1152 <Uart_Init+0x7c>
}
case EightBits:
{   SET_BIT(Buffer,URSEL);
    SET_BIT(Buffer,UCSZ0);
    SET_BIT(Buffer,UCSZ1);
    1148:	86 68       	ori	r24, 0x86	; 134
    CLEAR_BIT(UCSRB,UCSZ2);
    114a:	52 98       	cbi	0x0a, 2	; 10
break;
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <Uart_Init+0x7c>
}

case NineBits:
{   SET_BIT(Buffer,URSEL);
	SET_BIT(Buffer,UCSZ0);
	SET_BIT(Buffer,UCSZ1);
    114e:	86 68       	ori	r24, 0x86	; 134
	SET_BIT(UCSRB,UCSZ2);
    1150:	52 9a       	sbi	0x0a, 2	; 10
	break;
}

}

switch (uart_mode) {
    1152:	00 23       	and	r16, r16
    1154:	19 f0       	breq	.+6      	; 0x115c <Uart_Init+0x86>
    1156:	01 30       	cpi	r16, 0x01	; 1
    1158:	29 f4       	brne	.+10     	; 0x1164 <Uart_Init+0x8e>
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <Uart_Init+0x8c>
  case ASynchronous:
  {
  SET_BIT(Buffer,URSEL);
    115c:	80 68       	ori	r24, 0x80	; 128
  CLEAR_BIT(Buffer,UMSEL);
    115e:	8f 7b       	andi	r24, 0xBF	; 191
  break;
    1160:	01 c0       	rjmp	.+2      	; 0x1164 <Uart_Init+0x8e>
  }
case Synchronous:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,UMSEL);
    1162:	80 6c       	ori	r24, 0xC0	; 192
  break;
}
}
switch (parity_Bit) {
    1164:	41 30       	cpi	r20, 0x01	; 1
    1166:	41 f0       	breq	.+16     	; 0x1178 <Uart_Init+0xa2>
    1168:	41 30       	cpi	r20, 0x01	; 1
    116a:	18 f0       	brcs	.+6      	; 0x1172 <Uart_Init+0x9c>
    116c:	42 30       	cpi	r20, 0x02	; 2
    116e:	41 f4       	brne	.+16     	; 0x1180 <Uart_Init+0xaa>
    1170:	06 c0       	rjmp	.+12     	; 0x117e <Uart_Init+0xa8>
  case NoParity:
{
SET_BIT(Buffer,URSEL);
    1172:	80 68       	ori	r24, 0x80	; 128
CLEAR_BIT(Buffer,UPM0);
CLEAR_BIT(Buffer,UPM1);
    1174:	8f 7c       	andi	r24, 0xCF	; 207
  break;
    1176:	04 c0       	rjmp	.+8      	; 0x1180 <Uart_Init+0xaa>
}
case EvenParity:
{
SET_BIT(Buffer,URSEL);
CLEAR_BIT(Buffer,UPM0);
    1178:	8f 74       	andi	r24, 0x4F	; 79
SET_BIT(Buffer,UPM1);
    117a:	80 6a       	ori	r24, 0xA0	; 160
break;
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <Uart_Init+0xaa>
}
case OddParity:
{
SET_BIT(Buffer,URSEL);
SET_BIT(Buffer,UPM1);
SET_BIT(Buffer,UPM0);
    117e:	80 6b       	ori	r24, 0xB0	; 176
}


}

UCSRC=Buffer;
    1180:	80 bd       	out	0x20, r24	; 32
SET_BIT(UCSRB,TXEN);/*TXEN*/
    1182:	53 9a       	sbi	0x0a, 3	; 10
SET_BIT(UCSRB,RXEN);/*RXEN*/
    1184:	54 9a       	sbi	0x0a, 4	; 10
}
    1186:	0f 91       	pop	r16
    1188:	08 95       	ret

0000118a <UartTransmitPooling>:
void UartTransmitPooling(uint8_t Data)
{
while( !( UCSRA & (1<<UDRE)));
    118a:	5d 9b       	sbis	0x0b, 5	; 11
    118c:	fe cf       	rjmp	.-4      	; 0x118a <UartTransmitPooling>
UDR=Data;
    118e:	8c b9       	out	0x0c, r24	; 12
}
    1190:	08 95       	ret

00001192 <UartRecievePooling>:
uint8_t UartRecievePooling(void)
{
	uint8_t data=0;
while (!( UCSRA & (1 << RXC)));/* Wait until new data receive*/
    1192:	5f 9b       	sbis	0x0b, 7	; 11
    1194:	fe cf       	rjmp	.-4      	; 0x1192 <UartRecievePooling>
data=UDR;
    1196:	8c b1       	in	r24, 0x0c	; 12
return data;									/* Get and return received data */
}
    1198:	08 95       	ret

0000119a <Enable_communication_interrupt>:


void Enable_communication_interrupt(void)
{
G_interrupt_Enable();
    119a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <G_interrupt_Enable>
SET_BIT(UCSRB,RXCIE);
    119e:	57 9a       	sbi	0x0a, 7	; 10
SET_BIT(UCSRB,TXCIE);
    11a0:	56 9a       	sbi	0x0a, 6	; 10
SET_BIT(SPCR,SPIE);
    11a2:	6f 9a       	sbi	0x0d, 7	; 13
}
    11a4:	08 95       	ret

000011a6 <UartRecieveInterrupt>:
void UartRecieveInterrupt(void)
{/*
if(u8_index<Buffer_Size)
{
u8_Notification_RX=TRUE;
*/  u8_DATA=UDR;/*
    11a6:	8c b1       	in	r24, 0x0c	; 12
    11a8:	80 93 65 00 	sts	0x0065, r24
}
  else{
    u8_index=0;
      }
*/
}
    11ac:	08 95       	ret

000011ae <UartTransmitInterrupt>:
 buf_is_full=1;
 u8_index=0;
     }
u8_Notification_TX=TRUE;
*/
UDR =u8_DATA;
    11ae:	80 91 65 00 	lds	r24, 0x0065
    11b2:	8c b9       	out	0x0c, r24	; 12
}
    11b4:	08 95       	ret

000011b6 <UartTransmitdataInt>:
void UartTransmitdataInt(uint8_t data_to_transmit)
{

	  u8_DATA=data_to_transmit;
    11b6:	80 93 65 00 	sts	0x0065, r24

}
    11ba:	08 95       	ret

000011bc <Uart_tryansmitfirstbyte>:

void Uart_tryansmitfirstbyte(uint8_t data)
{
UDR=data;
    11bc:	8c b9       	out	0x0c, r24	; 12
}
    11be:	08 95       	ret

000011c0 <Uart_recievefirstbyte>:
uint8_t Uart_recievefirstbyte(void)
{
uint8_t data=0;
data = UDR;
    11c0:	8c b1       	in	r24, 0x0c	; 12
return data;
}
    11c2:	08 95       	ret

000011c4 <Uart_De_Init>:
void Uart_De_Init(void)
{
  CLEAR_BIT(UCSRB,TXEN);/*TXEN*/
    11c4:	53 98       	cbi	0x0a, 3	; 10
  CLEAR_BIT(UCSRB,RXEN);/*RXEN*/
    11c6:	54 98       	cbi	0x0a, 4	; 10

}
    11c8:	08 95       	ret

000011ca <__divsf3>:
    11ca:	0c d0       	rcall	.+24     	; 0x11e4 <__divsf3x>
    11cc:	e6 c0       	rjmp	.+460    	; 0x139a <__fp_round>
    11ce:	de d0       	rcall	.+444    	; 0x138c <__fp_pscB>
    11d0:	40 f0       	brcs	.+16     	; 0x11e2 <__divsf3+0x18>
    11d2:	d5 d0       	rcall	.+426    	; 0x137e <__fp_pscA>
    11d4:	30 f0       	brcs	.+12     	; 0x11e2 <__divsf3+0x18>
    11d6:	21 f4       	brne	.+8      	; 0x11e0 <__divsf3+0x16>
    11d8:	5f 3f       	cpi	r21, 0xFF	; 255
    11da:	19 f0       	breq	.+6      	; 0x11e2 <__divsf3+0x18>
    11dc:	c7 c0       	rjmp	.+398    	; 0x136c <__fp_inf>
    11de:	51 11       	cpse	r21, r1
    11e0:	10 c1       	rjmp	.+544    	; 0x1402 <__fp_szero>
    11e2:	ca c0       	rjmp	.+404    	; 0x1378 <__fp_nan>

000011e4 <__divsf3x>:
    11e4:	eb d0       	rcall	.+470    	; 0x13bc <__fp_split3>
    11e6:	98 f3       	brcs	.-26     	; 0x11ce <__divsf3+0x4>

000011e8 <__divsf3_pse>:
    11e8:	99 23       	and	r25, r25
    11ea:	c9 f3       	breq	.-14     	; 0x11de <__divsf3+0x14>
    11ec:	55 23       	and	r21, r21
    11ee:	b1 f3       	breq	.-20     	; 0x11dc <__divsf3+0x12>
    11f0:	95 1b       	sub	r25, r21
    11f2:	55 0b       	sbc	r21, r21
    11f4:	bb 27       	eor	r27, r27
    11f6:	aa 27       	eor	r26, r26
    11f8:	62 17       	cp	r22, r18
    11fa:	73 07       	cpc	r23, r19
    11fc:	84 07       	cpc	r24, r20
    11fe:	38 f0       	brcs	.+14     	; 0x120e <__divsf3_pse+0x26>
    1200:	9f 5f       	subi	r25, 0xFF	; 255
    1202:	5f 4f       	sbci	r21, 0xFF	; 255
    1204:	22 0f       	add	r18, r18
    1206:	33 1f       	adc	r19, r19
    1208:	44 1f       	adc	r20, r20
    120a:	aa 1f       	adc	r26, r26
    120c:	a9 f3       	breq	.-22     	; 0x11f8 <__divsf3_pse+0x10>
    120e:	33 d0       	rcall	.+102    	; 0x1276 <__divsf3_pse+0x8e>
    1210:	0e 2e       	mov	r0, r30
    1212:	3a f0       	brmi	.+14     	; 0x1222 <__divsf3_pse+0x3a>
    1214:	e0 e8       	ldi	r30, 0x80	; 128
    1216:	30 d0       	rcall	.+96     	; 0x1278 <__divsf3_pse+0x90>
    1218:	91 50       	subi	r25, 0x01	; 1
    121a:	50 40       	sbci	r21, 0x00	; 0
    121c:	e6 95       	lsr	r30
    121e:	00 1c       	adc	r0, r0
    1220:	ca f7       	brpl	.-14     	; 0x1214 <__divsf3_pse+0x2c>
    1222:	29 d0       	rcall	.+82     	; 0x1276 <__divsf3_pse+0x8e>
    1224:	fe 2f       	mov	r31, r30
    1226:	27 d0       	rcall	.+78     	; 0x1276 <__divsf3_pse+0x8e>
    1228:	66 0f       	add	r22, r22
    122a:	77 1f       	adc	r23, r23
    122c:	88 1f       	adc	r24, r24
    122e:	bb 1f       	adc	r27, r27
    1230:	26 17       	cp	r18, r22
    1232:	37 07       	cpc	r19, r23
    1234:	48 07       	cpc	r20, r24
    1236:	ab 07       	cpc	r26, r27
    1238:	b0 e8       	ldi	r27, 0x80	; 128
    123a:	09 f0       	breq	.+2      	; 0x123e <__divsf3_pse+0x56>
    123c:	bb 0b       	sbc	r27, r27
    123e:	80 2d       	mov	r24, r0
    1240:	bf 01       	movw	r22, r30
    1242:	ff 27       	eor	r31, r31
    1244:	93 58       	subi	r25, 0x83	; 131
    1246:	5f 4f       	sbci	r21, 0xFF	; 255
    1248:	2a f0       	brmi	.+10     	; 0x1254 <__divsf3_pse+0x6c>
    124a:	9e 3f       	cpi	r25, 0xFE	; 254
    124c:	51 05       	cpc	r21, r1
    124e:	68 f0       	brcs	.+26     	; 0x126a <__divsf3_pse+0x82>
    1250:	8d c0       	rjmp	.+282    	; 0x136c <__fp_inf>
    1252:	d7 c0       	rjmp	.+430    	; 0x1402 <__fp_szero>
    1254:	5f 3f       	cpi	r21, 0xFF	; 255
    1256:	ec f3       	brlt	.-6      	; 0x1252 <__divsf3_pse+0x6a>
    1258:	98 3e       	cpi	r25, 0xE8	; 232
    125a:	dc f3       	brlt	.-10     	; 0x1252 <__divsf3_pse+0x6a>
    125c:	86 95       	lsr	r24
    125e:	77 95       	ror	r23
    1260:	67 95       	ror	r22
    1262:	b7 95       	ror	r27
    1264:	f7 95       	ror	r31
    1266:	9f 5f       	subi	r25, 0xFF	; 255
    1268:	c9 f7       	brne	.-14     	; 0x125c <__divsf3_pse+0x74>
    126a:	88 0f       	add	r24, r24
    126c:	91 1d       	adc	r25, r1
    126e:	96 95       	lsr	r25
    1270:	87 95       	ror	r24
    1272:	97 f9       	bld	r25, 7
    1274:	08 95       	ret
    1276:	e1 e0       	ldi	r30, 0x01	; 1
    1278:	66 0f       	add	r22, r22
    127a:	77 1f       	adc	r23, r23
    127c:	88 1f       	adc	r24, r24
    127e:	bb 1f       	adc	r27, r27
    1280:	62 17       	cp	r22, r18
    1282:	73 07       	cpc	r23, r19
    1284:	84 07       	cpc	r24, r20
    1286:	ba 07       	cpc	r27, r26
    1288:	20 f0       	brcs	.+8      	; 0x1292 <__divsf3_pse+0xaa>
    128a:	62 1b       	sub	r22, r18
    128c:	73 0b       	sbc	r23, r19
    128e:	84 0b       	sbc	r24, r20
    1290:	ba 0b       	sbc	r27, r26
    1292:	ee 1f       	adc	r30, r30
    1294:	88 f7       	brcc	.-30     	; 0x1278 <__divsf3_pse+0x90>
    1296:	e0 95       	com	r30
    1298:	08 95       	ret

0000129a <__fixunssfsi>:
    129a:	98 d0       	rcall	.+304    	; 0x13cc <__fp_splitA>
    129c:	88 f0       	brcs	.+34     	; 0x12c0 <__fixunssfsi+0x26>
    129e:	9f 57       	subi	r25, 0x7F	; 127
    12a0:	90 f0       	brcs	.+36     	; 0x12c6 <__fixunssfsi+0x2c>
    12a2:	b9 2f       	mov	r27, r25
    12a4:	99 27       	eor	r25, r25
    12a6:	b7 51       	subi	r27, 0x17	; 23
    12a8:	a0 f0       	brcs	.+40     	; 0x12d2 <__fixunssfsi+0x38>
    12aa:	d1 f0       	breq	.+52     	; 0x12e0 <__fixunssfsi+0x46>
    12ac:	66 0f       	add	r22, r22
    12ae:	77 1f       	adc	r23, r23
    12b0:	88 1f       	adc	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	1a f0       	brmi	.+6      	; 0x12bc <__fixunssfsi+0x22>
    12b6:	ba 95       	dec	r27
    12b8:	c9 f7       	brne	.-14     	; 0x12ac <__fixunssfsi+0x12>
    12ba:	12 c0       	rjmp	.+36     	; 0x12e0 <__fixunssfsi+0x46>
    12bc:	b1 30       	cpi	r27, 0x01	; 1
    12be:	81 f0       	breq	.+32     	; 0x12e0 <__fixunssfsi+0x46>
    12c0:	9f d0       	rcall	.+318    	; 0x1400 <__fp_zero>
    12c2:	b1 e0       	ldi	r27, 0x01	; 1
    12c4:	08 95       	ret
    12c6:	9c c0       	rjmp	.+312    	; 0x1400 <__fp_zero>
    12c8:	67 2f       	mov	r22, r23
    12ca:	78 2f       	mov	r23, r24
    12cc:	88 27       	eor	r24, r24
    12ce:	b8 5f       	subi	r27, 0xF8	; 248
    12d0:	39 f0       	breq	.+14     	; 0x12e0 <__fixunssfsi+0x46>
    12d2:	b9 3f       	cpi	r27, 0xF9	; 249
    12d4:	cc f3       	brlt	.-14     	; 0x12c8 <__fixunssfsi+0x2e>
    12d6:	86 95       	lsr	r24
    12d8:	77 95       	ror	r23
    12da:	67 95       	ror	r22
    12dc:	b3 95       	inc	r27
    12de:	d9 f7       	brne	.-10     	; 0x12d6 <__fixunssfsi+0x3c>
    12e0:	3e f4       	brtc	.+14     	; 0x12f0 <__fixunssfsi+0x56>
    12e2:	90 95       	com	r25
    12e4:	80 95       	com	r24
    12e6:	70 95       	com	r23
    12e8:	61 95       	neg	r22
    12ea:	7f 4f       	sbci	r23, 0xFF	; 255
    12ec:	8f 4f       	sbci	r24, 0xFF	; 255
    12ee:	9f 4f       	sbci	r25, 0xFF	; 255
    12f0:	08 95       	ret

000012f2 <__floatunsisf>:
    12f2:	e8 94       	clt
    12f4:	09 c0       	rjmp	.+18     	; 0x1308 <__floatsisf+0x12>

000012f6 <__floatsisf>:
    12f6:	97 fb       	bst	r25, 7
    12f8:	3e f4       	brtc	.+14     	; 0x1308 <__floatsisf+0x12>
    12fa:	90 95       	com	r25
    12fc:	80 95       	com	r24
    12fe:	70 95       	com	r23
    1300:	61 95       	neg	r22
    1302:	7f 4f       	sbci	r23, 0xFF	; 255
    1304:	8f 4f       	sbci	r24, 0xFF	; 255
    1306:	9f 4f       	sbci	r25, 0xFF	; 255
    1308:	99 23       	and	r25, r25
    130a:	a9 f0       	breq	.+42     	; 0x1336 <__floatsisf+0x40>
    130c:	f9 2f       	mov	r31, r25
    130e:	96 e9       	ldi	r25, 0x96	; 150
    1310:	bb 27       	eor	r27, r27
    1312:	93 95       	inc	r25
    1314:	f6 95       	lsr	r31
    1316:	87 95       	ror	r24
    1318:	77 95       	ror	r23
    131a:	67 95       	ror	r22
    131c:	b7 95       	ror	r27
    131e:	f1 11       	cpse	r31, r1
    1320:	f8 cf       	rjmp	.-16     	; 0x1312 <__floatsisf+0x1c>
    1322:	fa f4       	brpl	.+62     	; 0x1362 <__floatsisf+0x6c>
    1324:	bb 0f       	add	r27, r27
    1326:	11 f4       	brne	.+4      	; 0x132c <__floatsisf+0x36>
    1328:	60 ff       	sbrs	r22, 0
    132a:	1b c0       	rjmp	.+54     	; 0x1362 <__floatsisf+0x6c>
    132c:	6f 5f       	subi	r22, 0xFF	; 255
    132e:	7f 4f       	sbci	r23, 0xFF	; 255
    1330:	8f 4f       	sbci	r24, 0xFF	; 255
    1332:	9f 4f       	sbci	r25, 0xFF	; 255
    1334:	16 c0       	rjmp	.+44     	; 0x1362 <__floatsisf+0x6c>
    1336:	88 23       	and	r24, r24
    1338:	11 f0       	breq	.+4      	; 0x133e <__floatsisf+0x48>
    133a:	96 e9       	ldi	r25, 0x96	; 150
    133c:	11 c0       	rjmp	.+34     	; 0x1360 <__floatsisf+0x6a>
    133e:	77 23       	and	r23, r23
    1340:	21 f0       	breq	.+8      	; 0x134a <__floatsisf+0x54>
    1342:	9e e8       	ldi	r25, 0x8E	; 142
    1344:	87 2f       	mov	r24, r23
    1346:	76 2f       	mov	r23, r22
    1348:	05 c0       	rjmp	.+10     	; 0x1354 <__floatsisf+0x5e>
    134a:	66 23       	and	r22, r22
    134c:	71 f0       	breq	.+28     	; 0x136a <__floatsisf+0x74>
    134e:	96 e8       	ldi	r25, 0x86	; 134
    1350:	86 2f       	mov	r24, r22
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	60 e0       	ldi	r22, 0x00	; 0
    1356:	2a f0       	brmi	.+10     	; 0x1362 <__floatsisf+0x6c>
    1358:	9a 95       	dec	r25
    135a:	66 0f       	add	r22, r22
    135c:	77 1f       	adc	r23, r23
    135e:	88 1f       	adc	r24, r24
    1360:	da f7       	brpl	.-10     	; 0x1358 <__floatsisf+0x62>
    1362:	88 0f       	add	r24, r24
    1364:	96 95       	lsr	r25
    1366:	87 95       	ror	r24
    1368:	97 f9       	bld	r25, 7
    136a:	08 95       	ret

0000136c <__fp_inf>:
    136c:	97 f9       	bld	r25, 7
    136e:	9f 67       	ori	r25, 0x7F	; 127
    1370:	80 e8       	ldi	r24, 0x80	; 128
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	08 95       	ret

00001378 <__fp_nan>:
    1378:	9f ef       	ldi	r25, 0xFF	; 255
    137a:	80 ec       	ldi	r24, 0xC0	; 192
    137c:	08 95       	ret

0000137e <__fp_pscA>:
    137e:	00 24       	eor	r0, r0
    1380:	0a 94       	dec	r0
    1382:	16 16       	cp	r1, r22
    1384:	17 06       	cpc	r1, r23
    1386:	18 06       	cpc	r1, r24
    1388:	09 06       	cpc	r0, r25
    138a:	08 95       	ret

0000138c <__fp_pscB>:
    138c:	00 24       	eor	r0, r0
    138e:	0a 94       	dec	r0
    1390:	12 16       	cp	r1, r18
    1392:	13 06       	cpc	r1, r19
    1394:	14 06       	cpc	r1, r20
    1396:	05 06       	cpc	r0, r21
    1398:	08 95       	ret

0000139a <__fp_round>:
    139a:	09 2e       	mov	r0, r25
    139c:	03 94       	inc	r0
    139e:	00 0c       	add	r0, r0
    13a0:	11 f4       	brne	.+4      	; 0x13a6 <__fp_round+0xc>
    13a2:	88 23       	and	r24, r24
    13a4:	52 f0       	brmi	.+20     	; 0x13ba <__fp_round+0x20>
    13a6:	bb 0f       	add	r27, r27
    13a8:	40 f4       	brcc	.+16     	; 0x13ba <__fp_round+0x20>
    13aa:	bf 2b       	or	r27, r31
    13ac:	11 f4       	brne	.+4      	; 0x13b2 <__fp_round+0x18>
    13ae:	60 ff       	sbrs	r22, 0
    13b0:	04 c0       	rjmp	.+8      	; 0x13ba <__fp_round+0x20>
    13b2:	6f 5f       	subi	r22, 0xFF	; 255
    13b4:	7f 4f       	sbci	r23, 0xFF	; 255
    13b6:	8f 4f       	sbci	r24, 0xFF	; 255
    13b8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ba:	08 95       	ret

000013bc <__fp_split3>:
    13bc:	57 fd       	sbrc	r21, 7
    13be:	90 58       	subi	r25, 0x80	; 128
    13c0:	44 0f       	add	r20, r20
    13c2:	55 1f       	adc	r21, r21
    13c4:	59 f0       	breq	.+22     	; 0x13dc <__fp_splitA+0x10>
    13c6:	5f 3f       	cpi	r21, 0xFF	; 255
    13c8:	71 f0       	breq	.+28     	; 0x13e6 <__fp_splitA+0x1a>
    13ca:	47 95       	ror	r20

000013cc <__fp_splitA>:
    13cc:	88 0f       	add	r24, r24
    13ce:	97 fb       	bst	r25, 7
    13d0:	99 1f       	adc	r25, r25
    13d2:	61 f0       	breq	.+24     	; 0x13ec <__fp_splitA+0x20>
    13d4:	9f 3f       	cpi	r25, 0xFF	; 255
    13d6:	79 f0       	breq	.+30     	; 0x13f6 <__fp_splitA+0x2a>
    13d8:	87 95       	ror	r24
    13da:	08 95       	ret
    13dc:	12 16       	cp	r1, r18
    13de:	13 06       	cpc	r1, r19
    13e0:	14 06       	cpc	r1, r20
    13e2:	55 1f       	adc	r21, r21
    13e4:	f2 cf       	rjmp	.-28     	; 0x13ca <__fp_split3+0xe>
    13e6:	46 95       	lsr	r20
    13e8:	f1 df       	rcall	.-30     	; 0x13cc <__fp_splitA>
    13ea:	08 c0       	rjmp	.+16     	; 0x13fc <__fp_splitA+0x30>
    13ec:	16 16       	cp	r1, r22
    13ee:	17 06       	cpc	r1, r23
    13f0:	18 06       	cpc	r1, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	f1 cf       	rjmp	.-30     	; 0x13d8 <__fp_splitA+0xc>
    13f6:	86 95       	lsr	r24
    13f8:	71 05       	cpc	r23, r1
    13fa:	61 05       	cpc	r22, r1
    13fc:	08 94       	sec
    13fe:	08 95       	ret

00001400 <__fp_zero>:
    1400:	e8 94       	clt

00001402 <__fp_szero>:
    1402:	bb 27       	eor	r27, r27
    1404:	66 27       	eor	r22, r22
    1406:	77 27       	eor	r23, r23
    1408:	cb 01       	movw	r24, r22
    140a:	97 f9       	bld	r25, 7
    140c:	08 95       	ret

0000140e <__mulsf3>:
    140e:	0b d0       	rcall	.+22     	; 0x1426 <__mulsf3x>
    1410:	c4 cf       	rjmp	.-120    	; 0x139a <__fp_round>
    1412:	b5 df       	rcall	.-150    	; 0x137e <__fp_pscA>
    1414:	28 f0       	brcs	.+10     	; 0x1420 <__mulsf3+0x12>
    1416:	ba df       	rcall	.-140    	; 0x138c <__fp_pscB>
    1418:	18 f0       	brcs	.+6      	; 0x1420 <__mulsf3+0x12>
    141a:	95 23       	and	r25, r21
    141c:	09 f0       	breq	.+2      	; 0x1420 <__mulsf3+0x12>
    141e:	a6 cf       	rjmp	.-180    	; 0x136c <__fp_inf>
    1420:	ab cf       	rjmp	.-170    	; 0x1378 <__fp_nan>
    1422:	11 24       	eor	r1, r1
    1424:	ee cf       	rjmp	.-36     	; 0x1402 <__fp_szero>

00001426 <__mulsf3x>:
    1426:	ca df       	rcall	.-108    	; 0x13bc <__fp_split3>
    1428:	a0 f3       	brcs	.-24     	; 0x1412 <__mulsf3+0x4>

0000142a <__mulsf3_pse>:
    142a:	95 9f       	mul	r25, r21
    142c:	d1 f3       	breq	.-12     	; 0x1422 <__mulsf3+0x14>
    142e:	95 0f       	add	r25, r21
    1430:	50 e0       	ldi	r21, 0x00	; 0
    1432:	55 1f       	adc	r21, r21
    1434:	62 9f       	mul	r22, r18
    1436:	f0 01       	movw	r30, r0
    1438:	72 9f       	mul	r23, r18
    143a:	bb 27       	eor	r27, r27
    143c:	f0 0d       	add	r31, r0
    143e:	b1 1d       	adc	r27, r1
    1440:	63 9f       	mul	r22, r19
    1442:	aa 27       	eor	r26, r26
    1444:	f0 0d       	add	r31, r0
    1446:	b1 1d       	adc	r27, r1
    1448:	aa 1f       	adc	r26, r26
    144a:	64 9f       	mul	r22, r20
    144c:	66 27       	eor	r22, r22
    144e:	b0 0d       	add	r27, r0
    1450:	a1 1d       	adc	r26, r1
    1452:	66 1f       	adc	r22, r22
    1454:	82 9f       	mul	r24, r18
    1456:	22 27       	eor	r18, r18
    1458:	b0 0d       	add	r27, r0
    145a:	a1 1d       	adc	r26, r1
    145c:	62 1f       	adc	r22, r18
    145e:	73 9f       	mul	r23, r19
    1460:	b0 0d       	add	r27, r0
    1462:	a1 1d       	adc	r26, r1
    1464:	62 1f       	adc	r22, r18
    1466:	83 9f       	mul	r24, r19
    1468:	a0 0d       	add	r26, r0
    146a:	61 1d       	adc	r22, r1
    146c:	22 1f       	adc	r18, r18
    146e:	74 9f       	mul	r23, r20
    1470:	33 27       	eor	r19, r19
    1472:	a0 0d       	add	r26, r0
    1474:	61 1d       	adc	r22, r1
    1476:	23 1f       	adc	r18, r19
    1478:	84 9f       	mul	r24, r20
    147a:	60 0d       	add	r22, r0
    147c:	21 1d       	adc	r18, r1
    147e:	82 2f       	mov	r24, r18
    1480:	76 2f       	mov	r23, r22
    1482:	6a 2f       	mov	r22, r26
    1484:	11 24       	eor	r1, r1
    1486:	9f 57       	subi	r25, 0x7F	; 127
    1488:	50 40       	sbci	r21, 0x00	; 0
    148a:	8a f0       	brmi	.+34     	; 0x14ae <__mulsf3_pse+0x84>
    148c:	e1 f0       	breq	.+56     	; 0x14c6 <__mulsf3_pse+0x9c>
    148e:	88 23       	and	r24, r24
    1490:	4a f0       	brmi	.+18     	; 0x14a4 <__mulsf3_pse+0x7a>
    1492:	ee 0f       	add	r30, r30
    1494:	ff 1f       	adc	r31, r31
    1496:	bb 1f       	adc	r27, r27
    1498:	66 1f       	adc	r22, r22
    149a:	77 1f       	adc	r23, r23
    149c:	88 1f       	adc	r24, r24
    149e:	91 50       	subi	r25, 0x01	; 1
    14a0:	50 40       	sbci	r21, 0x00	; 0
    14a2:	a9 f7       	brne	.-22     	; 0x148e <__mulsf3_pse+0x64>
    14a4:	9e 3f       	cpi	r25, 0xFE	; 254
    14a6:	51 05       	cpc	r21, r1
    14a8:	70 f0       	brcs	.+28     	; 0x14c6 <__mulsf3_pse+0x9c>
    14aa:	60 cf       	rjmp	.-320    	; 0x136c <__fp_inf>
    14ac:	aa cf       	rjmp	.-172    	; 0x1402 <__fp_szero>
    14ae:	5f 3f       	cpi	r21, 0xFF	; 255
    14b0:	ec f3       	brlt	.-6      	; 0x14ac <__mulsf3_pse+0x82>
    14b2:	98 3e       	cpi	r25, 0xE8	; 232
    14b4:	dc f3       	brlt	.-10     	; 0x14ac <__mulsf3_pse+0x82>
    14b6:	86 95       	lsr	r24
    14b8:	77 95       	ror	r23
    14ba:	67 95       	ror	r22
    14bc:	b7 95       	ror	r27
    14be:	f7 95       	ror	r31
    14c0:	e7 95       	ror	r30
    14c2:	9f 5f       	subi	r25, 0xFF	; 255
    14c4:	c1 f7       	brne	.-16     	; 0x14b6 <__mulsf3_pse+0x8c>
    14c6:	fe 2b       	or	r31, r30
    14c8:	88 0f       	add	r24, r24
    14ca:	91 1d       	adc	r25, r1
    14cc:	96 95       	lsr	r25
    14ce:	87 95       	ror	r24
    14d0:	97 f9       	bld	r25, 7
    14d2:	08 95       	ret

000014d4 <_exit>:
    14d4:	f8 94       	cli

000014d6 <__stop_program>:
    14d6:	ff cf       	rjmp	.-2      	; 0x14d6 <__stop_program>
